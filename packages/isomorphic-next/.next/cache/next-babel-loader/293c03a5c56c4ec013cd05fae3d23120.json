{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(changeColor),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addNote),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(editNote),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(deleteNote),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, fork } from 'redux-saga/effects';\nimport actions from './actions';\nexport function changeColor() {\n  return _regeneratorRuntime.wrap(function changeColor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.CHANGE_COLOR, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\nexport function addNote() {\n  return _regeneratorRuntime.wrap(function addNote$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.ADD_NOTE, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function editNote() {\n  return _regeneratorRuntime.wrap(function editNote$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(actions.EDIT_NOTE, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function deleteNote() {\n  return _regeneratorRuntime.wrap(function deleteNote$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(actions.DELETE_NOTE, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(changeColor), fork(addNote), fork(editNote), fork(deleteNote)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/notes/saga.js"],"names":["changeColor","addNote","editNote","deleteNote","rootSaga","all","takeEvery","fork","actions","CHANGE_COLOR","ADD_NOTE","EDIT_NOTE","DELETE_NOTE"],"mappings":";;oDAGiBA,W;qDAGAC,O;qDAGAC,Q;qDAGAC,U;qDAGQC,Q;;AAfzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,SAAUR,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMM,SAAS,CAACE,OAAO,CAACC,YAAT,wCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvB,EAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP,OAAO,SAAUR,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMK,SAAS,CAACE,OAAO,CAACE,QAAT,wCAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAnB,EAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP,OAAO,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMI,SAAS,CAACE,OAAO,CAACG,SAAT,wCAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAApB,EAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP,OAAO,SAAUR,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMG,SAAS,CAACE,OAAO,CAACI,WAAT,wCAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAtB,EAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP,eAAe,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRE,IAAI,CAACP,WAAD,CADI,EAERO,IAAI,CAACN,OAAD,CAFI,EAGRM,IAAI,CAACL,QAAD,CAHI,EAIRK,IAAI,CAACJ,UAAD,CAJI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, fork } from 'redux-saga/effects';\nimport actions from './actions';\n\nexport function* changeColor() {\n  yield takeEvery(actions.CHANGE_COLOR, function*() {});\n}\nexport function* addNote() {\n  yield takeEvery(actions.ADD_NOTE, function*() {});\n}\nexport function* editNote() {\n  yield takeEvery(actions.EDIT_NOTE, function*() {});\n}\nexport function* deleteNote() {\n  yield takeEvery(actions.DELETE_NOTE, function*() {});\n}\nexport default function* rootSaga() {\n  yield all([\n    fork(changeColor),\n    fork(addNote),\n    fork(editNote),\n    fork(deleteNote),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}