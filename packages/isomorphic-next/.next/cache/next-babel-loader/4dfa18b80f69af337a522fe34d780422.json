{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport actions from './actions';\nconst initState = {\n  users: null,\n  chatRooms: [],\n  messages: [],\n  selectedChatRoom: null,\n  openCompose: false,\n  viewProfile: false,\n  composedId: null,\n  loading: true,\n  error: false,\n  mobileActiveList: true,\n  mobileActiveProfile: false,\n  restoringData: false,\n  addNewUsersProp: {\n    modalActive: false\n  }\n};\n\nconst sortTimeStamp = (optionA, optionB) => optionA.messageTime - optionB.messageTime;\n\nconst sortChatRooms = (optionA, optionB) => optionB.lastMessageTime - optionA.lastMessageTime;\n\nexport default function reducer(state = initState, action) {\n  switch (action.type) {\n    case actions.CHAT_INIT_SAGA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userId: action.userId,\n          user: action.user,\n          users: action.users,\n          chatRooms: action.chatRooms,\n          messages: action.messages,\n          selectedChatRoom: action.chatRooms[0],\n          loading: false\n        });\n      }\n\n    case actions.CHAT_UPDATE_CHATROOM:\n      {\n        const {\n          chatRoom,\n          messages,\n          selected\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          chatRooms: state.chatRooms.map(chatroom => chatroom.id === chatRoom.id ? _objectSpread(_objectSpread({}, chatroom), {}, {\n            lastMessage: chatRoom.lastMessage,\n            lastMessageTime: chatRoom.lastMessageTime\n          }) : chatroom).sort(sortChatRooms),\n          composedId: null,\n          openCompose: false,\n          selectedChatRoom: selected ? chatRoom : state.selectedChatRoom,\n          viewProfile: selected ? false : state.viewProfile,\n          messages: messages ? messages.sort(sortTimeStamp) : state.messages\n        });\n      }\n\n    case actions.CHAT_TOGGLE_COMPOSE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        openCompose: !state.openCompose,\n        viewProfile: false\n      });\n\n    case actions.CHAT_SET_TOGGLE_COMPOSED_ID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        composedId: action.id\n      });\n\n    case actions.CHAT_SET_TOGGLE_VIEW_PROFILE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        viewProfile: action.viewProfile\n      });\n\n    case actions.TOGGLE_MOBILE_LIST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mobileActiveList: action.mobileActiveList\n      });\n\n    case actions.TOGGLE_MOBILE_PROFILE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mobileActiveProfile: action.mobileActiveProfile\n      });\n\n    case actions.RESTORE_DEMO_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        restoringData: true\n      });\n\n    case actions.RESTORE_DEMO_DATA_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        restoringData: false\n      });\n\n    case actions.UPDATE_NEW_USER_PROPS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addNewUsersProp: action.addNewUsersProp\n      });\n\n    case actions.NEW_MESSAGE_SUCCESFULL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        openCompose: false,\n        composedId: null\n      });\n\n    case actions.ADD_NEW_USER_SAGA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addNewUsersProp: {\n          modalActive: false\n        },\n        users: [action.user, ...state.users],\n        chatRooms: [action.chatRoom, ...state.chatRooms]\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/chat/reducers.js"],"names":["actions","initState","users","chatRooms","messages","selectedChatRoom","openCompose","viewProfile","composedId","loading","error","mobileActiveList","mobileActiveProfile","restoringData","addNewUsersProp","modalActive","sortTimeStamp","optionA","optionB","messageTime","sortChatRooms","lastMessageTime","reducer","state","action","type","CHAT_INIT_SAGA","userId","user","CHAT_UPDATE_CHATROOM","chatRoom","selected","map","chatroom","id","lastMessage","sort","CHAT_TOGGLE_COMPOSE","CHAT_SET_TOGGLE_COMPOSED_ID","CHAT_SET_TOGGLE_VIEW_PROFILE","TOGGLE_MOBILE_LIST","TOGGLE_MOBILE_PROFILE","RESTORE_DEMO_DATA","RESTORE_DEMO_DATA_DONE","UPDATE_NEW_USER_PROPS","NEW_MESSAGE_SUCCESFULL","ADD_NEW_USER_SAGA"],"mappings":"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","sourcesContent":["import actions from './actions';\n\nconst initState = {\n  users: null,\n  chatRooms: [],\n  messages: [],\n  selectedChatRoom: null,\n  openCompose: false,\n  viewProfile: false,\n  composedId: null,\n  loading: true,\n  error: false,\n  mobileActiveList: true,\n  mobileActiveProfile: false,\n  restoringData: false,\n  addNewUsersProp: {\n    modalActive: false,\n  },\n};\nconst sortTimeStamp = (optionA, optionB) =>\n  optionA.messageTime - optionB.messageTime;\nconst sortChatRooms = (optionA, optionB) =>\n  optionB.lastMessageTime - optionA.lastMessageTime;\nexport default function reducer(state = initState, action) {\n  switch (action.type) {\n    case actions.CHAT_INIT_SAGA: {\n      return {\n        ...state,\n        userId: action.userId,\n        user: action.user,\n        users: action.users,\n        chatRooms: action.chatRooms,\n        messages: action.messages,\n        selectedChatRoom: action.chatRooms[0],\n        loading: false,\n      };\n    }\n    case actions.CHAT_UPDATE_CHATROOM: {\n      const { chatRoom, messages, selected } = action;\n      return {\n        ...state,\n        chatRooms: state.chatRooms\n          .map(chatroom =>\n            chatroom.id === chatRoom.id\n              ? {\n                  ...chatroom,\n                  lastMessage: chatRoom.lastMessage,\n                  lastMessageTime: chatRoom.lastMessageTime,\n                }\n              : chatroom\n          )\n          .sort(sortChatRooms),\n        composedId: null,\n        openCompose: false,\n        selectedChatRoom: selected ? chatRoom : state.selectedChatRoom,\n        viewProfile: selected ? false : state.viewProfile,\n        messages: messages ? messages.sort(sortTimeStamp) : state.messages,\n      };\n    }\n    case actions.CHAT_TOGGLE_COMPOSE:\n      return {\n        ...state,\n        openCompose: !state.openCompose,\n        viewProfile: false,\n      };\n    case actions.CHAT_SET_TOGGLE_COMPOSED_ID:\n      return {\n        ...state,\n        composedId: action.id,\n      };\n    case actions.CHAT_SET_TOGGLE_VIEW_PROFILE:\n      return {\n        ...state,\n        viewProfile: action.viewProfile,\n      };\n    case actions.TOGGLE_MOBILE_LIST:\n      return {\n        ...state,\n        mobileActiveList: action.mobileActiveList,\n      };\n    case actions.TOGGLE_MOBILE_PROFILE:\n      return {\n        ...state,\n        mobileActiveProfile: action.mobileActiveProfile,\n      };\n    case actions.RESTORE_DEMO_DATA:\n      return {\n        ...state,\n        restoringData: true,\n      };\n    case actions.RESTORE_DEMO_DATA_DONE:\n      return {\n        ...state,\n        restoringData: false,\n      };\n    case actions.UPDATE_NEW_USER_PROPS:\n      return {\n        ...state,\n        addNewUsersProp: action.addNewUsersProp,\n      };\n    case actions.NEW_MESSAGE_SUCCESFULL:\n      return {\n        ...state,\n        openCompose: false,\n        composedId: null,\n      };\n    case actions.ADD_NEW_USER_SAGA:\n      return {\n        ...state,\n        addNewUsersProp: { modalActive: false },\n        users: [action.user, ...state.users],\n        chatRooms: [action.chatRoom, ...state.chatRooms],\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}