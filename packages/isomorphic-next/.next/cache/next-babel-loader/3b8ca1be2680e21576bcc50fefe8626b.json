{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase, { auth } from './firebase';\nexport var getCurrentUser = function getCurrentUser() {\n  return new Promise(function (resolve, reject) {\n    var unsubscribe = auth.onAuthStateChanged(function (userAuth) {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport var googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport var facebookProvider = new firebase.auth.FacebookAuthProvider();\nexport var githubProvider = new firebase.auth.GithubAuthProvider();\nexport var twitterProvider = new firebase.auth.TwitterAuthProvider();\nexport var signInWithGoogle = function signInWithGoogle() {\n  return auth.signInWithPopup(googleProvider);\n};\nexport var signInWithFacebook = function signInWithFacebook() {\n  return auth.signInWithPopup(facebookProvider).then(function (result) {\n    // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n    var token = result.credential.accessToken; // The signed-in user info.\n\n    var user = result.user;\n    console.log(\"FB Token: \".concat(token), \"User: \".concat(user)); // ...\n  })[\"catch\"](function (error) {\n    // Handle Errors here.\n    console.error(error); // ...\n  });\n};\nexport var signInWithGithub = function signInWithGithub() {\n  return auth.signInWithPopup(githubProvider);\n};\nexport var signInWithTwitter = function signInWithTwitter() {\n  return auth.signInWithPopup(twitterProvider);\n};\nexport var signInWithEmail = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, password) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return auth.signInWithEmailAndPassword(email, password);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function signInWithEmail(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var signUpWithEmailAndPassword = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email, password) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return auth.createUserWithEmailAndPassword(email, password);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function signUpWithEmailAndPassword(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var resetPassword = function resetPassword(email) {\n  return auth.sendPasswordResetEmail(email);\n};\nexport var signOut = function signOut() {\n  return auth.signOut();\n};\nexport default auth;","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/lib/firebase/firebase.authentication.util.js"],"names":["firebase","auth","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","userAuth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","facebookProvider","FacebookAuthProvider","githubProvider","GithubAuthProvider","twitterProvider","TwitterAuthProvider","signInWithGoogle","signInWithPopup","signInWithFacebook","then","result","token","credential","accessToken","user","console","log","error","signInWithGithub","signInWithTwitter","signInWithEmail","email","password","signInWithEmailAndPassword","signUpWithEmailAndPassword","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","signOut"],"mappings":"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","sourcesContent":["import firebase, { auth } from './firebase';\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nexport const githubProvider = new firebase.auth.GithubAuthProvider();\nexport const twitterProvider = new firebase.auth.TwitterAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const signInWithFacebook = () =>\n  auth\n    .signInWithPopup(facebookProvider)\n    .then(function(result) {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      var token = result.credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n      console.log(`FB Token: ${token}`, `User: ${user}`);\n\n      // ...\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      console.error(error);\n\n      // ...\n    });\nexport const signInWithGithub = () => auth.signInWithPopup(githubProvider);\nexport const signInWithTwitter = () => auth.signInWithPopup(twitterProvider);\nexport const signInWithEmail = async (email, password) =>\n  await auth.signInWithEmailAndPassword(email, password);\nexport const signUpWithEmailAndPassword = async (email, password) =>\n  await auth.createUserWithEmailAndPassword(email, password);\n\nexport const resetPassword = email => auth.sendPasswordResetEmail(email);\n\nexport const signOut = () => auth.signOut();\nexport default auth;\n"]},"metadata":{},"sourceType":"module"}