{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport omit from 'lodash/omit';\nimport fakeData from './fakeData';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport { convertCollectionsSnapshotToMap, deleteDocuments, addCollectionAndDocuments } from '@iso/lib/firebase/firebase.util';\nconst fakeDataList = new fakeData(5).getAll();\n/**\n * DOC: https://redux-saga-firebase.js.org/reference/dev/firestore\n */\n\nconst COLLECTION_NAME = 'investors'; // change your collection\n\nconst ORDER_BY = 'id';\nconst ORDER = 'desc';\n\nfunction* loadFromFirestore() {\n  try {\n    const collectionRef = db.collection(COLLECTION_NAME).where('deleted_at', '==', null).orderBy(ORDER_BY, ORDER);\n    const snapshots = yield call(rsf.firestore.getCollection, collectionRef);\n    let data = yield call(convertCollectionsSnapshotToMap, snapshots);\n    yield put(actions.loadFromFireStoreSuccess(data));\n  } catch (error) {\n    console.log(error);\n    yield put(actions.loadFromFireStoreError(error));\n  }\n}\n\nfunction* storeIntoFirestore({\n  payload\n}) {\n  const {\n    data,\n    actionName\n  } = payload;\n\n  try {\n    switch (actionName) {\n      case 'delete':\n        yield call(rsf.firestore.setDocument, `${COLLECTION_NAME}/${data.key}`, {\n          deleted_at: new Date().getTime()\n        });\n        break;\n\n      case 'update':\n        yield call(rsf.firestore.setDocument, `${COLLECTION_NAME}/${data.key}`, _objectSpread({}, omit(data, ['key'])));\n        break;\n\n      default:\n        yield call(rsf.firestore.addDocument, COLLECTION_NAME, data);\n        break;\n    }\n\n    yield put({\n      type: actions.LOAD_FROM_FIRESTORE\n    });\n  } catch (error) {\n    console.log(error);\n    yield put(actions.saveIntoFireStoreError(error));\n  }\n}\n\nfunction* resetFireStoreDocuments() {\n  try {\n    yield call(deleteDocuments, COLLECTION_NAME);\n    yield call(addCollectionAndDocuments, COLLECTION_NAME, fakeDataList);\n    yield put({\n      type: actions.LOAD_FROM_FIRESTORE\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.LOAD_FROM_FIRESTORE, loadFromFirestore), takeEvery(actions.SAVE_INTO_FIRESTORE, storeIntoFirestore), takeEvery(actions.RESET_FIRESTORE_DOCUMENTS, resetFireStoreDocuments)]);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/investors/sagas.js"],"names":["all","takeEvery","put","call","actions","omit","fakeData","rsf","db","convertCollectionsSnapshotToMap","deleteDocuments","addCollectionAndDocuments","fakeDataList","getAll","COLLECTION_NAME","ORDER_BY","ORDER","loadFromFirestore","collectionRef","collection","where","orderBy","snapshots","firestore","getCollection","data","loadFromFireStoreSuccess","error","console","log","loadFromFireStoreError","storeIntoFirestore","payload","actionName","setDocument","key","deleted_at","Date","getTime","addDocument","type","LOAD_FROM_FIRESTORE","saveIntoFireStoreError","resetFireStoreDocuments","rootSaga","SAVE_INTO_FIRESTORE","RESET_FIRESTORE_DOCUMENTS"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport omit from 'lodash/omit';\nimport fakeData from './fakeData';\n\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport {\n  convertCollectionsSnapshotToMap,\n  deleteDocuments,\n  addCollectionAndDocuments,\n} from '@iso/lib/firebase/firebase.util';\n\nconst fakeDataList = new fakeData(5).getAll();\n\n/**\n * DOC: https://redux-saga-firebase.js.org/reference/dev/firestore\n */\n\nconst COLLECTION_NAME = 'investors'; // change your collection\nconst ORDER_BY = 'id';\nconst ORDER = 'desc';\n\nfunction* loadFromFirestore() {\n  try {\n    const collectionRef = db\n      .collection(COLLECTION_NAME)\n      .where('deleted_at', '==', null)\n      .orderBy(ORDER_BY, ORDER);\n    const snapshots = yield call(rsf.firestore.getCollection, collectionRef);\n    let data = yield call(convertCollectionsSnapshotToMap, snapshots);\n    yield put(actions.loadFromFireStoreSuccess(data));\n  } catch (error) {\n    console.log(error);\n    yield put(actions.loadFromFireStoreError(error));\n  }\n}\n\nfunction* storeIntoFirestore({ payload }) {\n  const { data, actionName } = payload;\n  try {\n    switch (actionName) {\n      case 'delete':\n        yield call(\n          rsf.firestore.setDocument,\n          `${COLLECTION_NAME}/${data.key}`,\n          {\n            deleted_at: new Date().getTime(),\n          }\n        );\n        break;\n      case 'update':\n        yield call(\n          rsf.firestore.setDocument,\n          `${COLLECTION_NAME}/${data.key}`,\n          {\n            ...omit(data, ['key']),\n          }\n        );\n        break;\n      default:\n        yield call(rsf.firestore.addDocument, COLLECTION_NAME, data);\n        break;\n    }\n    yield put({ type: actions.LOAD_FROM_FIRESTORE });\n  } catch (error) {\n    console.log(error);\n    yield put(actions.saveIntoFireStoreError(error));\n  }\n}\n\nfunction* resetFireStoreDocuments() {\n  try {\n    yield call(deleteDocuments, COLLECTION_NAME);\n    yield call(addCollectionAndDocuments, COLLECTION_NAME, fakeDataList);\n\n    yield put({ type: actions.LOAD_FROM_FIRESTORE });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.LOAD_FROM_FIRESTORE, loadFromFirestore),\n    takeEvery(actions.SAVE_INTO_FIRESTORE, storeIntoFirestore),\n    takeEvery(actions.RESET_FIRESTORE_DOCUMENTS, resetFireStoreDocuments),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}