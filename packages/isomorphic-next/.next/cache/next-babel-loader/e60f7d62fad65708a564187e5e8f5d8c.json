{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(jwtLoginRequest),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logoutRequest),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(onLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(onLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport { login, logout, removeCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nvar ApiUrl = '/api/login';\n\nfunction loginRequest(_ref) {\n  var user, response, _yield$response$json, token, error;\n\n  return _regeneratorRuntime.wrap(function loginRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          user = _ref.payload.user;\n          _context.prev = 1;\n          _context.next = 4;\n          return fetch(ApiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              user: user\n            })\n          });\n\n        case 4:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 8;\n          return response.json();\n\n        case 8:\n          _yield$response$json = _context.sent;\n          token = _yield$response$json.token;\n          _context.next = 12;\n          return call(login, {\n            token: token\n          });\n\n        case 12:\n          _context.next = 14;\n          return put(actions.loginRequestSuccess(token));\n\n        case 14:\n          _context.next = 19;\n          break;\n\n        case 16:\n          error = new Error(response.statusText);\n          error.response = response;\n          throw error;\n\n        case 19:\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 25;\n          return put(actions.loginRequestFailure(_context.t0));\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 21]]);\n}\n\nexport function jwtLoginRequest() {\n  return _regeneratorRuntime.wrap(function jwtLoginRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logoutRequest() {\n  return _regeneratorRuntime.wrap(function logoutRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logout);\n\n        case 3:\n          _context3.next = 5;\n          return put(actions.logoutRequestSuccess());\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put(actions.logoutRequestFailure(_context3.t0));\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n} // export function* loginSuccess() {\n//   yield takeLatest(actions.LOGIN_SUCCESS, function*(payload) {\n//     setCookie('login_saga', payload.token);\n//     yield setCookie('id_token', payload.token);\n//   });\n// }\n// export function* loginError() {\n//   yield takeLatest(actions.LOGIN_ERROR, function*() {});\n// }\n\n\nexport function onLogin() {\n  return _regeneratorRuntime.wrap(function onLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(actions.LOGIN_REQUEST_START, loginRequest);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function onLogout() {\n  return _regeneratorRuntime.wrap(function onLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([call(onLogin), call(jwtLoginRequest), call(onLogout)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/packages/isomorphic-next/authentication/sagas.js"],"names":["loginRequest","jwtLoginRequest","logoutRequest","onLogin","onLogout","rootSaga","all","takeLatest","put","call","fork","fetch","login","logout","removeCookie","notification","JwtAuthentication","actions","ApiUrl","user","payload","method","headers","body","JSON","stringify","response","status","json","token","loginRequestSuccess","error","Error","statusText","loginRequestFailure","logoutRequestSuccess","logoutRequestFailure","LOGIN_REQUEST_START","LOGOUT_REQUEST_START"],"mappings":"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","sourcesContent":["import { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\n\nimport { login, logout, removeCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\n\nconst ApiUrl = '/api/login';\n\nfunction* loginRequest({ payload: { user } }) {\n  try {\n    const response = yield fetch(ApiUrl, {\n      method: 'POST',\n\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ user }),\n    });\n    if (response.status === 200) {\n      const { token } = yield response.json();\n      yield call(login, { token });\n      yield put(actions.loginRequestSuccess(token));\n    } else {\n      let error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    yield put(actions.loginRequestFailure(error));\n  }\n}\n\nexport function* jwtLoginRequest() {\n  // yield takeLatest(actions.JWT_LOGIN_REQUEST, function*({ payload }) {\n  //   const result = yield call(JwtAuthentication.login, payload.userInfo);\n  //   if (result.error) {\n  //     notification('error', result.error);\n  //     yield put(actions.loginRequestFailure(error));\n  //   } else {\n  //     payload.history.push('/dashboard');\n  //     yield put({\n  //       type: actions.LOGIN_REQUEST_SUCCESS,\n  //       token: result.token,\n  //       profile: result.profile,\n  //     });\n  //   }\n  // });\n}\n\nfunction* logoutRequest() {\n  try {\n    yield call(logout);\n    yield put(actions.logoutRequestSuccess());\n  } catch (error) {\n    yield put(actions.logoutRequestFailure(error));\n  }\n}\n// export function* loginSuccess() {\n//   yield takeLatest(actions.LOGIN_SUCCESS, function*(payload) {\n//     setCookie('login_saga', payload.token);\n//     yield setCookie('id_token', payload.token);\n//   });\n// }\n\n// export function* loginError() {\n//   yield takeLatest(actions.LOGIN_ERROR, function*() {});\n// }\n\nexport function* onLogin() {\n  yield takeLatest(actions.LOGIN_REQUEST_START, loginRequest);\n}\nexport function* onLogout() {\n  yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\nexport default function* rootSaga() {\n  yield all([call(onLogin), call(jwtLoginRequest), call(onLogout)]);\n}\n"]},"metadata":{},"sourceType":"module"}