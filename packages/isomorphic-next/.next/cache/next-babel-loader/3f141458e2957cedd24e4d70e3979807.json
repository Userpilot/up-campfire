{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, takeEvery, put, call, fork, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport { getDocuments, getDocumentsByQuery, addDocument } from '@iso/lib/firebase/firebase.util';\n\nconst getSelectedChatRoom = state => state.Chat.selectedChatRoom;\n\nconst reverseString = str => str.split('').reverse().join('');\n\nconst sortChatrooms = (optionA, optionB) => optionB.lastMessageTime - optionA.lastMessageTime;\n\nconst sortMessages = (optionA, optionB) => optionA.messageTime - optionB.messageTime;\n\nconst getCurrentUser = () => {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl: 'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png'\n    }\n  };\n};\n\nlet chatroomsUserCollections;\nlet chatroomCollectionRef = db.collection('chatRooms');\nlet messagesCollectionRef = db.collection('messages');\n\nconst sendMessageBatch = async ({\n  payload,\n  selectedChatRoom\n}) => {\n  const batch = db.batch(); // const { chatRoom, text } = payload;\n\n  console.log(selectedChatRoom, payload, 'send');\n  const revId = reverseString(selectedChatRoom.id);\n  const messageTime = new Date().getTime();\n  const chatRoomModified = {\n    lastMessage: payload,\n    lastMessageTime: messageTime\n  };\n  batch.update(chatroomCollectionRef.doc(selectedChatRoom.id), chatRoomModified);\n  batch.update(chatroomCollectionRef.doc(revId), chatRoomModified);\n  batch.set(messagesCollectionRef.doc(), {\n    sender: selectedChatRoom.userId,\n    text: payload,\n    messageTime,\n    chatRoomId: selectedChatRoom.id\n  });\n  batch.commit(); // yield fork(updateChatrooms);\n};\n\nfunction* initChat(action) {\n  // console.log(payload, 'chatinit');\n  const payload = getCurrentUser();\n  const users = yield call(getDocuments, 'users');\n  const chatRooms = yield call(getDocumentsByQuery, 'chatRooms', ['userId', '==', payload.userId]);\n  chatRooms.sort(sortChatrooms);\n  const messages = yield call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRooms[0].id]);\n  console.log(chatRooms, 'chatRooms');\n  messages.sort(sortMessages); // fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n\n  chatroomsUserCollections = db.collection('chatRooms').where('userId', '==', payload.userId);\n  yield fork(updateChatrooms);\n  yield put({\n    type: actions.CHAT_INIT_SAGA,\n    user: payload.user,\n    userId: payload.userId,\n    users,\n    chatRooms,\n    messages\n  });\n}\n\nfunction* sendMessage({\n  payload\n}) {\n  // fsProps.selectedChatRoom = payload.chatRoom;\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n  yield call(sendMessageBatch, {\n    payload,\n    selectedChatRoom\n  });\n  yield put({\n    type: actions.NEW_MESSAGE_SUCCESFULL\n  }); // yield fork(updateChatrooms);\n}\n\nfunction* addNewUser({\n  user,\n  addNewUsersProp\n}) {\n  const newUserId = yield call(addDocument, 'users', addNewUsersProp);\n\n  const newUser = _objectSpread({\n    id: newUserId\n  }, addNewUsersProp);\n\n  const newChatroom = {\n    reverse: false,\n    userId: user.id,\n    otherUserId: newUserId,\n    otherUserInfo: newUser,\n    lastMessage: '',\n    lastMessageTime: 0\n  };\n  const newChatRoomId = yield call(addDocument, 'chatRooms', newChatroom);\n  const chatRoomKeyRev = reverseString(newChatRoomId);\n  const newChatroomRev = {\n    id: chatRoomKeyRev,\n    reverse: true,\n    userId: newUserId,\n    otherUserId: user.id,\n    otherUserInfo: user,\n    lastMessage: '',\n    lastMessageTime: 0\n  };\n  yield call(addDocument, 'chatRooms', newChatroomRev);\n  yield put({\n    type: actions.ADD_NEW_USER_SAGA,\n    user: newUser,\n    chatRoom: _objectSpread({\n      id: newChatRoomId\n    }, newChatroom)\n  });\n}\n\nfunction* updateChatrooms() {\n  const successActionCreator = data => {\n    const {\n      type,\n      newIndex\n    } = data.docChanges()[0];\n    const dataMoodified = type === 'modified';\n\n    if (!dataMoodified) {\n      return {\n        type: 'NO_CHANGE'\n      };\n    }\n\n    const chatRoom = data.docs[newIndex].data();\n    return {\n      type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n      payload: {\n        chatRoom\n      }\n    };\n  };\n\n  yield call(rsf.firestore.syncCollection, chatroomsUserCollections, {\n    successActionCreator\n  });\n}\n\nfunction* updateChatroomSaga({\n  payload\n}) {\n  const {\n    chatRoom\n  } = payload;\n  let {\n    selected\n  } = payload;\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n  let messages;\n\n  if (selected || chatRoom.id === selectedChatRoom.id) {\n    messages = yield call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRoom.id]);\n    selected = true;\n  }\n\n  yield put({\n    type: actions.CHAT_UPDATE_CHATROOM,\n    chatRoom,\n    messages,\n    selected\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.CHAT_INIT, initChat), takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga), takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage), takeEvery(actions.ADD_NEW_USER, addNewUser)]);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/chat/sagas.js"],"names":["all","takeEvery","put","call","fork","select","actions","rsf","db","getDocuments","getDocumentsByQuery","addDocument","getSelectedChatRoom","state","Chat","selectedChatRoom","reverseString","str","split","reverse","join","sortChatrooms","optionA","optionB","lastMessageTime","sortMessages","messageTime","getCurrentUser","userId","user","id","dob","gender","language","mobileNo","name","profileImageUrl","chatroomsUserCollections","chatroomCollectionRef","collection","messagesCollectionRef","sendMessageBatch","payload","batch","console","log","revId","Date","getTime","chatRoomModified","lastMessage","update","doc","set","sender","text","chatRoomId","commit","initChat","action","users","chatRooms","sort","messages","where","updateChatrooms","type","CHAT_INIT_SAGA","sendMessage","NEW_MESSAGE_SUCCESFULL","addNewUser","addNewUsersProp","newUserId","newUser","newChatroom","otherUserId","otherUserInfo","newChatRoomId","chatRoomKeyRev","newChatroomRev","ADD_NEW_USER_SAGA","chatRoom","successActionCreator","data","newIndex","docChanges","dataMoodified","docs","CHAT_UPDATE_CHATROOM_SAGA","firestore","syncCollection","updateChatroomSaga","selected","CHAT_UPDATE_CHATROOM","rootSaga","CHAT_INIT","CHAT_SEND_MESSAGE","ADD_NEW_USER"],"mappings":";;;;;;AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,MAA1C,QAAwD,oBAAxD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,EAAcC,EAAd,QAAwB,4BAAxB;AACA,SACEC,YADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,iCAJP;;AAKA,MAAMC,mBAAmB,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,gBAAhD;;AACA,MAAMC,aAAa,GAAGC,GAAG,IACvBA,GAAG,CACAC,KADH,CACS,EADT,EAEGC,OAFH,GAGGC,IAHH,CAGQ,EAHR,CADF;;AAMA,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KACpBA,OAAO,CAACC,eAAR,GAA0BF,OAAO,CAACE,eADpC;;AAEA,MAAMC,YAAY,GAAG,CAACH,OAAD,EAAUC,OAAV,KACnBD,OAAO,CAACI,WAAR,GAAsBH,OAAO,CAACG,WADhC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAO;AACLC,IAAAA,MAAM,EAAE,sBADH;AAELC,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAE,sBADA;AAEJC,MAAAA,GAAG,EAAE,aAFD;AAGJC,MAAAA,MAAM,EAAE,MAHJ;AAIJC,MAAAA,QAAQ,EAAE,SAJN;AAKJC,MAAAA,QAAQ,EAAE,YALN;AAMJC,MAAAA,IAAI,EAAE,cANF;AAOJC,MAAAA,eAAe,EACb;AARE;AAFD,GAAP;AAaD,CAdD;;AAgBA,IAAIC,wBAAJ;AACA,IAAIC,qBAAqB,GAAG9B,EAAE,CAAC+B,UAAH,CAAc,WAAd,CAA5B;AACA,IAAIC,qBAAqB,GAAGhC,EAAE,CAAC+B,UAAH,CAAc,UAAd,CAA5B;;AACA,MAAME,gBAAgB,GAAG,OAAO;AAAEC,EAAAA,OAAF;AAAW3B,EAAAA;AAAX,CAAP,KAAyC;AAChE,QAAM4B,KAAK,GAAGnC,EAAE,CAACmC,KAAH,EAAd,CADgE,CAEhE;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY9B,gBAAZ,EAA8B2B,OAA9B,EAAuC,MAAvC;AACA,QAAMI,KAAK,GAAG9B,aAAa,CAACD,gBAAgB,CAACe,EAAlB,CAA3B;AACA,QAAMJ,WAAW,GAAG,IAAIqB,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,WAAW,EAAER,OADU;AAEvBlB,IAAAA,eAAe,EAAEE;AAFM,GAAzB;AAIAiB,EAAAA,KAAK,CAACQ,MAAN,CACEb,qBAAqB,CAACc,GAAtB,CAA0BrC,gBAAgB,CAACe,EAA3C,CADF,EAEEmB,gBAFF;AAIAN,EAAAA,KAAK,CAACQ,MAAN,CAAab,qBAAqB,CAACc,GAAtB,CAA0BN,KAA1B,CAAb,EAA+CG,gBAA/C;AACAN,EAAAA,KAAK,CAACU,GAAN,CAAUb,qBAAqB,CAACY,GAAtB,EAAV,EAAuC;AACrCE,IAAAA,MAAM,EAAEvC,gBAAgB,CAACa,MADY;AAErC2B,IAAAA,IAAI,EAAEb,OAF+B;AAGrChB,IAAAA,WAHqC;AAIrC8B,IAAAA,UAAU,EAAEzC,gBAAgB,CAACe;AAJQ,GAAvC;AAMAa,EAAAA,KAAK,CAACc,MAAN,GAtBgE,CAuBhE;AACD,CAxBD;;AA0BA,UAAUC,QAAV,CAAmBC,MAAnB,EAA2B;AACzB;AAEA,QAAMjB,OAAO,GAAGf,cAAc,EAA9B;AACA,QAAMiC,KAAK,GAAG,MAAMzD,IAAI,CAACM,YAAD,EAAe,OAAf,CAAxB;AAEA,QAAMoD,SAAS,GAAG,MAAM1D,IAAI,CAACO,mBAAD,EAAsB,WAAtB,EAAmC,CAC7D,QAD6D,EAE7D,IAF6D,EAG7DgC,OAAO,CAACd,MAHqD,CAAnC,CAA5B;AAKAiC,EAAAA,SAAS,CAACC,IAAV,CAAezC,aAAf;AACA,QAAM0C,QAAQ,GAAG,MAAM5D,IAAI,CAACO,mBAAD,EAAsB,UAAtB,EAAkC,CAC3D,YAD2D,EAE3D,IAF2D,EAG3DmD,SAAS,CAAC,CAAD,CAAT,CAAa/B,EAH8C,CAAlC,CAA3B;AAKAc,EAAAA,OAAO,CAACC,GAAR,CAAYgB,SAAZ,EAAuB,WAAvB;AACAE,EAAAA,QAAQ,CAACD,IAAT,CAAcrC,YAAd,EAlByB,CAmBzB;;AACAY,EAAAA,wBAAwB,GAAG7B,EAAE,CAC1B+B,UADwB,CACb,WADa,EAExByB,KAFwB,CAElB,QAFkB,EAER,IAFQ,EAEFtB,OAAO,CAACd,MAFN,CAA3B;AAGA,QAAMxB,IAAI,CAAC6D,eAAD,CAAV;AACA,QAAM/D,GAAG,CAAC;AACRgE,IAAAA,IAAI,EAAE5D,OAAO,CAAC6D,cADN;AAERtC,IAAAA,IAAI,EAAEa,OAAO,CAACb,IAFN;AAGRD,IAAAA,MAAM,EAAEc,OAAO,CAACd,MAHR;AAIRgC,IAAAA,KAJQ;AAKRC,IAAAA,SALQ;AAMRE,IAAAA;AANQ,GAAD,CAAT;AAQD;;AAED,UAAUK,WAAV,CAAsB;AAAE1B,EAAAA;AAAF,CAAtB,EAAmC;AACjC;AACA,QAAM3B,gBAAgB,GAAG,MAAMV,MAAM,CAACO,mBAAD,CAArC;AAEA,QAAMT,IAAI,CAACsC,gBAAD,EAAmB;AAAEC,IAAAA,OAAF;AAAW3B,IAAAA;AAAX,GAAnB,CAAV;AACA,QAAMb,GAAG,CAAC;AACRgE,IAAAA,IAAI,EAAE5D,OAAO,CAAC+D;AADN,GAAD,CAAT,CALiC,CAQjC;AACD;;AACD,UAAUC,UAAV,CAAqB;AAAEzC,EAAAA,IAAF;AAAQ0C,EAAAA;AAAR,CAArB,EAAgD;AAC9C,QAAMC,SAAS,GAAG,MAAMrE,IAAI,CAACQ,WAAD,EAAc,OAAd,EAAuB4D,eAAvB,CAA5B;;AACA,QAAME,OAAO;AAAK3C,IAAAA,EAAE,EAAE0C;AAAT,KAAuBD,eAAvB,CAAb;;AACA,QAAMG,WAAW,GAAG;AAClBvD,IAAAA,OAAO,EAAE,KADS;AAElBS,IAAAA,MAAM,EAAEC,IAAI,CAACC,EAFK;AAGlB6C,IAAAA,WAAW,EAAEH,SAHK;AAIlBI,IAAAA,aAAa,EAAEH,OAJG;AAKlBvB,IAAAA,WAAW,EAAE,EALK;AAMlB1B,IAAAA,eAAe,EAAE;AANC,GAApB;AAQA,QAAMqD,aAAa,GAAG,MAAM1E,IAAI,CAACQ,WAAD,EAAc,WAAd,EAA2B+D,WAA3B,CAAhC;AACA,QAAMI,cAAc,GAAG9D,aAAa,CAAC6D,aAAD,CAApC;AACA,QAAME,cAAc,GAAG;AACrBjD,IAAAA,EAAE,EAAEgD,cADiB;AAErB3D,IAAAA,OAAO,EAAE,IAFY;AAGrBS,IAAAA,MAAM,EAAE4C,SAHa;AAIrBG,IAAAA,WAAW,EAAE9C,IAAI,CAACC,EAJG;AAKrB8C,IAAAA,aAAa,EAAE/C,IALM;AAMrBqB,IAAAA,WAAW,EAAE,EANQ;AAOrB1B,IAAAA,eAAe,EAAE;AAPI,GAAvB;AASA,QAAMrB,IAAI,CAACQ,WAAD,EAAc,WAAd,EAA2BoE,cAA3B,CAAV;AAEA,QAAM7E,GAAG,CAAC;AACRgE,IAAAA,IAAI,EAAE5D,OAAO,CAAC0E,iBADN;AAERnD,IAAAA,IAAI,EAAE4C,OAFE;AAGRQ,IAAAA,QAAQ;AAAInD,MAAAA,EAAE,EAAE+C;AAAR,OAA0BH,WAA1B;AAHA,GAAD,CAAT;AAKD;;AACD,UAAUT,eAAV,GAA4B;AAC1B,QAAMiB,oBAAoB,GAAGC,IAAI,IAAI;AACnC,UAAM;AAAEjB,MAAAA,IAAF;AAAQkB,MAAAA;AAAR,QAAqBD,IAAI,CAACE,UAAL,GAAkB,CAAlB,CAA3B;AACA,UAAMC,aAAa,GAAGpB,IAAI,KAAK,UAA/B;;AACA,QAAI,CAACoB,aAAL,EAAoB;AAClB,aAAO;AAAEpB,QAAAA,IAAI,EAAE;AAAR,OAAP;AACD;;AACD,UAAMe,QAAQ,GAAGE,IAAI,CAACI,IAAL,CAAUH,QAAV,EAAoBD,IAApB,EAAjB;AAEA,WAAO;AACLjB,MAAAA,IAAI,EAAE5D,OAAO,CAACkF,yBADT;AAEL9C,MAAAA,OAAO,EAAE;AAAEuC,QAAAA;AAAF;AAFJ,KAAP;AAID,GAZD;;AAaA,QAAM9E,IAAI,CAACI,GAAG,CAACkF,SAAJ,CAAcC,cAAf,EAA+BrD,wBAA/B,EAAyD;AACjE6C,IAAAA;AADiE,GAAzD,CAAV;AAGD;;AACD,UAAUS,kBAAV,CAA6B;AAAEjD,EAAAA;AAAF,CAA7B,EAA0C;AACxC,QAAM;AAAEuC,IAAAA;AAAF,MAAevC,OAArB;AACA,MAAI;AAAEkD,IAAAA;AAAF,MAAelD,OAAnB;AAEA,QAAM3B,gBAAgB,GAAG,MAAMV,MAAM,CAACO,mBAAD,CAArC;AAEA,MAAImD,QAAJ;;AACA,MAAI6B,QAAQ,IAAIX,QAAQ,CAACnD,EAAT,KAAgBf,gBAAgB,CAACe,EAAjD,EAAqD;AACnDiC,IAAAA,QAAQ,GAAG,MAAM5D,IAAI,CAACO,mBAAD,EAAsB,UAAtB,EAAkC,CACrD,YADqD,EAErD,IAFqD,EAGrDuE,QAAQ,CAACnD,EAH4C,CAAlC,CAArB;AAKA8D,IAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,QAAM1F,GAAG,CAAC;AACRgE,IAAAA,IAAI,EAAE5D,OAAO,CAACuF,oBADN;AAERZ,IAAAA,QAFQ;AAGRlB,IAAAA,QAHQ;AAIR6B,IAAAA;AAJQ,GAAD,CAAT;AAMD;;AACD,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAM9F,GAAG,CAAC,CACRC,SAAS,CAACK,OAAO,CAACyF,SAAT,EAAoBrC,QAApB,CADD,EAERzD,SAAS,CAACK,OAAO,CAACkF,yBAAT,EAAoCG,kBAApC,CAFD,EAGR1F,SAAS,CAACK,OAAO,CAAC0F,iBAAT,EAA4B5B,WAA5B,CAHD,EAIRnE,SAAS,CAACK,OAAO,CAAC2F,YAAT,EAAuB3B,UAAvB,CAJD,CAAD,CAAT;AAMD","sourcesContent":["import { all, takeEvery, put, call, fork, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport {\n  getDocuments,\n  getDocumentsByQuery,\n  addDocument,\n} from '@iso/lib/firebase/firebase.util';\nconst getSelectedChatRoom = state => state.Chat.selectedChatRoom;\nconst reverseString = str =>\n  str\n    .split('')\n    .reverse()\n    .join('');\n\nconst sortChatrooms = (optionA, optionB) =>\n  optionB.lastMessageTime - optionA.lastMessageTime;\nconst sortMessages = (optionA, optionB) =>\n  optionA.messageTime - optionB.messageTime;\nconst getCurrentUser = () => {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl:\n        'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png',\n    },\n  };\n};\n\nlet chatroomsUserCollections;\nlet chatroomCollectionRef = db.collection('chatRooms');\nlet messagesCollectionRef = db.collection('messages');\nconst sendMessageBatch = async ({ payload, selectedChatRoom }) => {\n  const batch = db.batch();\n  // const { chatRoom, text } = payload;\n\n  console.log(selectedChatRoom, payload, 'send');\n  const revId = reverseString(selectedChatRoom.id);\n  const messageTime = new Date().getTime();\n  const chatRoomModified = {\n    lastMessage: payload,\n    lastMessageTime: messageTime,\n  };\n  batch.update(\n    chatroomCollectionRef.doc(selectedChatRoom.id),\n    chatRoomModified\n  );\n  batch.update(chatroomCollectionRef.doc(revId), chatRoomModified);\n  batch.set(messagesCollectionRef.doc(), {\n    sender: selectedChatRoom.userId,\n    text: payload,\n    messageTime,\n    chatRoomId: selectedChatRoom.id,\n  });\n  batch.commit();\n  // yield fork(updateChatrooms);\n};\n\nfunction* initChat(action) {\n  // console.log(payload, 'chatinit');\n\n  const payload = getCurrentUser();\n  const users = yield call(getDocuments, 'users');\n\n  const chatRooms = yield call(getDocumentsByQuery, 'chatRooms', [\n    'userId',\n    '==',\n    payload.userId,\n  ]);\n  chatRooms.sort(sortChatrooms);\n  const messages = yield call(getDocumentsByQuery, 'messages', [\n    'chatRoomId',\n    '==',\n    chatRooms[0].id,\n  ]);\n  console.log(chatRooms, 'chatRooms');\n  messages.sort(sortMessages);\n  // fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n  chatroomsUserCollections = db\n    .collection('chatRooms')\n    .where('userId', '==', payload.userId);\n  yield fork(updateChatrooms);\n  yield put({\n    type: actions.CHAT_INIT_SAGA,\n    user: payload.user,\n    userId: payload.userId,\n    users,\n    chatRooms,\n    messages,\n  });\n}\n\nfunction* sendMessage({ payload }) {\n  // fsProps.selectedChatRoom = payload.chatRoom;\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n\n  yield call(sendMessageBatch, { payload, selectedChatRoom });\n  yield put({\n    type: actions.NEW_MESSAGE_SUCCESFULL,\n  });\n  // yield fork(updateChatrooms);\n}\nfunction* addNewUser({ user, addNewUsersProp }) {\n  const newUserId = yield call(addDocument, 'users', addNewUsersProp);\n  const newUser = { id: newUserId, ...addNewUsersProp };\n  const newChatroom = {\n    reverse: false,\n    userId: user.id,\n    otherUserId: newUserId,\n    otherUserInfo: newUser,\n    lastMessage: '',\n    lastMessageTime: 0,\n  };\n  const newChatRoomId = yield call(addDocument, 'chatRooms', newChatroom);\n  const chatRoomKeyRev = reverseString(newChatRoomId);\n  const newChatroomRev = {\n    id: chatRoomKeyRev,\n    reverse: true,\n    userId: newUserId,\n    otherUserId: user.id,\n    otherUserInfo: user,\n    lastMessage: '',\n    lastMessageTime: 0,\n  };\n  yield call(addDocument, 'chatRooms', newChatroomRev);\n\n  yield put({\n    type: actions.ADD_NEW_USER_SAGA,\n    user: newUser,\n    chatRoom: { id: newChatRoomId, ...newChatroom },\n  });\n}\nfunction* updateChatrooms() {\n  const successActionCreator = data => {\n    const { type, newIndex } = data.docChanges()[0];\n    const dataMoodified = type === 'modified';\n    if (!dataMoodified) {\n      return { type: 'NO_CHANGE' };\n    }\n    const chatRoom = data.docs[newIndex].data();\n\n    return {\n      type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n      payload: { chatRoom },\n    };\n  };\n  yield call(rsf.firestore.syncCollection, chatroomsUserCollections, {\n    successActionCreator,\n  });\n}\nfunction* updateChatroomSaga({ payload }) {\n  const { chatRoom } = payload;\n  let { selected } = payload;\n\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n\n  let messages;\n  if (selected || chatRoom.id === selectedChatRoom.id) {\n    messages = yield call(getDocumentsByQuery, 'messages', [\n      'chatRoomId',\n      '==',\n      chatRoom.id,\n    ]);\n    selected = true;\n  }\n\n  yield put({\n    type: actions.CHAT_UPDATE_CHATROOM,\n    chatRoom,\n    messages,\n    selected,\n  });\n}\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.CHAT_INIT, initChat),\n    takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga),\n    takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage),\n    takeEvery(actions.ADD_NEW_USER, addNewUser),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}