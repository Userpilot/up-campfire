{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/components/uielements/editor.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport dynamic from 'next/dynamic';\nimport 'react-quill/dist/quill.snow.css';\nimport 'react-quill/dist/quill.bubble.css';\nimport 'react-quill/dist/quill.core.css';\nimport EditorWrapper from './styles/editor.style';\n\nvar Editor = /*#__PURE__*/function (_React$Component) {\n  _inherits(Editor, _React$Component);\n\n  var _super = _createSuper(Editor);\n\n  function Editor(props) {\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      editorHtml: '',\n      theme: 'snow'\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"handleChange\",\n    value: function handleChange(html) {\n      this.setState({\n        editorHtml: html\n      });\n    }\n  }, {\n    key: \"handleThemeChange\",\n    value: function handleThemeChange(newTheme) {\n      if (newTheme === 'core') newTheme = null;\n      this.setState({\n        theme: newTheme\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(EditorWrapper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }, __jsx(ReactQuill, {\n        theme: this.state.theme,\n        onChange: this.handleChange,\n        value: this.state.editorHtml,\n        modules: Editor.modules,\n        formats: Editor.formats,\n        bounds: \".app\",\n        placeholder: this.props.placeholder,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Editor;\n}(React.Component);\n/*\n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\n\n\nEditor.modules = {\n  toolbar: [[{\n    header: '1'\n  }, {\n    header: '2'\n  }, {\n    font: []\n  }], [{\n    size: []\n  }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n    list: 'ordered'\n  }, {\n    list: 'bullet'\n  }, {\n    indent: '-1'\n  }, {\n    indent: '+1'\n  }], ['link', 'image', 'video'], ['clean']],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false\n  }\n};\n/*\n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\n\nEditor.formats = ['header', 'font', 'size', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent', 'link', 'image', 'video'];\n/*\n * PropType validation\n */\n\nEditor.propTypes = {\n  placeholder: PropTypes.string\n};\nexport default Editor;","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/components/uielements/editor.js"],"names":["React","PropTypes","dynamic","EditorWrapper","Editor","props","state","editorHtml","theme","handleChange","bind","html","setState","newTheme","modules","formats","placeholder","Component","toolbar","header","font","size","list","indent","clipboard","matchVisual","propTypes","string"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,OAAO,iCAAP;AACA,OAAO,mCAAP;AACA,OAAO,iCAAP;AACA,OAAOC,aAAP,MAA0B,uBAA1B;;IACMC,M;;;;;AACJ,kBAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,UAAU,EAAE,EAAd;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAb;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AAHkB;AAInB;;;;iCAEaC,I,EAAM;AAClB,WAAKC,QAAL,CAAc;AAAEL,QAAAA,UAAU,EAAEI;AAAd,OAAd;AACD;;;sCAEkBE,Q,EAAU;AAC3B,UAAIA,QAAQ,KAAK,MAAjB,EAAyBA,QAAQ,GAAG,IAAX;AACzB,WAAKD,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAEK;AAAT,OAAd;AACD;;;6BAES;AACR,aACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,UAAD;AACE,QAAA,KAAK,EAAE,KAAKP,KAAL,CAAWE,KADpB;AAEE,QAAA,QAAQ,EAAE,KAAKC,YAFjB;AAGE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,UAHpB;AAIE,QAAA,OAAO,EAAEH,MAAM,CAACU,OAJlB;AAKE,QAAA,OAAO,EAAEV,MAAM,CAACW,OALlB;AAME,QAAA,MAAM,EAAC,MANT;AAOE,QAAA,WAAW,EAAE,KAAKV,KAAL,CAAWW,WAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAqBD;;;;EAtCkBhB,KAAK,CAACiB,S;AAyC3B;;;;;;AAIAb,MAAM,CAACU,OAAP,GAAiB;AACfI,EAAAA,OAAO,EAAE,CACP,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAD,EAAkB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAAlB,EAAmC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAnC,CADO,EAEP,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAFO,EAGP,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,EAAgC,QAAhC,EAA0C,YAA1C,CAHO,EAIP,CACE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADF,EAEE;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFF,EAGE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAHF,EAIE;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAJF,CAJO,EAUP,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAVO,EAWP,CAAC,OAAD,CAXO,CADM;AAcfC,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,WAAW,EAAE;AAFJ;AAdI,CAAjB;AAmBA;;;;;AAIArB,MAAM,CAACW,OAAP,GAAiB,CACf,QADe,EAEf,MAFe,EAGf,MAHe,EAIf,MAJe,EAKf,QALe,EAMf,WANe,EAOf,QAPe,EAQf,YARe,EASf,MATe,EAUf,QAVe,EAWf,QAXe,EAYf,MAZe,EAaf,OAbe,EAcf,OAde,CAAjB;AAiBA;;;;AAGAX,MAAM,CAACsB,SAAP,GAAmB;AACjBV,EAAAA,WAAW,EAAEf,SAAS,CAAC0B;AADN,CAAnB;AAIA,eAAevB,MAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport dynamic from 'next/dynamic'\n\nimport 'react-quill/dist/quill.snow.css'\nimport 'react-quill/dist/quill.bubble.css'\nimport 'react-quill/dist/quill.core.css'\nimport EditorWrapper from './styles/editor.style'\nclass Editor extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { editorHtml: '', theme: 'snow' }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (html) {\n    this.setState({ editorHtml: html })\n  }\n\n  handleThemeChange (newTheme) {\n    if (newTheme === 'core') newTheme = null\n    this.setState({ theme: newTheme })\n  }\n\n  render () {\n    return (\n      <EditorWrapper>\n        <ReactQuill\n          theme={this.state.theme}\n          onChange={this.handleChange}\n          value={this.state.editorHtml}\n          modules={Editor.modules}\n          formats={Editor.formats}\n          bounds=\".app\"\n          placeholder={this.props.placeholder}\n        />\n        {/* <div className=\"themeSwitcher\">\n          <label>Theme </label>\n          <select onChange={e => this.handleThemeChange(e.target.value)}>\n            <option value=\"snow\">Snow</option>\n            <option value=\"bubble\">Bubble</option>\n            <option value=\"core\">Core</option>\n          </select>\n        </div> */}\n      </EditorWrapper>\n    )\n  }\n}\n\n/*\n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\nEditor.modules = {\n  toolbar: [\n    [{ header: '1' }, { header: '2' }, { font: [] }],\n    [{ size: [] }],\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n    [\n      { list: 'ordered' },\n      { list: 'bullet' },\n      { indent: '-1' },\n      { indent: '+1' }\n    ],\n    ['link', 'image', 'video'],\n    ['clean']\n  ],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false\n  }\n}\n/*\n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\nEditor.formats = [\n  'header',\n  'font',\n  'size',\n  'bold',\n  'italic',\n  'underline',\n  'strike',\n  'blockquote',\n  'list',\n  'bullet',\n  'indent',\n  'link',\n  'image',\n  'video'\n]\n\n/*\n * PropType validation\n */\nEditor.propTypes = {\n  placeholder: PropTypes.string\n}\n\nexport default Editor\n"]},"metadata":{},"sourceType":"module"}