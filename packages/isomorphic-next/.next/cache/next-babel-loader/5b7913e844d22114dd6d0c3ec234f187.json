{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fakeData from './data';\nimport todoActions from './actions';\nconst colors = ['#7ED321', '#de1b1b', '#511E78', '#ff9009', '#42a5f5'];\nconst todos = new fakeData(5, colors.length).getAll();\nconst initState = {\n  todos,\n  colors\n};\nexport default function todoReducer(state = initState, action) {\n  const todos = state.todos;\n  const newtodos = [];\n\n  switch (action.type) {\n    case todoActions.CHANGE_TODO:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: action.todos\n      });\n\n    case todoActions.ALL_COMPLETED:\n      todos.forEach(todo => {\n        todo.completed = true;\n        newtodos.push(todo);\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: newtodos\n      });\n\n    case todoActions.DELETE_COMPLETED:\n      todos.forEach(todo => {\n        if (todo.completed !== true) {\n          newtodos.push(todo);\n        }\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: newtodos\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/todos/reducer.js"],"names":["fakeData","todoActions","colors","todos","length","getAll","initState","todoReducer","state","action","newtodos","type","CHANGE_TODO","ALL_COMPLETED","forEach","todo","completed","push","DELETE_COMPLETED"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,QAArB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AAEA,MAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAAf;AACA,MAAMC,KAAK,GAAG,IAAIH,QAAJ,CAAa,CAAb,EAAgBE,MAAM,CAACE,MAAvB,EAA+BC,MAA/B,EAAd;AAEA,MAAMC,SAAS,GAAG;AAChBH,EAAAA,KADgB;AAEhBD,EAAAA;AAFgB,CAAlB;AAKA,eAAe,SAASK,WAAT,CAAqBC,KAAK,GAAGF,SAA7B,EAAwCG,MAAxC,EAAgD;AAC7D,QAAMN,KAAK,GAAGK,KAAK,CAACL,KAApB;AACA,QAAMO,QAAQ,GAAG,EAAjB;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKV,WAAW,CAACW,WAAjB;AACE,6CACKJ,KADL;AAEEL,QAAAA,KAAK,EAAEM,MAAM,CAACN;AAFhB;;AAIF,SAAKF,WAAW,CAACY,aAAjB;AACEV,MAAAA,KAAK,CAACW,OAAN,CAAcC,IAAI,IAAI;AACpBA,QAAAA,IAAI,CAACC,SAAL,GAAiB,IAAjB;AACAN,QAAAA,QAAQ,CAACO,IAAT,CAAcF,IAAd;AACD,OAHD;AAIA,6CACKP,KADL;AAEEL,QAAAA,KAAK,EAAEO;AAFT;;AAIF,SAAKT,WAAW,CAACiB,gBAAjB;AACEf,MAAAA,KAAK,CAACW,OAAN,CAAcC,IAAI,IAAI;AACpB,YAAIA,IAAI,CAACC,SAAL,KAAmB,IAAvB,EAA6B;AAC3BN,UAAAA,QAAQ,CAACO,IAAT,CAAcF,IAAd;AACD;AACF,OAJD;AAKA,6CACKP,KADL;AAEEL,QAAAA,KAAK,EAAEO;AAFT;;AAIF;AACE,aAAOF,KAAP;AA1BJ;AA4BD","sourcesContent":["import fakeData from './data';\nimport todoActions from './actions';\n\nconst colors = ['#7ED321', '#de1b1b', '#511E78', '#ff9009', '#42a5f5'];\nconst todos = new fakeData(5, colors.length).getAll();\n\nconst initState = {\n  todos,\n  colors,\n};\n\nexport default function todoReducer(state = initState, action) {\n  const todos = state.todos;\n  const newtodos = [];\n  switch (action.type) {\n    case todoActions.CHANGE_TODO:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case todoActions.ALL_COMPLETED:\n      todos.forEach(todo => {\n        todo.completed = true;\n        newtodos.push(todo);\n      });\n      return {\n        ...state,\n        todos: newtodos,\n      };\n    case todoActions.DELETE_COMPLETED:\n      todos.forEach(todo => {\n        if (todo.completed !== true) {\n          newtodos.push(todo);\n        }\n      });\n      return {\n        ...state,\n        todos: newtodos,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}