{"ast":null,"code":"var _jsxFileName = \"/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/components/Invoice/InvoiceTable.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Input from '../uielements/input';\nimport Button from '../uielements/button';\nimport { stringToPosetiveInt } from '@iso/lib/helpers/utility';\nimport Table from './TableStyle';\nconst viewColumns = [{\n  title: '#',\n  dataIndex: 'key',\n  width: '10%',\n  rowKey: 'key'\n}, {\n  title: 'Item Name',\n  dataIndex: 'itemName',\n  width: '40%',\n  rowKey: 'itemName'\n}, {\n  title: 'Unit Costs',\n  dataIndex: 'costs',\n  width: '15%',\n  rowKey: 'costs'\n}, {\n  title: 'Unit',\n  dataIndex: 'qty',\n  width: '15%',\n  rowKey: 'qty'\n}, {\n  title: 'Price',\n  dataIndex: 'price',\n  width: '20%',\n  rowKey: 'price'\n}];\n\nconst ViewTable = ({\n  invoiceList\n}) => __jsx(Table, {\n  columns: viewColumns,\n  dataSource: invoiceList,\n  pagination: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }\n});\n\nconst EditTable = ({\n  editableInvoice,\n  editInvoice,\n  updateValues\n}) => {\n  const {\n    invoiceList\n  } = editableInvoice;\n  const editColumns = [{\n    title: '#',\n    dataIndex: 'key',\n    rowKey: 'key',\n    width: '10%',\n    render: (text, singleInvoice) => __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 40\n      }\n    }, singleInvoice.key)\n  }, {\n    title: 'Item Name',\n    dataIndex: 'itemName',\n    rowKey: 'itemName',\n    width: '40%',\n    render: (text, singleInvoice) => __jsx(Input, {\n      placeholder: \"Item Name\",\n      value: singleInvoice.itemName,\n      onChange: event => {\n        editableInvoice.invoiceList[singleInvoice.key - 1].itemName = event.target.value;\n        editInvoice(editableInvoice);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    })\n  }, {\n    title: 'Unit Costs',\n    dataIndex: 'costs',\n    rowKey: 'costs',\n    width: '20%',\n    render: (text, singleInvoice) => __jsx(Input, {\n      placeholder: \"Unit Cost\",\n      value: singleInvoice.costs,\n      onChange: event => {\n        editableInvoice.invoiceList[singleInvoice.key - 1].costs = stringToPosetiveInt(event.target.value, singleInvoice.costs);\n        editInvoice(updateValues(editableInvoice));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    })\n  }, {\n    title: 'Unit',\n    dataIndex: 'qty',\n    rowKey: 'qty',\n    width: '10%',\n    render: (text, singleInvoice) => __jsx(Input, {\n      placeholder: \"Units\",\n      value: singleInvoice.qty,\n      onChange: event => {\n        editableInvoice.invoiceList[singleInvoice.key - 1].qty = stringToPosetiveInt(event.target.value, singleInvoice.qty);\n        editInvoice(updateValues(editableInvoice));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    })\n  }, {\n    title: 'Price',\n    dataIndex: 'price',\n    rowKey: 'price',\n    width: '10%'\n  }, {\n    title: '',\n    dataIndex: 'delete',\n    rowKey: 'delete',\n    width: '10%',\n    render: (text, singleInvoice) => invoiceList.length === 1 ? '' : __jsx(Button, {\n      onClick: () => {\n        const newInvoiceList = [];\n        invoiceList.forEach((invoice, i) => {\n          if (i !== singleInvoice.key - 1) {\n            newInvoiceList.push(invoice);\n          }\n        });\n        editableInvoice.invoiceList = newInvoiceList;\n        editInvoice(updateValues(editableInvoice));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, \"Delete\")\n  }];\n  return __jsx(Table, {\n    columns: editColumns,\n    dataSource: invoiceList,\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  });\n};\n\nexport { ViewTable, EditTable };","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/components/Invoice/InvoiceTable.js"],"names":["React","Input","Button","stringToPosetiveInt","Table","viewColumns","title","dataIndex","width","rowKey","ViewTable","invoiceList","EditTable","editableInvoice","editInvoice","updateValues","editColumns","render","text","singleInvoice","key","itemName","event","target","value","costs","qty","length","newInvoiceList","forEach","invoice","i","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Input from '../uielements/input';\nimport Button from '../uielements/button';\nimport { stringToPosetiveInt } from '@iso/lib/helpers/utility';\nimport Table from './TableStyle';\n\nconst viewColumns = [\n  {\n    title: '#',\n    dataIndex: 'key',\n    width: '10%',\n    rowKey: 'key',\n  },\n  {\n    title: 'Item Name',\n    dataIndex: 'itemName',\n    width: '40%',\n    rowKey: 'itemName',\n  },\n  {\n    title: 'Unit Costs',\n    dataIndex: 'costs',\n    width: '15%',\n    rowKey: 'costs',\n  },\n  {\n    title: 'Unit',\n    dataIndex: 'qty',\n    width: '15%',\n    rowKey: 'qty',\n  },\n  {\n    title: 'Price',\n    dataIndex: 'price',\n    width: '20%',\n    rowKey: 'price',\n  },\n];\n\nconst ViewTable = ({ invoiceList }) => (\n  <Table columns={viewColumns} dataSource={invoiceList} pagination={false} />\n);\n\nconst EditTable = ({ editableInvoice, editInvoice, updateValues }) => {\n  const { invoiceList } = editableInvoice;\n  const editColumns = [\n    {\n      title: '#',\n      dataIndex: 'key',\n      rowKey: 'key',\n      width: '10%',\n      render: (text, singleInvoice) => <span>{singleInvoice.key}</span>,\n    },\n    {\n      title: 'Item Name',\n      dataIndex: 'itemName',\n      rowKey: 'itemName',\n      width: '40%',\n      render: (text, singleInvoice) => (\n        <Input\n          placeholder=\"Item Name\"\n          value={singleInvoice.itemName}\n          onChange={event => {\n            editableInvoice.invoiceList[singleInvoice.key - 1].itemName =\n              event.target.value;\n            editInvoice(editableInvoice);\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Unit Costs',\n      dataIndex: 'costs',\n      rowKey: 'costs',\n      width: '20%',\n      render: (text, singleInvoice) => (\n        <Input\n          placeholder=\"Unit Cost\"\n          value={singleInvoice.costs}\n          onChange={event => {\n            editableInvoice.invoiceList[\n              singleInvoice.key - 1\n            ].costs = stringToPosetiveInt(\n              event.target.value,\n              singleInvoice.costs\n            );\n            editInvoice(updateValues(editableInvoice));\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Unit',\n      dataIndex: 'qty',\n      rowKey: 'qty',\n      width: '10%',\n      render: (text, singleInvoice) => (\n        <Input\n          placeholder=\"Units\"\n          value={singleInvoice.qty}\n          onChange={event => {\n            editableInvoice.invoiceList[\n              singleInvoice.key - 1\n            ].qty = stringToPosetiveInt(event.target.value, singleInvoice.qty);\n            editInvoice(updateValues(editableInvoice));\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Price',\n      dataIndex: 'price',\n      rowKey: 'price',\n      width: '10%',\n    },\n    {\n      title: '',\n      dataIndex: 'delete',\n      rowKey: 'delete',\n      width: '10%',\n      render: (text, singleInvoice) =>\n        invoiceList.length === 1 ? (\n          ''\n        ) : (\n          <Button\n            onClick={() => {\n              const newInvoiceList = [];\n              invoiceList.forEach((invoice, i) => {\n                if (i !== singleInvoice.key - 1) {\n                  newInvoiceList.push(invoice);\n                }\n              });\n              editableInvoice.invoiceList = newInvoiceList;\n              editInvoice(updateValues(editableInvoice));\n            }}\n          >\n            Delete\n          </Button>\n        ),\n    },\n  ];\n  return (\n    <Table columns={editColumns} dataSource={invoiceList} pagination={false} />\n  );\n};\nexport { ViewTable, EditTable };\n"]},"metadata":{},"sourceType":"module"}