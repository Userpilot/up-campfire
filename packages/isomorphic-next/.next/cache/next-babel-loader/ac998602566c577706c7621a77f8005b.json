{"ast":null,"code":"const mailActions = {\n  FILTER_ATTRIBUTE: 'FILTER_ATTRIBUTE',\n  SELECTED_MAIL: 'SELECTED_MAIL',\n  COMPOSE_MAIL: 'COMPOSE_MAIL',\n  REPLY_MAIL: 'REPLY_MAIL',\n  SEARCH_STRING: 'SEARCH_STRING',\n  filterAction: newFilterAttr => {\n    return (dispatch, getState) => {\n      const filterAttr = getState().Mails.filterAttr;\n\n      if (newFilterAttr) {\n        if (newFilterAttr.bucket) {\n          filterAttr.bucket = newFilterAttr.bucket;\n          filterAttr.tag = newFilterAttr.tag;\n        } else if (newFilterAttr.tag) {\n          filterAttr.tag = newFilterAttr.tag;\n        }\n      }\n\n      dispatch({\n        type: mailActions.FILTER_ATTRIBUTE,\n        filterAttr\n      });\n    };\n  },\n  selectMail: selectedMail => {\n    return (dispatch, getState) => {\n      const allMails = getState().Mails.allMails;\n      allMails[allMails.findIndex(mail => mail.id === selectedMail)].read = true;\n      dispatch({\n        type: mailActions.SELECTED_MAIL,\n        selectedMail,\n        allMails\n      });\n    };\n  },\n  changeComposeMail: composeMail => ({\n    type: mailActions.COMPOSE_MAIL,\n    composeMail\n  }),\n  changeReplyMail: replyMail => ({\n    type: mailActions.REPLY_MAIL,\n    replyMail\n  }),\n  changeSearchString: searchString => ({\n    type: mailActions.SEARCH_STRING,\n    searchString\n  })\n};\nexport default mailActions;","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/mail/actions.js"],"names":["mailActions","FILTER_ATTRIBUTE","SELECTED_MAIL","COMPOSE_MAIL","REPLY_MAIL","SEARCH_STRING","filterAction","newFilterAttr","dispatch","getState","filterAttr","Mails","bucket","tag","type","selectMail","selectedMail","allMails","findIndex","mail","id","read","changeComposeMail","composeMail","changeReplyMail","replyMail","changeSearchString","searchString"],"mappings":"AAAA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,gBAAgB,EAAE,kBADA;AAElBC,EAAAA,aAAa,EAAE,eAFG;AAGlBC,EAAAA,YAAY,EAAE,cAHI;AAIlBC,EAAAA,UAAU,EAAE,YAJM;AAKlBC,EAAAA,aAAa,EAAE,eALG;AAMlBC,EAAAA,YAAY,EAAEC,aAAa,IAAI;AAC7B,WAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7B,YAAMC,UAAU,GAAGD,QAAQ,GAAGE,KAAX,CAAiBD,UAApC;;AACA,UAAIH,aAAJ,EAAmB;AACjB,YAAIA,aAAa,CAACK,MAAlB,EAA0B;AACxBF,UAAAA,UAAU,CAACE,MAAX,GAAoBL,aAAa,CAACK,MAAlC;AACAF,UAAAA,UAAU,CAACG,GAAX,GAAiBN,aAAa,CAACM,GAA/B;AACD,SAHD,MAGO,IAAIN,aAAa,CAACM,GAAlB,EAAuB;AAC5BH,UAAAA,UAAU,CAACG,GAAX,GAAiBN,aAAa,CAACM,GAA/B;AACD;AACF;;AACDL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEd,WAAW,CAACC,gBADX;AAEPS,QAAAA;AAFO,OAAD,CAAR;AAID,KAdD;AAeD,GAtBiB;AAuBlBK,EAAAA,UAAU,EAAEC,YAAY,IAAI;AAC1B,WAAO,CAACR,QAAD,EAAWC,QAAX,KAAwB;AAC7B,YAAMQ,QAAQ,GAAGR,QAAQ,GAAGE,KAAX,CAAiBM,QAAlC;AACAA,MAAAA,QAAQ,CACNA,QAAQ,CAACC,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,YAAvC,CADM,CAAR,CAEEK,IAFF,GAES,IAFT;AAGAb,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEd,WAAW,CAACE,aADX;AAEPc,QAAAA,YAFO;AAGPC,QAAAA;AAHO,OAAD,CAAR;AAKD,KAVD;AAWD,GAnCiB;AAoClBK,EAAAA,iBAAiB,EAAEC,WAAW,KAAK;AACjCT,IAAAA,IAAI,EAAEd,WAAW,CAACG,YADe;AAEjCoB,IAAAA;AAFiC,GAAL,CApCZ;AAwClBC,EAAAA,eAAe,EAAEC,SAAS,KAAK;AAC7BX,IAAAA,IAAI,EAAEd,WAAW,CAACI,UADW;AAE7BqB,IAAAA;AAF6B,GAAL,CAxCR;AA4ClBC,EAAAA,kBAAkB,EAAEC,YAAY,KAAK;AACnCb,IAAAA,IAAI,EAAEd,WAAW,CAACK,aADiB;AAEnCsB,IAAAA;AAFmC,GAAL;AA5Cd,CAApB;AAiDA,eAAe3B,WAAf","sourcesContent":["const mailActions = {\n  FILTER_ATTRIBUTE: 'FILTER_ATTRIBUTE',\n  SELECTED_MAIL: 'SELECTED_MAIL',\n  COMPOSE_MAIL: 'COMPOSE_MAIL',\n  REPLY_MAIL: 'REPLY_MAIL',\n  SEARCH_STRING: 'SEARCH_STRING',\n  filterAction: newFilterAttr => {\n    return (dispatch, getState) => {\n      const filterAttr = getState().Mails.filterAttr;\n      if (newFilterAttr) {\n        if (newFilterAttr.bucket) {\n          filterAttr.bucket = newFilterAttr.bucket;\n          filterAttr.tag = newFilterAttr.tag;\n        } else if (newFilterAttr.tag) {\n          filterAttr.tag = newFilterAttr.tag;\n        }\n      }\n      dispatch({\n        type: mailActions.FILTER_ATTRIBUTE,\n        filterAttr,\n      });\n    };\n  },\n  selectMail: selectedMail => {\n    return (dispatch, getState) => {\n      const allMails = getState().Mails.allMails;\n      allMails[\n        allMails.findIndex(mail => mail.id === selectedMail)\n      ].read = true;\n      dispatch({\n        type: mailActions.SELECTED_MAIL,\n        selectedMail,\n        allMails,\n      });\n    };\n  },\n  changeComposeMail: composeMail => ({\n    type: mailActions.COMPOSE_MAIL,\n    composeMail,\n  }),\n  changeReplyMail: replyMail => ({\n    type: mailActions.REPLY_MAIL,\n    replyMail,\n  }),\n  changeSearchString: searchString => ({\n    type: mailActions.SEARCH_STRING,\n    searchString,\n  }),\n};\nexport default mailActions;\n"]},"metadata":{},"sourceType":"module"}