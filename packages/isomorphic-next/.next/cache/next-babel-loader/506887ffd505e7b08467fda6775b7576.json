{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadFromFirestore),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(storeIntoFirestore),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(resetFireStoreDocuments),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport omit from 'lodash/omit';\nimport fakeData from './fakeData';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport { convertCollectionsSnapshotToMap, deleteDocuments, addCollectionAndDocuments } from '@iso/lib/firebase/firebase.util';\nvar fakeDataList = new fakeData(5).getAll();\n/**\n * DOC: https://redux-saga-firebase.js.org/reference/dev/firestore\n */\n\nvar COLLECTION_NAME = 'investors'; // change your collection\n\nvar ORDER_BY = 'id';\nvar ORDER = 'desc';\n\nfunction loadFromFirestore() {\n  var collectionRef, snapshots, data;\n  return _regeneratorRuntime.wrap(function loadFromFirestore$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          collectionRef = db.collection(COLLECTION_NAME).where('deleted_at', '==', null).orderBy(ORDER_BY, ORDER);\n          _context.next = 4;\n          return call(rsf.firestore.getCollection, collectionRef);\n\n        case 4:\n          snapshots = _context.sent;\n          _context.next = 7;\n          return call(convertCollectionsSnapshotToMap, snapshots);\n\n        case 7:\n          data = _context.sent;\n          _context.next = 10;\n          return put(actions.loadFromFireStoreSuccess(data));\n\n        case 10:\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 17;\n          return put(actions.loadFromFireStoreError(_context.t0));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction storeIntoFirestore(_ref) {\n  var payload, data, actionName;\n  return _regeneratorRuntime.wrap(function storeIntoFirestore$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n          data = payload.data, actionName = payload.actionName;\n          _context2.prev = 2;\n          _context2.t0 = actionName;\n          _context2.next = _context2.t0 === 'delete' ? 6 : _context2.t0 === 'update' ? 9 : 12;\n          break;\n\n        case 6:\n          _context2.next = 8;\n          return call(rsf.firestore.setDocument, \"\".concat(COLLECTION_NAME, \"/\").concat(data.key), {\n            deleted_at: new Date().getTime()\n          });\n\n        case 8:\n          return _context2.abrupt(\"break\", 15);\n\n        case 9:\n          _context2.next = 11;\n          return call(rsf.firestore.setDocument, \"\".concat(COLLECTION_NAME, \"/\").concat(data.key), _objectSpread({}, omit(data, ['key'])));\n\n        case 11:\n          return _context2.abrupt(\"break\", 15);\n\n        case 12:\n          _context2.next = 14;\n          return call(rsf.firestore.addDocument, COLLECTION_NAME, data);\n\n        case 14:\n          return _context2.abrupt(\"break\", 15);\n\n        case 15:\n          _context2.next = 17;\n          return put({\n            type: actions.LOAD_FROM_FIRESTORE\n          });\n\n        case 17:\n          _context2.next = 24;\n          break;\n\n        case 19:\n          _context2.prev = 19;\n          _context2.t1 = _context2[\"catch\"](2);\n          console.log(_context2.t1);\n          _context2.next = 24;\n          return put(actions.saveIntoFireStoreError(_context2.t1));\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 19]]);\n}\n\nfunction resetFireStoreDocuments() {\n  return _regeneratorRuntime.wrap(function resetFireStoreDocuments$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(deleteDocuments, COLLECTION_NAME);\n\n        case 3:\n          _context3.next = 5;\n          return call(addCollectionAndDocuments, COLLECTION_NAME, fakeDataList);\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: actions.LOAD_FROM_FIRESTORE\n          });\n\n        case 7:\n          _context3.next = 12;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actions.LOAD_FROM_FIRESTORE, loadFromFirestore), takeEvery(actions.SAVE_INTO_FIRESTORE, storeIntoFirestore), takeEvery(actions.RESET_FIRESTORE_DOCUMENTS, resetFireStoreDocuments)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/investors/sagas.js"],"names":["loadFromFirestore","storeIntoFirestore","resetFireStoreDocuments","rootSaga","all","takeEvery","put","call","actions","omit","fakeData","rsf","db","convertCollectionsSnapshotToMap","deleteDocuments","addCollectionAndDocuments","fakeDataList","getAll","COLLECTION_NAME","ORDER_BY","ORDER","collectionRef","collection","where","orderBy","firestore","getCollection","snapshots","data","loadFromFireStoreSuccess","console","log","loadFromFireStoreError","payload","actionName","setDocument","key","deleted_at","Date","getTime","addDocument","type","LOAD_FROM_FIRESTORE","saveIntoFireStoreError","SAVE_INTO_FIRESTORE","RESET_FIRESTORE_DOCUMENTS"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport omit from 'lodash/omit';\nimport fakeData from './fakeData';\n\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport {\n  convertCollectionsSnapshotToMap,\n  deleteDocuments,\n  addCollectionAndDocuments,\n} from '@iso/lib/firebase/firebase.util';\n\nconst fakeDataList = new fakeData(5).getAll();\n\n/**\n * DOC: https://redux-saga-firebase.js.org/reference/dev/firestore\n */\n\nconst COLLECTION_NAME = 'investors'; // change your collection\nconst ORDER_BY = 'id';\nconst ORDER = 'desc';\n\nfunction* loadFromFirestore() {\n  try {\n    const collectionRef = db\n      .collection(COLLECTION_NAME)\n      .where('deleted_at', '==', null)\n      .orderBy(ORDER_BY, ORDER);\n    const snapshots = yield call(rsf.firestore.getCollection, collectionRef);\n    let data = yield call(convertCollectionsSnapshotToMap, snapshots);\n    yield put(actions.loadFromFireStoreSuccess(data));\n  } catch (error) {\n    console.log(error);\n    yield put(actions.loadFromFireStoreError(error));\n  }\n}\n\nfunction* storeIntoFirestore({ payload }) {\n  const { data, actionName } = payload;\n  try {\n    switch (actionName) {\n      case 'delete':\n        yield call(\n          rsf.firestore.setDocument,\n          `${COLLECTION_NAME}/${data.key}`,\n          {\n            deleted_at: new Date().getTime(),\n          }\n        );\n        break;\n      case 'update':\n        yield call(\n          rsf.firestore.setDocument,\n          `${COLLECTION_NAME}/${data.key}`,\n          {\n            ...omit(data, ['key']),\n          }\n        );\n        break;\n      default:\n        yield call(rsf.firestore.addDocument, COLLECTION_NAME, data);\n        break;\n    }\n    yield put({ type: actions.LOAD_FROM_FIRESTORE });\n  } catch (error) {\n    console.log(error);\n    yield put(actions.saveIntoFireStoreError(error));\n  }\n}\n\nfunction* resetFireStoreDocuments() {\n  try {\n    yield call(deleteDocuments, COLLECTION_NAME);\n    yield call(addCollectionAndDocuments, COLLECTION_NAME, fakeDataList);\n\n    yield put({ type: actions.LOAD_FROM_FIRESTORE });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.LOAD_FROM_FIRESTORE, loadFromFirestore),\n    takeEvery(actions.SAVE_INTO_FIRESTORE, storeIntoFirestore),\n    takeEvery(actions.RESET_FIRESTORE_DOCUMENTS, resetFireStoreDocuments),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}