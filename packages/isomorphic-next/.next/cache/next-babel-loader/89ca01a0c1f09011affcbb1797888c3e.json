{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/containers/Chat/ChatRooms.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AddNewUser from './AddNewUser';\nimport Scrollbars from '@iso/components/utility/customScrollBar';\nimport Button from '@iso/components/uielements/button';\nimport HelperText from '@iso/components/utility/helper-text';\nimport chatActions from '@iso/redux/chat/actions';\nimport { timeDifference } from '@iso/lib/helpers/utility';\nimport { UserListsWrapper, UserLists, SidebarSearchBox, Input, ChatSidebar } from './Messages.styles';\nvar setSelectedChatroom = chatActions.setSelectedChatroom,\n    toggleMobileList = chatActions.toggleMobileList,\n    toggleCompose = chatActions.toggleCompose;\n\nfunction filteredChatRooms(chatrooms) {\n  return chatrooms.filter(function (chatroom) {\n    return chatroom.lastMessageTime > 0;\n  });\n}\n\nexport default function ChatRooms() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.Chat;\n  }),\n      users = _useSelector.users,\n      chatRooms = _useSelector.chatRooms,\n      selectedChatRoom = _useSelector.selectedChatRoom;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.App;\n  }),\n      view = _useSelector2.view;\n\n  var _React$useState = React.useState(filteredChatRooms(chatRooms)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentChatRooms = _React$useState2[0],\n      setCurrentChatRooms = _React$useState2[1];\n\n  React.useEffect(function () {\n    setCurrentChatRooms(filteredChatRooms(chatRooms));\n  }, [chatRooms]);\n  var currentChatRoom = view === 'DesktopView' ? selectedChatRoom : {};\n\n  var onSearch = function onSearch(event) {\n    var value = event.target.value;\n    var searchedChatRooms = filteredChatRooms(chatRooms);\n\n    if (value.trim()) {\n      searchedChatRooms = searchedChatRooms.filter(function (chatRoom) {\n        return chatRoom.otherUserInfo.name.toLowerCase().includes(value.toLowerCase());\n      });\n    }\n\n    setCurrentChatRooms(searchedChatRooms);\n  };\n\n  var singleChatRoom = function singleChatRoom(chatRoom, index) {\n    var otherUserInfo = chatRoom.otherUserInfo,\n        lastMessage = chatRoom.lastMessage,\n        lastMessageTime = chatRoom.lastMessageTime;\n    var name = otherUserInfo.name,\n        profileImageUrl = otherUserInfo.profileImageUrl;\n    var selected = currentChatRoom.id === chatRoom.id;\n    var style = {\n      background: selected ? '#f7f7f7' : 'rgba(0,0,0,0)'\n    };\n\n    var selectChatroom = function selectChatroom(event) {\n      event.stopPropagation();\n\n      if (!selected) {\n        dispatch(setSelectedChatroom(chatRoom));\n      }\n\n      if (toggleMobileList) {\n        dispatch(toggleMobileList(false));\n      }\n    };\n\n    return __jsx(UserLists, {\n      key: index,\n      style: style,\n      onClick: selectChatroom,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"userListsGravatar\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, __jsx(\"img\", {\n      alt: \"#\",\n      style: {\n        width: 45,\n        height: 45\n      },\n      src: profileImageUrl,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    })), __jsx(\"div\", {\n      className: \"userListsContent\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, name), __jsx(\"div\", {\n      className: \"chatExcerpt\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, lastMessage), __jsx(\"span\", {\n      className: \"userListsTime\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, timeDifference(lastMessageTime)))));\n  };\n\n  return __jsx(ChatSidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, __jsx(SidebarSearchBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    onChange: onSearch,\n    placeholder: \"Search Contact\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), __jsx(AddNewUser, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })), __jsx(UserListsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, __jsx(Scrollbars, {\n    style: {\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, currentChatRooms.length === 0 ? __jsx(HelperText, {\n    text: \"No Conversation\",\n    className: \"messageHelperText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }) : currentChatRooms.map(singleChatRoom))), users.length > 0 && __jsx(\"div\", {\n    className: \"ComposeMessageButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return dispatch(toggleCompose());\n    },\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Compose\")));\n}\n\n_s(ChatRooms, \"uFPynF1mOKADx4d566Uh73o1gpI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ChatRooms;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRooms\");","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/containers/Chat/ChatRooms.js"],"names":["React","useDispatch","useSelector","AddNewUser","Scrollbars","Button","HelperText","chatActions","timeDifference","UserListsWrapper","UserLists","SidebarSearchBox","Input","ChatSidebar","setSelectedChatroom","toggleMobileList","toggleCompose","filteredChatRooms","chatrooms","filter","chatroom","lastMessageTime","ChatRooms","dispatch","state","Chat","users","chatRooms","selectedChatRoom","App","view","useState","currentChatRooms","setCurrentChatRooms","useEffect","currentChatRoom","onSearch","event","value","target","searchedChatRooms","trim","chatRoom","otherUserInfo","name","toLowerCase","includes","singleChatRoom","index","lastMessage","profileImageUrl","selected","id","style","background","selectChatroom","stopPropagation","width","height","length","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport AddNewUser from './AddNewUser';\nimport Scrollbars from '@iso/components/utility/customScrollBar';\nimport Button from '@iso/components/uielements/button';\nimport HelperText from '@iso/components/utility/helper-text';\nimport chatActions from '@iso/redux/chat/actions';\nimport { timeDifference } from '@iso/lib/helpers/utility';\nimport {\n  UserListsWrapper,\n  UserLists,\n  SidebarSearchBox,\n  Input,\n  ChatSidebar,\n} from './Messages.styles';\nconst { setSelectedChatroom, toggleMobileList, toggleCompose } = chatActions;\nfunction filteredChatRooms(chatrooms) {\n  return chatrooms.filter(chatroom => chatroom.lastMessageTime > 0);\n}\nexport default function ChatRooms() {\n  const dispatch = useDispatch();\n  const { users, chatRooms, selectedChatRoom } = useSelector(\n    state => state.Chat\n  );\n  const { view } = useSelector(state => state.App);\n  const [currentChatRooms, setCurrentChatRooms] = React.useState(\n    filteredChatRooms(chatRooms)\n  );\n  React.useEffect(() => {\n    setCurrentChatRooms(filteredChatRooms(chatRooms));\n  }, [chatRooms]);\n\n  const currentChatRoom = view === 'DesktopView' ? selectedChatRoom : {};\n\n  const onSearch = event => {\n    const value = event.target.value;\n\n    let searchedChatRooms = filteredChatRooms(chatRooms);\n    if (value.trim()) {\n      searchedChatRooms = searchedChatRooms.filter(chatRoom =>\n        chatRoom.otherUserInfo.name.toLowerCase().includes(value.toLowerCase())\n      );\n    }\n    setCurrentChatRooms(searchedChatRooms);\n  };\n  const singleChatRoom = (chatRoom, index) => {\n    const { otherUserInfo, lastMessage, lastMessageTime } = chatRoom;\n    const { name, profileImageUrl } = otherUserInfo;\n    const selected = currentChatRoom.id === chatRoom.id;\n    const style = {\n      background: selected ? '#f7f7f7' : 'rgba(0,0,0,0)',\n    };\n    const selectChatroom = event => {\n      event.stopPropagation();\n\n      if (!selected) {\n        dispatch(setSelectedChatroom(chatRoom));\n      }\n      if (toggleMobileList) {\n        dispatch(toggleMobileList(false));\n      }\n    };\n    return (\n      <UserLists key={index} style={style} onClick={selectChatroom}>\n        <div className=\"userListsGravatar\">\n          <img\n            alt=\"#\"\n            style={{ width: 45, height: 45 }}\n            src={profileImageUrl}\n          />\n        </div>\n        <div className=\"userListsContent\">\n          <h4>{name}</h4>\n          <div className=\"chatExcerpt\">\n            <p>{lastMessage}</p>\n            <span className=\"userListsTime\">\n              {timeDifference(lastMessageTime)}\n            </span>\n          </div>\n        </div>\n      </UserLists>\n    );\n  };\n  return (\n    <ChatSidebar>\n      <SidebarSearchBox>\n        <Input onChange={onSearch} placeholder=\"Search Contact\" />\n        <AddNewUser />\n      </SidebarSearchBox>\n      <UserListsWrapper>\n        <Scrollbars style={{ height: '100%' }}>\n          {currentChatRooms.length === 0 ? (\n            <HelperText text=\"No Conversation\" className=\"messageHelperText\" />\n          ) : (\n            currentChatRooms.map(singleChatRoom)\n          )}\n        </Scrollbars>\n      </UserListsWrapper>\n\n      {users.length > 0 && (\n        <div className=\"ComposeMessageButton\">\n          <Button onClick={() => dispatch(toggleCompose())} type=\"primary\">\n            Compose\n          </Button>\n        </div>\n      )}\n    </ChatSidebar>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}