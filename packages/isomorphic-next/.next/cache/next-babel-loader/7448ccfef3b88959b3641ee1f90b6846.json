{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/containers/Tables/AntTables/TableViews/EditView.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport clone from 'clone';\nimport TableWrapper from '../AntTables.styles';\nimport { EditableCell, DeleteCell } from '@iso/components/Tables/HelperCells';\nexport default function (props) {\n  var _React$useState = React.useState({\n    columns: createcolumns(clone(props.tableInfo.columns)),\n    dataList: props.dataList.getAll()\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var columns = state.columns,\n      dataList = state.dataList;\n\n  function createcolumns(columns) {\n    var _this = this;\n\n    var editColumnRender = function editColumnRender(text, record, index) {\n      return __jsx(EditableCell, {\n        index: index,\n        columnsKey: columns[1].key,\n        value: text[columns[1].key],\n        onChange: onCellChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 7\n        }\n      });\n    };\n\n    columns[1].render = editColumnRender;\n    var deleteColumn = {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: function render(text, record, index) {\n        return __jsx(DeleteCell, {\n          index: index,\n          onDeleteCell: onDeleteCell,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 9\n          }\n        });\n      }\n    };\n    columns.push(deleteColumn);\n    return columns;\n  }\n\n  function onCellChange(value, columnsKey, index) {\n    dataList[index][columnsKey] = value;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      dataList: dataList\n    }));\n  }\n\n  function onDeleteCell(index) {\n    dataList.splice(index, 1);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      dataList: dataList\n    }));\n  }\n\n  return __jsx(TableWrapper, {\n    columns: columns,\n    dataSource: dataList,\n    pagination: {\n      pageSize: 5\n    },\n    className: \"isoEditableTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/containers/Tables/AntTables/TableViews/EditView.js"],"names":["React","clone","TableWrapper","EditableCell","DeleteCell","props","useState","columns","createcolumns","tableInfo","dataList","getAll","state","setState","editColumnRender","text","record","index","key","onCellChange","render","deleteColumn","title","dataIndex","onDeleteCell","push","value","columnsKey","splice","pageSize"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,oCAAzC;AAEA,eAAe,UAASC,KAAT,EAAgB;AAAA,wBACHL,KAAK,CAACM,QAAN,CAAe;AACvCC,IAAAA,OAAO,EAAEC,aAAa,CAACP,KAAK,CAACI,KAAK,CAACI,SAAN,CAAgBF,OAAjB,CAAN,CADiB;AAEvCG,IAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAN,CAAeC,MAAf;AAF6B,GAAf,CADG;AAAA;AAAA,MACtBC,KADsB;AAAA,MACfC,QADe;;AAAA,MAKrBN,OALqB,GAKCK,KALD,CAKrBL,OALqB;AAAA,MAKZG,QALY,GAKCE,KALD,CAKZF,QALY;;AAO7B,WAASF,aAAT,CAAuBD,OAAvB,EAAgC;AAAA;;AAC9B,QAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf;AAAA,aACvB,MAAC,YAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,UAAU,EAAEV,OAAO,CAAC,CAAD,CAAP,CAAWW,GAFzB;AAGE,QAAA,KAAK,EAAEH,IAAI,CAACR,OAAO,CAAC,CAAD,CAAP,CAAWW,GAAZ,CAHb;AAIE,QAAA,QAAQ,EAAEC,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADuB;AAAA,KAAzB;;AAQAZ,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWa,MAAX,GAAoBN,gBAApB;AACA,QAAMO,YAAY,GAAG;AACnBC,MAAAA,KAAK,EAAE,WADY;AAEnBC,MAAAA,SAAS,EAAE,WAFQ;AAGnBH,MAAAA,MAAM,EAAE,gBAACL,IAAD,EAAOC,MAAP,EAAeC,KAAf;AAAA,eACN,MAAC,UAAD;AAAY,UAAA,KAAK,EAAEA,KAAnB;AAA0B,UAAA,YAAY,EAAEO,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADM;AAAA;AAHW,KAArB;AAOAjB,IAAAA,OAAO,CAACkB,IAAR,CAAaJ,YAAb;AACA,WAAOd,OAAP;AACD;;AACD,WAASY,YAAT,CAAsBO,KAAtB,EAA6BC,UAA7B,EAAyCV,KAAzC,EAAgD;AAC9CP,IAAAA,QAAQ,CAACO,KAAD,CAAR,CAAgBU,UAAhB,IAA8BD,KAA9B;AACAb,IAAAA,QAAQ,iCAAMD,KAAN;AAAaF,MAAAA,QAAQ,EAARA;AAAb,OAAR;AACD;;AACD,WAASc,YAAT,CAAsBP,KAAtB,EAA6B;AAC3BP,IAAAA,QAAQ,CAACkB,MAAT,CAAgBX,KAAhB,EAAuB,CAAvB;AACAJ,IAAAA,QAAQ,iCAAMD,KAAN;AAAaF,MAAAA,QAAQ,EAARA;AAAb,OAAR;AACD;;AAED,SACE,MAAC,YAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,UAAU,EAAEG,QAFd;AAGE,IAAA,UAAU,EAAE;AAAEmB,MAAAA,QAAQ,EAAE;AAAZ,KAHd;AAIE,IAAA,SAAS,EAAC,kBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD","sourcesContent":["import React from 'react';\nimport clone from 'clone';\nimport TableWrapper from '../AntTables.styles';\nimport { EditableCell, DeleteCell } from '@iso/components/Tables/HelperCells';\n\nexport default function(props) {\n  const [state, setState] = React.useState({\n    columns: createcolumns(clone(props.tableInfo.columns)),\n    dataList: props.dataList.getAll(),\n  });\n  const { columns, dataList } = state;\n\n  function createcolumns(columns) {\n    const editColumnRender = (text, record, index) => (\n      <EditableCell\n        index={index}\n        columnsKey={columns[1].key}\n        value={text[columns[1].key]}\n        onChange={onCellChange}\n      />\n    );\n    columns[1].render = editColumnRender;\n    const deleteColumn = {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => (\n        <DeleteCell index={index} onDeleteCell={onDeleteCell} />\n      ),\n    };\n    columns.push(deleteColumn);\n    return columns;\n  }\n  function onCellChange(value, columnsKey, index) {\n    dataList[index][columnsKey] = value;\n    setState({ ...state, dataList });\n  }\n  function onDeleteCell(index) {\n    dataList.splice(index, 1);\n    setState({ ...state, dataList });\n  }\n\n  return (\n    <TableWrapper\n      columns={columns}\n      dataSource={dataList}\n      pagination={{ pageSize: 5 }}\n      className=\"isoEditableTable\"\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}