{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwtConfig from '@iso/config/jwt.config';\nimport jwtDecode from 'jwt-decode';\n\nclass JwtAuth {\n  constructor() {\n    _defineProperty(this, \"login\", async userInfo => {\n      if (!userInfo.username || !userInfo.password) {\n        return {\n          error: 'please fill in the input'\n        };\n      }\n\n      return await fetch(jwtConfig.fetchUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInfo)\n      }).then(response => response.json()).then(res => {\n        const result = {};\n\n        if (res.token) {\n          result.profile = jwtDecode(res.token);\n          result.token = res.token;\n          return result;\n        } else {\n          return res;\n        }\n      }).catch(error => ({\n        error\n      }));\n    });\n  }\n\n}\n\nexport default new JwtAuth();","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/packages/isomorphic-next/authentication/jwtAuthentication.js"],"names":["jwtConfig","jwtDecode","JwtAuth","userInfo","username","password","error","fetch","fetchUrl","method","headers","Accept","body","JSON","stringify","then","response","json","res","result","token","profile","catch"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,OAAN,CAAc;AAAA;AAAA,mCACJ,MAAMC,QAAN,IAAkB;AACxB,UAAI,CAACA,QAAQ,CAACC,QAAV,IAAsB,CAACD,QAAQ,CAACE,QAApC,EAA8C;AAC5C,eAAO;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAP;AACD;;AACD,aAAO,MAAMC,KAAK,CAACP,SAAS,CAACQ,QAAX,EAAqB;AACrCC,QAAAA,MAAM,EAAE,MAD6B;AAErCC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SAF4B;AAMrCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,QAAf;AAN+B,OAArB,CAAL,CAQVY,IARU,CAQLC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARP,EASVF,IATU,CASLG,GAAG,IAAI;AACX,cAAMC,MAAM,GAAG,EAAf;;AACA,YAAID,GAAG,CAACE,KAAR,EAAe;AACbD,UAAAA,MAAM,CAACE,OAAP,GAAiBpB,SAAS,CAACiB,GAAG,CAACE,KAAL,CAA1B;AACAD,UAAAA,MAAM,CAACC,KAAP,GAAeF,GAAG,CAACE,KAAnB;AACA,iBAAOD,MAAP;AACD,SAJD,MAIO;AACL,iBAAOD,GAAP;AACD;AACF,OAlBU,EAmBVI,KAnBU,CAmBJhB,KAAK,KAAK;AAAEA,QAAAA;AAAF,OAAL,CAnBD,CAAb;AAoBD,KAzBW;AAAA;;AAAA;;AA2Bd,eAAe,IAAIJ,OAAJ,EAAf","sourcesContent":["import jwtConfig from '@iso/config/jwt.config';\nimport jwtDecode from 'jwt-decode';\n\nclass JwtAuth {\n  login = async userInfo => {\n    if (!userInfo.username || !userInfo.password) {\n      return { error: 'please fill in the input' };\n    }\n    return await fetch(jwtConfig.fetchUrl, {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userInfo),\n    })\n      .then(response => response.json())\n      .then(res => {\n        const result = {};\n        if (res.token) {\n          result.profile = jwtDecode(res.token);\n          result.token = res.token;\n          return result;\n        } else {\n          return res;\n        }\n      })\n      .catch(error => ({ error }));\n  };\n}\nexport default new JwtAuth();\n"]},"metadata":{},"sourceType":"module"}