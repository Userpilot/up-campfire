{"ast":null,"code":"import { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport { login, logout, removeCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nconst ApiUrl = '/api/login';\n\nfunction* loginRequest({\n  payload: {\n    user\n  }\n}) {\n  try {\n    const response = yield fetch(ApiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n\n    if (response.status === 200) {\n      const {\n        token\n      } = yield response.json();\n      yield call(login, {\n        token\n      });\n      yield put(actions.loginRequestSuccess(token));\n    } else {\n      let error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    yield put(actions.loginRequestFailure(error));\n  }\n}\n\nexport function* jwtLoginRequest() {// yield takeLatest(actions.JWT_LOGIN_REQUEST, function*({ payload }) {\n  //   const result = yield call(JwtAuthentication.login, payload.userInfo);\n  //   if (result.error) {\n  //     notification('error', result.error);\n  //     yield put(actions.loginRequestFailure(error));\n  //   } else {\n  //     payload.history.push('/dashboard');\n  //     yield put({\n  //       type: actions.LOGIN_REQUEST_SUCCESS,\n  //       token: result.token,\n  //       profile: result.profile,\n  //     });\n  //   }\n  // });\n}\n\nfunction* logoutRequest() {\n  try {\n    yield call(logout);\n    yield put(actions.logoutRequestSuccess());\n  } catch (error) {\n    yield put(actions.logoutRequestFailure(error));\n  }\n} // export function* loginSuccess() {\n//   yield takeLatest(actions.LOGIN_SUCCESS, function*(payload) {\n//     setCookie('login_saga', payload.token);\n//     yield setCookie('id_token', payload.token);\n//   });\n// }\n// export function* loginError() {\n//   yield takeLatest(actions.LOGIN_ERROR, function*() {});\n// }\n\n\nexport function* onLogin() {\n  yield takeLatest(actions.LOGIN_REQUEST_START, loginRequest);\n}\nexport function* onLogout() {\n  yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\nexport default function* rootSaga() {\n  yield all([call(onLogin), call(jwtLoginRequest), call(onLogout)]);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/packages/isomorphic-next/authentication/sagas.js"],"names":["all","takeLatest","put","call","fork","fetch","login","logout","removeCookie","notification","JwtAuthentication","actions","ApiUrl","loginRequest","payload","user","response","method","headers","body","JSON","stringify","status","token","json","loginRequestSuccess","error","Error","statusText","loginRequestFailure","jwtLoginRequest","logoutRequest","logoutRequestSuccess","logoutRequestFailure","onLogin","LOGIN_REQUEST_START","onLogout","LOGOUT_REQUEST_START","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,YAAxB,QAA4C,cAA5C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,MAAM,GAAG,YAAf;;AAEA,UAAUC,YAAV,CAAuB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAvB,EAA8C;AAC5C,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACO,MAAD,EAAS;AACnCK,MAAAA,MAAM,EAAE,MAD2B;AAGnCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAH0B;AAInCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,QAAAA;AAAF,OAAf;AAJ6B,KAAT,CAA5B;;AAMA,QAAIC,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM;AAAEC,QAAAA;AAAF,UAAY,MAAMP,QAAQ,CAACQ,IAAT,EAAxB;AACA,YAAMrB,IAAI,CAACG,KAAD,EAAQ;AAAEiB,QAAAA;AAAF,OAAR,CAAV;AACA,YAAMrB,GAAG,CAACS,OAAO,CAACc,mBAAR,CAA4BF,KAA5B,CAAD,CAAT;AACD,KAJD,MAIO;AACL,UAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAUX,QAAQ,CAACY,UAAnB,CAAZ;AACAF,MAAAA,KAAK,CAACV,QAAN,GAAiBA,QAAjB;AACA,YAAMU,KAAN;AACD;AACF,GAhBD,CAgBE,OAAOA,KAAP,EAAc;AACd,UAAMxB,GAAG,CAACS,OAAO,CAACkB,mBAAR,CAA4BH,KAA5B,CAAD,CAAT;AACD;AACF;;AAED,OAAO,UAAUI,eAAV,GAA4B,CACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,UAAUC,aAAV,GAA0B;AACxB,MAAI;AACF,UAAM5B,IAAI,CAACI,MAAD,CAAV;AACA,UAAML,GAAG,CAACS,OAAO,CAACqB,oBAAR,EAAD,CAAT;AACD,GAHD,CAGE,OAAON,KAAP,EAAc;AACd,UAAMxB,GAAG,CAACS,OAAO,CAACsB,oBAAR,CAA6BP,KAA7B,CAAD,CAAT;AACD;AACF,C,CACD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,OAAO,UAAUQ,OAAV,GAAoB;AACzB,QAAMjC,UAAU,CAACU,OAAO,CAACwB,mBAAT,EAA8BtB,YAA9B,CAAhB;AACD;AACD,OAAO,UAAUuB,QAAV,GAAqB;AAC1B,QAAMnC,UAAU,CAACU,OAAO,CAAC0B,oBAAT,EAA+BN,aAA/B,CAAhB;AACD;AACD,eAAe,UAAUO,QAAV,GAAqB;AAClC,QAAMtC,GAAG,CAAC,CAACG,IAAI,CAAC+B,OAAD,CAAL,EAAgB/B,IAAI,CAAC2B,eAAD,CAApB,EAAuC3B,IAAI,CAACiC,QAAD,CAA3C,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\n\nimport { login, logout, removeCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\n\nconst ApiUrl = '/api/login';\n\nfunction* loginRequest({ payload: { user } }) {\n  try {\n    const response = yield fetch(ApiUrl, {\n      method: 'POST',\n\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ user }),\n    });\n    if (response.status === 200) {\n      const { token } = yield response.json();\n      yield call(login, { token });\n      yield put(actions.loginRequestSuccess(token));\n    } else {\n      let error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    yield put(actions.loginRequestFailure(error));\n  }\n}\n\nexport function* jwtLoginRequest() {\n  // yield takeLatest(actions.JWT_LOGIN_REQUEST, function*({ payload }) {\n  //   const result = yield call(JwtAuthentication.login, payload.userInfo);\n  //   if (result.error) {\n  //     notification('error', result.error);\n  //     yield put(actions.loginRequestFailure(error));\n  //   } else {\n  //     payload.history.push('/dashboard');\n  //     yield put({\n  //       type: actions.LOGIN_REQUEST_SUCCESS,\n  //       token: result.token,\n  //       profile: result.profile,\n  //     });\n  //   }\n  // });\n}\n\nfunction* logoutRequest() {\n  try {\n    yield call(logout);\n    yield put(actions.logoutRequestSuccess());\n  } catch (error) {\n    yield put(actions.logoutRequestFailure(error));\n  }\n}\n// export function* loginSuccess() {\n//   yield takeLatest(actions.LOGIN_SUCCESS, function*(payload) {\n//     setCookie('login_saga', payload.token);\n//     yield setCookie('id_token', payload.token);\n//   });\n// }\n\n// export function* loginError() {\n//   yield takeLatest(actions.LOGIN_ERROR, function*() {});\n// }\n\nexport function* onLogin() {\n  yield takeLatest(actions.LOGIN_REQUEST_START, loginRequest);\n}\nexport function* onLogout() {\n  yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\nexport default function* rootSaga() {\n  yield all([call(onLogin), call(jwtLoginRequest), call(onLogout)]);\n}\n"]},"metadata":{},"sourceType":"module"}