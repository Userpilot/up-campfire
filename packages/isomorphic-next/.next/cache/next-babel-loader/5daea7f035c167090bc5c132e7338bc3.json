{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nexport default (async (req, res) => {\n  const {\n    user\n  } = await req.body;\n  console.log('username', user); // const url = `https://api.github.com/users/${username}`;\n\n  try {\n    // const response = await fetch(url);\n    // if (response.ok) {\n    // const { id } = await response.json();\n    // return res.status(200).json({ token: id });\n    return res.status(200).json({\n      token: true\n    }); // } else {\n    // const error = new Error(response.statusText);\n    // error.response = response;\n    // throw error;\n    // }\n  } catch (error) {\n    const {\n      response\n    } = error;\n    return response ? res.status(response.status).json({\n      message: response.statusText\n    }) : res.status(400).json({\n      message: error.message\n    });\n  }\n});","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/packages/isomorphic-next/pages/api/login.js"],"names":["fetch","req","res","user","body","console","log","status","json","token","error","response","message","statusText"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMF,GAAG,CAACG,IAA3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,IAAxB,EAFiC,CAGjC;;AAEA,MAAI;AACF;AAEA;AACA;AACA;AACA,WAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP,CANE,CAOF;AACA;AACA;AACA;AACA;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACd,UAAM;AAAEC,MAAAA;AAAF,QAAeD,KAArB;AACA,WAAOC,QAAQ,GACXT,GAAG,CAACK,MAAJ,CAAWI,QAAQ,CAACJ,MAApB,EAA4BC,IAA5B,CAAiC;AAAEI,MAAAA,OAAO,EAAED,QAAQ,CAACE;AAApB,KAAjC,CADW,GAEXX,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,MAAAA,OAAO,EAAEF,KAAK,CAACE;AAAjB,KAArB,CAFJ;AAGD;AACF,CAvBD","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nexport default async (req, res) => {\n  const { user } = await req.body;\n  console.log('username', user);\n  // const url = `https://api.github.com/users/${username}`;\n\n  try {\n    // const response = await fetch(url);\n\n    // if (response.ok) {\n    // const { id } = await response.json();\n    // return res.status(200).json({ token: id });\n    return res.status(200).json({ token: true });\n    // } else {\n    // const error = new Error(response.statusText);\n    // error.response = response;\n    // throw error;\n    // }\n  } catch (error) {\n    const { response } = error;\n    return response\n      ? res.status(response.status).json({ message: response.statusText })\n      : res.status(400).json({ message: error.message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}