{"ast":null,"code":"import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport youtubeSearchApi from '@iso/config/youtube_search.config';\nexport const per_page = 10;\nconst maxResults = 10;\nconst youtubeSearchURL = `https://www.googleapis.com/youtube/v3/search?maxResults=${maxResults}&type=video&key=${youtubeSearchApi}&part=snippet`;\n\nconst onSearchReqeust = async (searcText, pageToken) => await fetch(`${youtubeSearchURL}&q=${encodeURIComponent(searcText)}${pageToken}`).then(res => res.json()).then(res => res).catch(error => error);\n\nfunction* searchRequest({\n  payload\n}) {\n  const {\n    searcText,\n    pageToken\n  } = payload;\n\n  try {\n    const searchResult = yield call(onSearchReqeust, searcText, pageToken ? `&pageToken=${pageToken}` : '');\n\n    if (searchResult.items) {\n      yield put(actions.youtubeSearchSuccess(searchResult.items, searchResult.pageInfo.totalResults, searchResult.nextPageToken, searchResult.prevPageToken));\n    } else {\n      yield put(actions.youtubeSearchSuccess());\n    }\n  } catch (error) {\n    yield put(actions.youtubeSearchSuccess());\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.YOUTUBE_SEARCH, searchRequest)]);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/youtubeSearch/sagas.js"],"names":["all","takeEvery","put","call","actions","youtubeSearchApi","per_page","maxResults","youtubeSearchURL","onSearchReqeust","searcText","pageToken","fetch","encodeURIComponent","then","res","json","catch","error","searchRequest","payload","searchResult","items","youtubeSearchSuccess","pageInfo","totalResults","nextPageToken","prevPageToken","rootSaga","YOUTUBE_SEARCH"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAO,MAAMC,QAAQ,GAAG,EAAjB;AACP,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,gBAAgB,GAAI,2DAA0DD,UAAW,mBAAkBF,gBAAiB,eAAlI;;AAEA,MAAMI,eAAe,GAAG,OAAOC,SAAP,EAAkBC,SAAlB,KACtB,MAAMC,KAAK,CACR,GAAEJ,gBAAiB,MAAKK,kBAAkB,CAACH,SAAD,CAAY,GAAEC,SAAU,EAD1D,CAAL,CAGHG,IAHG,CAGEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHT,EAIHF,IAJG,CAIEC,GAAG,IAAIA,GAJT,EAKHE,KALG,CAKGC,KAAK,IAAIA,KALZ,CADR;;AAQA,UAAUC,aAAV,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqC;AACnC,QAAM;AAAEV,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA2BS,OAAjC;;AACA,MAAI;AACF,UAAMC,YAAY,GAAG,MAAMlB,IAAI,CAC7BM,eAD6B,EAE7BC,SAF6B,EAG7BC,SAAS,GAAI,cAAaA,SAAU,EAA3B,GAA+B,EAHX,CAA/B;;AAKA,QAAIU,YAAY,CAACC,KAAjB,EAAwB;AACtB,YAAMpB,GAAG,CACPE,OAAO,CAACmB,oBAAR,CACEF,YAAY,CAACC,KADf,EAEED,YAAY,CAACG,QAAb,CAAsBC,YAFxB,EAGEJ,YAAY,CAACK,aAHf,EAIEL,YAAY,CAACM,aAJf,CADO,CAAT;AAQD,KATD,MASO;AACL,YAAMzB,GAAG,CAACE,OAAO,CAACmB,oBAAR,EAAD,CAAT;AACD;AACF,GAlBD,CAkBE,OAAOL,KAAP,EAAc;AACd,UAAMhB,GAAG,CAACE,OAAO,CAACmB,oBAAR,EAAD,CAAT;AACD;AACF;;AACD,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CAACC,SAAS,CAACG,OAAO,CAACyB,cAAT,EAAyBV,aAAzB,CAAV,CAAD,CAAT;AACD","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport youtubeSearchApi from '@iso/config/youtube_search.config';\nexport const per_page = 10;\nconst maxResults = 10;\nconst youtubeSearchURL = `https://www.googleapis.com/youtube/v3/search?maxResults=${maxResults}&type=video&key=${youtubeSearchApi}&part=snippet`;\n\nconst onSearchReqeust = async (searcText, pageToken) =>\n  await fetch(\n    `${youtubeSearchURL}&q=${encodeURIComponent(searcText)}${pageToken}`\n  )\n    .then(res => res.json())\n    .then(res => res)\n    .catch(error => error);\n\nfunction* searchRequest({ payload }) {\n  const { searcText, pageToken } = payload;\n  try {\n    const searchResult = yield call(\n      onSearchReqeust,\n      searcText,\n      pageToken ? `&pageToken=${pageToken}` : ''\n    );\n    if (searchResult.items) {\n      yield put(\n        actions.youtubeSearchSuccess(\n          searchResult.items,\n          searchResult.pageInfo.totalResults,\n          searchResult.nextPageToken,\n          searchResult.prevPageToken\n        )\n      );\n    } else {\n      yield put(actions.youtubeSearchSuccess());\n    }\n  } catch (error) {\n    yield put(actions.youtubeSearchSuccess());\n  }\n}\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.YOUTUBE_SEARCH, searchRequest)]);\n}\n"]},"metadata":{},"sourceType":"module"}