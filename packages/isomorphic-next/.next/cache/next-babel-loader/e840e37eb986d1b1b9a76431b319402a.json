{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport clone from 'clone';\nimport { newInvoice } from './config';\nimport actions from './actions';\nvar initState = {\n  invoices: [],\n  initialInvoices: false,\n  currentInvoice: {},\n  editableInvoice: {},\n  isNewInvoice: false,\n  enableEditView: false\n};\nexport default function cardReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined;\n\n  var type = _ref.type,\n      action = _objectWithoutProperties(_ref, [\"type\"]);\n\n  switch (type) {\n    case actions.UPDATE_INVOICE:\n      {\n        var currentInvoice = action.invoice ? action.invoice : state.currentInvoice;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          invoices: action.invoices,\n          currentInvoice: clone(currentInvoice),\n          initialInvoices: true,\n          isNewInvoice: false,\n          enableEditView: false\n        });\n      }\n\n    case actions.SELECT_CURRENT_INVOICE:\n      {\n        var invoices = state.invoices;\n        var index = invoices.map(function (invoice) {\n          return invoice.id;\n        }).indexOf(action.id);\n        var isNewInvoice = index === -1;\n\n        var _currentInvoice = isNewInvoice ? _objectSpread({\n          id: action.id,\n          number: \"#\".concat(action.id),\n          key: action.id\n        }, newInvoice) : invoices[index];\n\n        var enableEditView = isNewInvoice;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          currentInvoice: _currentInvoice,\n          isNewInvoice: isNewInvoice,\n          enableEditView: enableEditView,\n          editableInvoice: clone(_currentInvoice)\n        });\n      }\n\n    case actions.TOGGLE_VIEW:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        enableEditView: action.view,\n        editableInvoice: clone(state.currentInvoice)\n      });\n\n    case actions.UPDATE_EDIT_INVOICE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        editableInvoice: clone(action.invoice)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/invoice/reducer.js"],"names":["clone","newInvoice","actions","initState","invoices","initialInvoices","currentInvoice","editableInvoice","isNewInvoice","enableEditView","cardReducer","state","type","action","UPDATE_INVOICE","invoice","SELECT_CURRENT_INVOICE","index","map","id","indexOf","number","key","TOGGLE_VIEW","view","UPDATE_EDIT_INVOICE"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,EADM;AAEhBC,EAAAA,eAAe,EAAE,KAFD;AAGhBC,EAAAA,cAAc,EAAE,EAHA;AAIhBC,EAAAA,eAAe,EAAE,EAJD;AAKhBC,EAAAA,YAAY,EAAE,KALE;AAMhBC,EAAAA,cAAc,EAAE;AANA,CAAlB;AASA,eAAe,SAASC,WAAT,GAA6D;AAAA,MAAxCC,KAAwC,uEAAhCR,SAAgC;;AAAA;;AAAA,MAAnBS,IAAmB,QAAnBA,IAAmB;AAAA,MAAVC,MAAU;;AAC1E,UAAQD,IAAR;AACE,SAAKV,OAAO,CAACY,cAAb;AAA6B;AAC3B,YAAMR,cAAc,GAAGO,MAAM,CAACE,OAAP,GACnBF,MAAM,CAACE,OADY,GAEnBJ,KAAK,CAACL,cAFV;AAGA,+CACKK,KADL;AAEEP,UAAAA,QAAQ,EAAES,MAAM,CAACT,QAFnB;AAGEE,UAAAA,cAAc,EAAEN,KAAK,CAACM,cAAD,CAHvB;AAIED,UAAAA,eAAe,EAAE,IAJnB;AAKEG,UAAAA,YAAY,EAAE,KALhB;AAMEC,UAAAA,cAAc,EAAE;AANlB;AAQD;;AACD,SAAKP,OAAO,CAACc,sBAAb;AAAqC;AACnC,YAAMZ,QAAQ,GAAGO,KAAK,CAACP,QAAvB;AACA,YAAMa,KAAK,GAAGb,QAAQ,CAACc,GAAT,CAAa,UAAAH,OAAO;AAAA,iBAAIA,OAAO,CAACI,EAAZ;AAAA,SAApB,EAAoCC,OAApC,CAA4CP,MAAM,CAACM,EAAnD,CAAd;AACA,YAAMX,YAAY,GAAGS,KAAK,KAAK,CAAC,CAAhC;;AACA,YAAMX,eAAc,GAAGE,YAAY;AAE7BW,UAAAA,EAAE,EAAEN,MAAM,CAACM,EAFkB;AAG7BE,UAAAA,MAAM,aAAMR,MAAM,CAACM,EAAb,CAHuB;AAI7BG,UAAAA,GAAG,EAAET,MAAM,CAACM;AAJiB,WAK1BlB,UAL0B,IAO/BG,QAAQ,CAACa,KAAD,CAPZ;;AAQA,YAAMR,cAAc,GAAGD,YAAvB;AACA,+CACKG,KADL;AAEEL,UAAAA,cAAc,EAAdA,eAFF;AAGEE,UAAAA,YAAY,EAAZA,YAHF;AAIEC,UAAAA,cAAc,EAAdA,cAJF;AAKEF,UAAAA,eAAe,EAAEP,KAAK,CAACM,eAAD;AALxB;AAOD;;AACD,SAAKJ,OAAO,CAACqB,WAAb;AACE,6CACKZ,KADL;AAEEF,QAAAA,cAAc,EAAEI,MAAM,CAACW,IAFzB;AAGEjB,QAAAA,eAAe,EAAEP,KAAK,CAACW,KAAK,CAACL,cAAP;AAHxB;;AAKF,SAAKJ,OAAO,CAACuB,mBAAb;AACE,6CACKd,KADL;AAEEJ,QAAAA,eAAe,EAAEP,KAAK,CAACa,MAAM,CAACE,OAAR;AAFxB;;AAIF;AACE,aAAOJ,KAAP;AA/CJ;AAiDD","sourcesContent":["import clone from 'clone';\nimport { newInvoice } from './config';\nimport actions from './actions';\n\nconst initState = {\n  invoices: [],\n  initialInvoices: false,\n  currentInvoice: {},\n  editableInvoice: {},\n  isNewInvoice: false,\n  enableEditView: false,\n};\n\nexport default function cardReducer(state = initState, { type, ...action }) {\n  switch (type) {\n    case actions.UPDATE_INVOICE: {\n      const currentInvoice = action.invoice\n        ? action.invoice\n        : state.currentInvoice;\n      return {\n        ...state,\n        invoices: action.invoices,\n        currentInvoice: clone(currentInvoice),\n        initialInvoices: true,\n        isNewInvoice: false,\n        enableEditView: false,\n      };\n    }\n    case actions.SELECT_CURRENT_INVOICE: {\n      const invoices = state.invoices;\n      const index = invoices.map(invoice => invoice.id).indexOf(action.id);\n      const isNewInvoice = index === -1;\n      const currentInvoice = isNewInvoice\n        ? {\n            id: action.id,\n            number: `#${action.id}`,\n            key: action.id,\n            ...newInvoice,\n          }\n        : invoices[index];\n      const enableEditView = isNewInvoice;\n      return {\n        ...state,\n        currentInvoice,\n        isNewInvoice,\n        enableEditView,\n        editableInvoice: clone(currentInvoice),\n      };\n    }\n    case actions.TOGGLE_VIEW:\n      return {\n        ...state,\n        enableEditView: action.view,\n        editableInvoice: clone(state.currentInvoice),\n      };\n    case actions.UPDATE_EDIT_INVOICE:\n      return {\n        ...state,\n        editableInvoice: clone(action.invoice),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}