{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar tableData = JSON.parse(\"[{\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"deleted_at\\\": null,\\n  \\\"exists_count\\\": \\\"70\\\",\\n  \\\"investment_count\\\": \\\"100\\\",\\n  \\\"job_title\\\": \\\"Data Scientist\\\",\\n  \\\"key\\\": \\\"eradf\\\",\\n  \\\"location\\\": \\\"New York, USA\\\",\\n  \\\"company_name\\\": \\\"Apple, Inc\\\"\\n}, {\\n  \\\"id\\\": \\\"2\\\",\\n  \\\"name\\\": \\\"Jae Doe\\\",\\n  \\\"deleted_at\\\": null,\\n  \\\"exists_count\\\": \\\"80\\\",\\n  \\\"investment_count\\\": \\\"100\\\",\\n  \\\"job_title\\\": \\\"Data Minning Engineer\\\",\\n  \\\"key\\\": \\\"eradf\\\",\\n  \\\"location\\\": \\\"Sillicon Valley, USA\\\",\\n  \\\"company_name\\\": \\\"Uber\\\"\\n}, {\\n  \\\"id\\\": \\\"3\\\",\\n  \\\"name\\\": \\\"Robertson Jane\\\",\\n  \\\"deleted_at\\\": null,\\n  \\\"exists_count\\\": \\\"50\\\",\\n  \\\"investment_count\\\": \\\"60\\\",\\n  \\\"job_title\\\": \\\"Project Architect\\\",\\n  \\\"key\\\": \\\"eradf\\\",\\n  \\\"location\\\": \\\"Mountain View, USA\\\",\\n  \\\"company_name\\\": \\\"TechCrunch\\\"\\n}, {\\n  \\\"id\\\": \\\"4\\\",\\n  \\\"name\\\": \\\"Jake Baw\\\",\\n  \\\"deleted_at\\\": null,\\n  \\\"exists_count\\\": \\\"70\\\",\\n  \\\"investment_count\\\": \\\"100\\\",\\n  \\\"job_title\\\": \\\"Sr. Software Engineer\\\",\\n  \\\"key\\\": \\\"eradf\\\",\\n  \\\"location\\\": \\\"Hangzhou, Zhejiang, China\\\",\\n  \\\"company_name\\\": \\\"AliExpress\\\"\\n}, {\\n  \\\"id\\\": \\\"5\\\",\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"deleted_at\\\": null,\\n  \\\"exists_count\\\": \\\"1\\\",\\n  \\\"investment_count\\\": \\\"1\\\",\\n  \\\"job_title\\\": \\\"CTO\\\",\\n  \\\"key\\\": \\\"eradf\\\",\\n  \\\"location\\\": \\\"Dupont Highway, Dover, Delaware, USA\\\",\\n  \\\"company_name\\\": \\\"RedQ, Inc\\\"\\n}]\");\nvar sortOption = {};\n\nvar fakeData = /*#__PURE__*/function () {\n  function fakeData(size) {\n    _classCallCheck(this, fakeData);\n\n    this.size = size || 2000;\n    this.datas = [];\n    this.sortKey = null;\n    this.sortDir = null;\n  }\n\n  _createClass(fakeData, [{\n    key: \"dataModel\",\n    value: function dataModel(index) {\n      return tableData[index];\n    }\n  }, {\n    key: \"getObjectAt\",\n    value: function getObjectAt(index) {\n      if (index < 0 || index > this.size) {\n        return undefined;\n      }\n\n      if (this.datas[index] === undefined) {\n        this.datas[index] = this.dataModel(index);\n      }\n\n      return this.datas[index];\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      if (this.datas.length < this.size) {\n        for (var i = 0; i < this.size; i++) {\n          this.getObjectAt(i);\n        }\n      }\n\n      return this.datas.slice();\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.size;\n    }\n  }, {\n    key: \"getSortAsc\",\n    value: function getSortAsc(sortKey) {\n      sortOption.sortKey = sortKey;\n      sortOption.sortDir = 'ASC';\n      return this.datas.sort(this.sort);\n    }\n  }, {\n    key: \"getSortDesc\",\n    value: function getSortDesc(sortKey) {\n      sortOption.sortKey = sortKey;\n      sortOption.sortDir = 'DESC';\n      return this.datas.sort(this.sort);\n    }\n  }, {\n    key: \"sort\",\n    value: function sort(optionA, optionB) {\n      var valueA = optionA[sortOption.sortKey].toUpperCase();\n      var valueB = optionB[sortOption.sortKey].toUpperCase();\n      var sortVal = 0;\n\n      if (valueA > valueB) {\n        sortVal = 1;\n      }\n\n      if (valueA < valueB) {\n        sortVal = -1;\n      }\n\n      if (sortVal !== 0 && sortOption.sortDir === 'DESC') {\n        return sortVal * -1;\n      }\n\n      return sortVal;\n    }\n  }]);\n\n  return fakeData;\n}();\n\nexport default fakeData;","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/investors/fakeData.js"],"names":["tableData","JSON","parse","sortOption","fakeData","size","datas","sortKey","sortDir","index","undefined","dataModel","length","i","getObjectAt","slice","sort","optionA","optionB","valueA","toUpperCase","valueB","sortVal"],"mappings":";;AAAA,IAAMA,SAAS,GAAGC,IAAI,CAACC,KAAL,m4CAAlB;AAqDA,IAAMC,UAAU,GAAG,EAAnB;;IACMC,Q;AACJ,oBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKA,IAAL,GAAYA,IAAI,IAAI,IAApB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AACD;;;;8BACSC,K,EAAO;AACf,aAAOT,SAAS,CAACS,KAAD,CAAhB;AACD;;;gCACWA,K,EAAO;AACjB,UAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,KAAKJ,IAA9B,EAAoC;AAClC,eAAOK,SAAP;AACD;;AACD,UAAI,KAAKJ,KAAL,CAAWG,KAAX,MAAsBC,SAA1B,EAAqC;AACnC,aAAKJ,KAAL,CAAWG,KAAX,IAAoB,KAAKE,SAAL,CAAeF,KAAf,CAApB;AACD;;AACD,aAAO,KAAKH,KAAL,CAAWG,KAAX,CAAP;AACD;;;6BACQ;AACP,UAAI,KAAKH,KAAL,CAAWM,MAAX,GAAoB,KAAKP,IAA7B,EAAmC;AACjC,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,IAAzB,EAA+BQ,CAAC,EAAhC,EAAoC;AAClC,eAAKC,WAAL,CAAiBD,CAAjB;AACD;AACF;;AACD,aAAO,KAAKP,KAAL,CAAWS,KAAX,EAAP;AACD;;;8BAES;AACR,aAAO,KAAKV,IAAZ;AACD;;;+BACUE,O,EAAS;AAClBJ,MAAAA,UAAU,CAACI,OAAX,GAAqBA,OAArB;AACAJ,MAAAA,UAAU,CAACK,OAAX,GAAqB,KAArB;AACA,aAAO,KAAKF,KAAL,CAAWU,IAAX,CAAgB,KAAKA,IAArB,CAAP;AACD;;;gCACWT,O,EAAS;AACnBJ,MAAAA,UAAU,CAACI,OAAX,GAAqBA,OAArB;AACAJ,MAAAA,UAAU,CAACK,OAAX,GAAqB,MAArB;AACA,aAAO,KAAKF,KAAL,CAAWU,IAAX,CAAgB,KAAKA,IAArB,CAAP;AACD;;;yBACIC,O,EAASC,O,EAAS;AACrB,UAAMC,MAAM,GAAGF,OAAO,CAACd,UAAU,CAACI,OAAZ,CAAP,CAA4Ba,WAA5B,EAAf;AACA,UAAMC,MAAM,GAAGH,OAAO,CAACf,UAAU,CAACI,OAAZ,CAAP,CAA4Ba,WAA5B,EAAf;AACA,UAAIE,OAAO,GAAG,CAAd;;AACA,UAAIH,MAAM,GAAGE,MAAb,EAAqB;AACnBC,QAAAA,OAAO,GAAG,CAAV;AACD;;AACD,UAAIH,MAAM,GAAGE,MAAb,EAAqB;AACnBC,QAAAA,OAAO,GAAG,CAAC,CAAX;AACD;;AACD,UAAIA,OAAO,KAAK,CAAZ,IAAiBnB,UAAU,CAACK,OAAX,KAAuB,MAA5C,EAAoD;AAClD,eAAOc,OAAO,GAAG,CAAC,CAAlB;AACD;;AACD,aAAOA,OAAP;AACD;;;;;;AAEH,eAAelB,QAAf","sourcesContent":["const tableData = JSON.parse(\n  `[{\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"deleted_at\": null,\n  \"exists_count\": \"70\",\n  \"investment_count\": \"100\",\n  \"job_title\": \"Data Scientist\",\n  \"key\": \"eradf\",\n  \"location\": \"New York, USA\",\n  \"company_name\": \"Apple, Inc\"\n}, {\n  \"id\": \"2\",\n  \"name\": \"Jae Doe\",\n  \"deleted_at\": null,\n  \"exists_count\": \"80\",\n  \"investment_count\": \"100\",\n  \"job_title\": \"Data Minning Engineer\",\n  \"key\": \"eradf\",\n  \"location\": \"Sillicon Valley, USA\",\n  \"company_name\": \"Uber\"\n}, {\n  \"id\": \"3\",\n  \"name\": \"Robertson Jane\",\n  \"deleted_at\": null,\n  \"exists_count\": \"50\",\n  \"investment_count\": \"60\",\n  \"job_title\": \"Project Architect\",\n  \"key\": \"eradf\",\n  \"location\": \"Mountain View, USA\",\n  \"company_name\": \"TechCrunch\"\n}, {\n  \"id\": \"4\",\n  \"name\": \"Jake Baw\",\n  \"deleted_at\": null,\n  \"exists_count\": \"70\",\n  \"investment_count\": \"100\",\n  \"job_title\": \"Sr. Software Engineer\",\n  \"key\": \"eradf\",\n  \"location\": \"Hangzhou, Zhejiang, China\",\n  \"company_name\": \"AliExpress\"\n}, {\n  \"id\": \"5\",\n  \"name\": \"John Doe\",\n  \"deleted_at\": null,\n  \"exists_count\": \"1\",\n  \"investment_count\": \"1\",\n  \"job_title\": \"CTO\",\n  \"key\": \"eradf\",\n  \"location\": \"Dupont Highway, Dover, Delaware, USA\",\n  \"company_name\": \"RedQ, Inc\"\n}]`\n);\nconst sortOption = {};\nclass fakeData {\n  constructor(size) {\n    this.size = size || 2000;\n    this.datas = [];\n    this.sortKey = null;\n    this.sortDir = null;\n  }\n  dataModel(index) {\n    return tableData[index];\n  }\n  getObjectAt(index) {\n    if (index < 0 || index > this.size) {\n      return undefined;\n    }\n    if (this.datas[index] === undefined) {\n      this.datas[index] = this.dataModel(index);\n    }\n    return this.datas[index];\n  }\n  getAll() {\n    if (this.datas.length < this.size) {\n      for (let i = 0; i < this.size; i++) {\n        this.getObjectAt(i);\n      }\n    }\n    return this.datas.slice();\n  }\n\n  getSize() {\n    return this.size;\n  }\n  getSortAsc(sortKey) {\n    sortOption.sortKey = sortKey;\n    sortOption.sortDir = 'ASC';\n    return this.datas.sort(this.sort);\n  }\n  getSortDesc(sortKey) {\n    sortOption.sortKey = sortKey;\n    sortOption.sortDir = 'DESC';\n    return this.datas.sort(this.sort);\n  }\n  sort(optionA, optionB) {\n    const valueA = optionA[sortOption.sortKey].toUpperCase();\n    const valueB = optionB[sortOption.sortKey].toUpperCase();\n    let sortVal = 0;\n    if (valueA > valueB) {\n      sortVal = 1;\n    }\n    if (valueA < valueB) {\n      sortVal = -1;\n    }\n    if (sortVal !== 0 && sortOption.sortDir === 'DESC') {\n      return sortVal * -1;\n    }\n    return sortVal;\n  }\n}\nexport default fakeData;\n"]},"metadata":{},"sourceType":"module"}