{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from './firebase';\nexport function convertCollectionsSnapshotToMap(snapshots) {\n  return snapshots.docs.reduce(function (accumulator, collection) {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\nexport function getNewDocRef(_x) {\n  return _getNewDocRef.apply(this, arguments);\n}\n\nfunction _getNewDocRef() {\n  _getNewDocRef = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collectionName) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return db.collection(collectionName).doc();\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getNewDocRef.apply(this, arguments);\n}\n\nexport function addDocument(_x2, _x3) {\n  return _addDocument.apply(this, arguments);\n}\n\nfunction _addDocument() {\n  _addDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(collectionName, documentData) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return db.collection(collectionName).add(documentData).then(function (docRef) {\n              return docRef.id;\n            });\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _addDocument.apply(this, arguments);\n}\n\nexport function setDocument(_x4, _x5, _x6) {\n  return _setDocument.apply(this, arguments);\n}\n\nfunction _setDocument() {\n  _setDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(collectionName, docRef, documentData) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return db.collection(collectionName).doc(docRef).set(documentData);\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _setDocument.apply(this, arguments);\n}\n\nexport function getDocuments(_x7) {\n  return _getDocuments.apply(this, arguments);\n}\n\nfunction _getDocuments() {\n  _getDocuments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(collectionName) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return db.collection(collectionName).get().then(function (querySnapshot) {\n              return querySnapshot.docs.map(function (doc) {\n                return _objectSpread({\n                  id: doc.id\n                }, doc.data());\n              });\n            });\n\n          case 2:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getDocuments.apply(this, arguments);\n}\n\nexport function getDocumentsByQuery(_x8, _x9) {\n  return _getDocumentsByQuery.apply(this, arguments);\n}\n\nfunction _getDocumentsByQuery() {\n  _getDocumentsByQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(collectionName, query) {\n    var _console, _db$collection;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            (_console = console).log.apply(_console, _toConsumableArray(query).concat([collectionName, 'test']));\n\n            _context6.next = 3;\n            return (_db$collection = db.collection(collectionName)).where.apply(_db$collection, _toConsumableArray(query)).get().then(function (querySnapshot) {\n              return querySnapshot.docs.map(function (doc) {\n                return _objectSpread({\n                  id: doc.id\n                }, doc.data());\n              });\n            });\n\n          case 3:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getDocumentsByQuery.apply(this, arguments);\n}\n\nexport function deleteDocuments(_x10) {\n  return _deleteDocuments.apply(this, arguments);\n}\n\nfunction _deleteDocuments() {\n  _deleteDocuments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(collectionName) {\n    var collectionRef, batch;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            collectionRef = db.collection(collectionName);\n            batch = db.batch();\n            _context7.next = 4;\n            return collectionRef.get().then(function (querySnapshot) {\n              return querySnapshot.docs.map(function (doc) {\n                return batch[\"delete\"](collectionRef.doc(doc.id));\n              });\n            });\n\n          case 4:\n            _context7.next = 6;\n            return batch.commit().then(function () {\n              console.log('Batch Deletion successfully committed!');\n            });\n\n          case 6:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _deleteDocuments.apply(this, arguments);\n}\n\nexport var addCollectionAndDocuments = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(collectionKey, objectsToAdd) {\n    var collectionRef, batch;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            collectionRef = db.collection(collectionKey);\n            batch = db.batch();\n            objectsToAdd.forEach(function (obj) {\n              var newDocRef = collectionRef.doc();\n              batch.set(newDocRef, obj);\n            });\n            _context.next = 5;\n            return batch.commit().then(function () {\n              console.log('Batch Addition successfully committed!');\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addCollectionAndDocuments(_x11, _x12) {\n    return _ref.apply(this, arguments);\n  };\n}(); // const { title, items } = doc.data();\n//     return {\n//       routeName: encodeURI(title.toLowerCase()),\n//       id: doc.id,\n//       title,\n//       items,\n//     };\n//   });\n//   console.log(transformedCollection);\n//   return transformedCollection.reduce((accumulator, collection) => {\n//     accumulator[collection.title.toLowerCase()] = collection;\n//     return accumulator;\n//   }, {});","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/lib/firebase/firebase.util.js"],"names":["db","convertCollectionsSnapshotToMap","snapshots","docs","reduce","accumulator","collection","id","data","getNewDocRef","collectionName","doc","addDocument","documentData","add","then","docRef","setDocument","set","getDocuments","get","querySnapshot","map","getDocumentsByQuery","query","console","log","where","deleteDocuments","collectionRef","batch","commit","addCollectionAndDocuments","collectionKey","objectsToAdd","forEach","obj","newDocRef"],"mappings":"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","sourcesContent":["import { db } from './firebase'\nexport function convertCollectionsSnapshotToMap (snapshots) {\n  return snapshots.docs.reduce((accumulator, collection) => {\n    accumulator[collection.id] = collection.data()\n    return accumulator\n  }, {})\n}\nexport async function getNewDocRef (collectionName) {\n  return await db.collection(collectionName).doc()\n}\nexport async function addDocument (collectionName, documentData) {\n  return await db\n    .collection(collectionName)\n    .add(documentData)\n    .then(docRef => docRef.id)\n}\nexport async function setDocument (collectionName, docRef, documentData) {\n  return await db\n    .collection(collectionName)\n    .doc(docRef)\n    .set(documentData)\n}\n\nexport async function getDocuments (collectionName) {\n  return await db\n    .collection(collectionName)\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\n    )\n}\nexport async function getDocumentsByQuery (collectionName, query) {\n  console.log(...query, collectionName, 'test')\n\n  return await db\n    .collection(collectionName)\n    .where(...query)\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\n    )\n}\n\nexport async function deleteDocuments (collectionName) {\n  const collectionRef = db.collection(collectionName)\n  var batch = db.batch()\n  await collectionRef\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id)))\n    )\n\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!')\n  })\n}\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = db.collection(collectionKey)\n  const batch = db.batch()\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc()\n    batch.set(newDocRef, obj)\n  })\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!')\n  })\n}\n// const { title, items } = doc.data();\n//     return {\n//       routeName: encodeURI(title.toLowerCase()),\n//       id: doc.id,\n//       title,\n//       items,\n//     };\n//   });\n//   console.log(transformedCollection);\n//   return transformedCollection.reduce((accumulator, collection) => {\n//     accumulator[collection.title.toLowerCase()] = collection;\n//     return accumulator;\n//   }, {});\n"]},"metadata":{},"sourceType":"module"}