{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport jwtConfig from '@iso/config/jwt.config';\nimport jwtDecode from 'jwt-decode';\n\nvar JwtAuth = function JwtAuth() {\n  _classCallCheck(this, JwtAuth);\n\n  _defineProperty(this, \"login\", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userInfo) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!userInfo.username || !userInfo.password)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                error: 'please fill in the input'\n              });\n\n            case 2:\n              _context.next = 4;\n              return fetch(jwtConfig.fetchUrl, {\n                method: 'post',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userInfo)\n              }).then(function (response) {\n                return response.json();\n              }).then(function (res) {\n                var result = {};\n\n                if (res.token) {\n                  result.profile = jwtDecode(res.token);\n                  result.token = res.token;\n                  return result;\n                } else {\n                  return res;\n                }\n              })[\"catch\"](function (error) {\n                return {\n                  error: error\n                };\n              });\n\n            case 4:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\n\nexport default new JwtAuth();","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/packages/isomorphic-next/authentication/jwtAuthentication.js"],"names":["jwtConfig","jwtDecode","JwtAuth","userInfo","username","password","error","fetch","fetchUrl","method","headers","Accept","body","JSON","stringify","then","response","json","res","result","token","profile"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,O;;;;wEACI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA,oBACF,CAACA,QAAQ,CAACC,QAAV,IAAsB,CAACD,QAAQ,CAACE,QAD9B;AAAA;AAAA;AAAA;;AAAA,+CAEG;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAFH;;AAAA;AAAA;AAAA,qBAIOC,KAAK,CAACP,SAAS,CAACQ,QAAX,EAAqB;AACrCC,gBAAAA,MAAM,EAAE,MAD6B;AAErCC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,MAAM,EAAE,kBADD;AAEP,kCAAgB;AAFT,iBAF4B;AAMrCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,QAAf;AAN+B,eAArB,CAAL,CAQVY,IARU,CAQL,UAAAC,QAAQ;AAAA,uBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,eARH,EASVF,IATU,CASL,UAAAG,GAAG,EAAI;AACX,oBAAMC,MAAM,GAAG,EAAf;;AACA,oBAAID,GAAG,CAACE,KAAR,EAAe;AACbD,kBAAAA,MAAM,CAACE,OAAP,GAAiBpB,SAAS,CAACiB,GAAG,CAACE,KAAL,CAA1B;AACAD,kBAAAA,MAAM,CAACC,KAAP,GAAeF,GAAG,CAACE,KAAnB;AACA,yBAAOD,MAAP;AACD,iBAJD,MAIO;AACL,yBAAOD,GAAP;AACD;AACF,eAlBU,WAmBJ,UAAAZ,KAAK;AAAA,uBAAK;AAAEA,kBAAAA,KAAK,EAALA;AAAF,iBAAL;AAAA,eAnBD,CAJP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;;AA0BV,eAAe,IAAIJ,OAAJ,EAAf","sourcesContent":["import jwtConfig from '@iso/config/jwt.config';\nimport jwtDecode from 'jwt-decode';\n\nclass JwtAuth {\n  login = async userInfo => {\n    if (!userInfo.username || !userInfo.password) {\n      return { error: 'please fill in the input' };\n    }\n    return await fetch(jwtConfig.fetchUrl, {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userInfo),\n    })\n      .then(response => response.json())\n      .then(res => {\n        const result = {};\n        if (res.token) {\n          result.profile = jwtDecode(res.token);\n          result.token = res.token;\n          return result;\n        } else {\n          return res;\n        }\n      })\n      .catch(error => ({ error }));\n  };\n}\nexport default new JwtAuth();\n"]},"metadata":{},"sourceType":"module"}