{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(searchRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport youtubeSearchApi from '@iso/config/youtube_search.config';\nexport var per_page = 10;\nvar maxResults = 10;\nvar youtubeSearchURL = \"https://www.googleapis.com/youtube/v3/search?maxResults=\".concat(maxResults, \"&type=video&key=\").concat(youtubeSearchApi, \"&part=snippet\");\n\nvar onSearchReqeust = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(searcText, pageToken) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"\".concat(youtubeSearchURL, \"&q=\").concat(encodeURIComponent(searcText)).concat(pageToken)).then(function (res) {\n              return res.json();\n            }).then(function (res) {\n              return res;\n            })[\"catch\"](function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function onSearchReqeust(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction searchRequest(_ref2) {\n  var payload, searcText, pageToken, searchResult;\n  return _regeneratorRuntime.wrap(function searchRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          searcText = payload.searcText, pageToken = payload.pageToken;\n          _context2.prev = 2;\n          _context2.next = 5;\n          return call(onSearchReqeust, searcText, pageToken ? \"&pageToken=\".concat(pageToken) : '');\n\n        case 5:\n          searchResult = _context2.sent;\n\n          if (!searchResult.items) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 9;\n          return put(actions.youtubeSearchSuccess(searchResult.items, searchResult.pageInfo.totalResults, searchResult.nextPageToken, searchResult.prevPageToken));\n\n        case 9:\n          _context2.next = 13;\n          break;\n\n        case 11:\n          _context2.next = 13;\n          return put(actions.youtubeSearchSuccess());\n\n        case 13:\n          _context2.next = 19;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](2);\n          _context2.next = 19;\n          return put(actions.youtubeSearchSuccess());\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[2, 15]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actions.YOUTUBE_SEARCH, searchRequest)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/youtubeSearch/sagas.js"],"names":["searchRequest","rootSaga","all","takeEvery","put","call","actions","youtubeSearchApi","per_page","maxResults","youtubeSearchURL","onSearchReqeust","searcText","pageToken","fetch","encodeURIComponent","then","res","json","error","payload","searchResult","items","youtubeSearchSuccess","pageInfo","totalResults","nextPageToken","prevPageToken","YOUTUBE_SEARCH"],"mappings":";;;oDAeUA,a;qDAwBeC,Q;;AAvCzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAO,IAAMC,QAAQ,GAAG,EAAjB;AACP,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,gBAAgB,qEAA8DD,UAA9D,6BAA2FF,gBAA3F,kBAAtB;;AAEA,IAAMI,eAAe;AAAA,sEAAG,iBAAOC,SAAP,EAAkBC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAChBC,KAAK,WACNJ,gBADM,gBACgBK,kBAAkB,CAACH,SAAD,CADlC,SACgDC,SADhD,EAAL,CAGHG,IAHG,CAGE,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aAHL,EAIHF,IAJG,CAIE,UAAAC,GAAG;AAAA,qBAAIA,GAAJ;AAAA,aAJL,WAKG,UAAAE,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aALR,CADgB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfR,eAAe;AAAA;AAAA;AAAA,GAArB;;AAQA,SAAUX,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BoB,UAAAA,OAA1B,SAA0BA,OAA1B;AACUR,UAAAA,SADV,GACmCQ,OADnC,CACUR,SADV,EACqBC,SADrB,GACmCO,OADnC,CACqBP,SADrB;AAAA;AAAA;AAGyB,iBAAMR,IAAI,CAC7BM,eAD6B,EAE7BC,SAF6B,EAG7BC,SAAS,wBAAiBA,SAAjB,IAA+B,EAHX,CAAV;;AAHzB;AAGUQ,UAAAA,YAHV;;AAAA,eAQQA,YAAY,CAACC,KARrB;AAAA;AAAA;AAAA;;AAAA;AASM,iBAAMlB,GAAG,CACPE,OAAO,CAACiB,oBAAR,CACEF,YAAY,CAACC,KADf,EAEED,YAAY,CAACG,QAAb,CAAsBC,YAFxB,EAGEJ,YAAY,CAACK,aAHf,EAIEL,YAAY,CAACM,aAJf,CADO,CAAT;;AATN;AAAA;AAAA;;AAAA;AAAA;AAkBM,iBAAMvB,GAAG,CAACE,OAAO,CAACiB,oBAAR,EAAD,CAAT;;AAlBN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAqBI,iBAAMnB,GAAG,CAACE,OAAO,CAACiB,oBAAR,EAAD,CAAT;;AArBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,eAAe,SAAUtB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,SAAS,CAACG,OAAO,CAACsB,cAAT,EAAyB5B,aAAzB,CAAV,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport youtubeSearchApi from '@iso/config/youtube_search.config';\nexport const per_page = 10;\nconst maxResults = 10;\nconst youtubeSearchURL = `https://www.googleapis.com/youtube/v3/search?maxResults=${maxResults}&type=video&key=${youtubeSearchApi}&part=snippet`;\n\nconst onSearchReqeust = async (searcText, pageToken) =>\n  await fetch(\n    `${youtubeSearchURL}&q=${encodeURIComponent(searcText)}${pageToken}`\n  )\n    .then(res => res.json())\n    .then(res => res)\n    .catch(error => error);\n\nfunction* searchRequest({ payload }) {\n  const { searcText, pageToken } = payload;\n  try {\n    const searchResult = yield call(\n      onSearchReqeust,\n      searcText,\n      pageToken ? `&pageToken=${pageToken}` : ''\n    );\n    if (searchResult.items) {\n      yield put(\n        actions.youtubeSearchSuccess(\n          searchResult.items,\n          searchResult.pageInfo.totalResults,\n          searchResult.nextPageToken,\n          searchResult.prevPageToken\n        )\n      );\n    } else {\n      yield put(actions.youtubeSearchSuccess());\n    }\n  } catch (error) {\n    yield put(actions.youtubeSearchSuccess());\n  }\n}\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.YOUTUBE_SEARCH, searchRequest)]);\n}\n"]},"metadata":{},"sourceType":"module"}