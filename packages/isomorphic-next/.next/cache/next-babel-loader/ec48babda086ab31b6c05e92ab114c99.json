{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(searchRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nexport var per_page = 10;\nvar gitSearchApi = \"https://api.github.com/search/repositories?per_page=\".concat(per_page, \"&q=\");\n\nvar onSearchReqeust = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(searcText) {\n    var page,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            page = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;\n            _context.next = 3;\n            return fetch(\"\".concat(gitSearchApi).concat(encodeURIComponent(searcText), \"&page=\").concat(page)).then(function (res) {\n              return res.json();\n            }).then(function (res) {\n              return res;\n            })[\"catch\"](function (error) {\n              return error;\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function onSearchReqeust(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction searchRequest(_ref2) {\n  var payload, searcText, page, searchResult;\n  return _regeneratorRuntime.wrap(function searchRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          searcText = payload.searcText, page = payload.page;\n          _context2.prev = 2;\n          _context2.next = 5;\n          return call(onSearchReqeust, searcText, page);\n\n        case 5:\n          searchResult = _context2.sent;\n\n          if (!(searchResult.items && searchResult.total_count)) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 9;\n          return put(actions.gitSearchSuccess(searchResult.items, searchResult.total_count, page));\n\n        case 9:\n          _context2.next = 13;\n          break;\n\n        case 11:\n          _context2.next = 13;\n          return put(actions.gitSearchSuccess());\n\n        case 13:\n          _context2.next = 19;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](2);\n          _context2.next = 19;\n          return put(actions.gitSearchSuccess());\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[2, 15]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actions.GIT_SEARCH, searchRequest)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/githubSearch/sagas.js"],"names":["searchRequest","rootSaga","all","takeEvery","put","call","actions","per_page","gitSearchApi","onSearchReqeust","searcText","page","fetch","encodeURIComponent","then","res","json","error","payload","searchResult","items","total_count","gitSearchSuccess","GIT_SEARCH"],"mappings":";;;oDAWUA,a;qDAmBeC,Q;;AA9BzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,IAAMC,QAAQ,GAAG,EAAjB;AACP,IAAMC,YAAY,iEAA0DD,QAA1D,QAAlB;;AAEA,IAAME,eAAe;AAAA,sEAAG,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,YAAAA,IAAlB,2DAAyB,CAAzB;AAAA;AAAA,mBAChBC,KAAK,WAAIJ,YAAJ,SAAmBK,kBAAkB,CAACH,SAAD,CAArC,mBAAyDC,IAAzD,EAAL,CACHG,IADG,CACE,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aADL,EAEHF,IAFG,CAEE,UAAAC,GAAG;AAAA,qBAAIA,GAAJ;AAAA,aAFL,WAGG,UAAAE,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aAHR,CADgB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfR,eAAe;AAAA;AAAA;AAAA,GAArB;;AAMA,SAAUT,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BkB,UAAAA,OAA1B,SAA0BA,OAA1B;AACUR,UAAAA,SADV,GAC8BQ,OAD9B,CACUR,SADV,EACqBC,IADrB,GAC8BO,OAD9B,CACqBP,IADrB;AAAA;AAAA;AAGyB,iBAAMN,IAAI,CAACI,eAAD,EAAkBC,SAAlB,EAA6BC,IAA7B,CAAV;;AAHzB;AAGUQ,UAAAA,YAHV;;AAAA,gBAIQA,YAAY,CAACC,KAAb,IAAsBD,YAAY,CAACE,WAJ3C;AAAA;AAAA;AAAA;;AAAA;AAKM,iBAAMjB,GAAG,CACPE,OAAO,CAACgB,gBAAR,CACEH,YAAY,CAACC,KADf,EAEED,YAAY,CAACE,WAFf,EAGEV,IAHF,CADO,CAAT;;AALN;AAAA;AAAA;;AAAA;AAAA;AAaM,iBAAMP,GAAG,CAACE,OAAO,CAACgB,gBAAR,EAAD,CAAT;;AAbN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBI,iBAAMlB,GAAG,CAACE,OAAO,CAACgB,gBAAR,EAAD,CAAT;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,eAAe,SAAUrB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,SAAS,CAACG,OAAO,CAACiB,UAAT,EAAqBvB,aAArB,CAAV,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nexport const per_page = 10;\nconst gitSearchApi = `https://api.github.com/search/repositories?per_page=${per_page}&q=`;\n\nconst onSearchReqeust = async (searcText, page = 1) =>\n  await fetch(`${gitSearchApi}${encodeURIComponent(searcText)}&page=${page}`)\n    .then(res => res.json())\n    .then(res => res)\n    .catch(error => error);\n\nfunction* searchRequest({ payload }) {\n  const { searcText, page } = payload;\n  try {\n    const searchResult = yield call(onSearchReqeust, searcText, page);\n    if (searchResult.items && searchResult.total_count) {\n      yield put(\n        actions.gitSearchSuccess(\n          searchResult.items,\n          searchResult.total_count,\n          page\n        )\n      );\n    } else {\n      yield put(actions.gitSearchSuccess());\n    }\n  } catch (error) {\n    yield put(actions.gitSearchSuccess());\n  }\n}\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.GIT_SEARCH, searchRequest)]);\n}\n"]},"metadata":{},"sourceType":"module"}