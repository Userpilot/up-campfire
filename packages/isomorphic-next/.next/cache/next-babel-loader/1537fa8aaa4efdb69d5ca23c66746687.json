{"ast":null,"code":"var _jsxFileName = \"/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/components/Algolia/RangeSlider.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connectRange } from 'react-instantsearch/connectors';\nimport 'rheostat/initialize';\nimport 'rheostat/css/rheostat.css';\nimport Rheostat from 'rheostat';\n\nclass Range extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      currentValues: {\n        min: this.props.min,\n        max: this.props.max\n      }\n    });\n\n    _defineProperty(this, \"onValuesUpdated\", sliderState => {\n      this.setState({\n        currentValues: {\n          min: sliderState.values[0],\n          max: sliderState.values[1]\n        }\n      });\n    });\n\n    _defineProperty(this, \"onChange\", sliderState => {\n      if (this.props.currentRefinement.min !== sliderState.values[0] || this.props.currentRefinement.max !== sliderState.values[1]) {\n        this.props.refine({\n          min: sliderState.values[0],\n          max: sliderState.values[1]\n        });\n      }\n    });\n  }\n\n  componentWillReceiveProps(sliderState) {\n    if (sliderState.canRefine) {\n      this.setState({\n        currentValues: {\n          min: sliderState.currentRefinement.min,\n          max: sliderState.currentRefinement.max\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      min,\n      max,\n      currentRefinement\n    } = this.props;\n    const {\n      currentValues\n    } = this.state;\n    return min !== max ? __jsx(\"div\", {\n      className: \"isoAlRangeSlider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"isoAlRangeNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, currentValues.min), \" -\", __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 45\n      }\n    }, currentValues.max)), __jsx(Rheostat, {\n      min: min,\n      max: max,\n      values: [currentRefinement.min, currentRefinement.max],\n      onChange: this.onChange,\n      onValuesUpdated: this.onValuesUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    })) : null;\n  }\n\n}\n\n_defineProperty(Range, \"propTypes\", {\n  min: PropTypes.number,\n  max: PropTypes.number,\n  currentRefinement: PropTypes.object,\n  refine: PropTypes.func.isRequired,\n  canRefine: PropTypes.bool.isRequired\n});\n\nconst RangeSlider = connectRange(Range);\nexport default RangeSlider;","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/components/Algolia/RangeSlider.js"],"names":["PropTypes","React","Component","connectRange","Rheostat","Range","currentValues","min","props","max","sliderState","setState","values","currentRefinement","refine","componentWillReceiveProps","canRefine","render","state","onChange","onValuesUpdated","number","object","func","isRequired","bool","RangeSlider"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connectRange } from 'react-instantsearch/connectors';\nimport 'rheostat/initialize';\nimport 'rheostat/css/rheostat.css';\nimport Rheostat from 'rheostat';\n\nclass Range extends Component {\n  static propTypes = {\n    min: PropTypes.number,\n    max: PropTypes.number,\n    currentRefinement: PropTypes.object,\n    refine: PropTypes.func.isRequired,\n    canRefine: PropTypes.bool.isRequired,\n  };\n\n  state = { currentValues: { min: this.props.min, max: this.props.max } };\n\n  componentWillReceiveProps(sliderState) {\n    if (sliderState.canRefine) {\n      this.setState({\n        currentValues: {\n          min: sliderState.currentRefinement.min,\n          max: sliderState.currentRefinement.max,\n        },\n      });\n    }\n  }\n\n  onValuesUpdated = (sliderState) => {\n    this.setState({\n      currentValues: { min: sliderState.values[0], max: sliderState.values[1] },\n    });\n  };\n\n  onChange = (sliderState) => {\n    if (\n      this.props.currentRefinement.min !== sliderState.values[0] ||\n      this.props.currentRefinement.max !== sliderState.values[1]\n    ) {\n      this.props.refine({\n        min: sliderState.values[0],\n        max: sliderState.values[1],\n      });\n    }\n  };\n\n  render() {\n    const { min, max, currentRefinement } = this.props;\n    const { currentValues } = this.state;\n    return min !== max ? (\n      <div className=\"isoAlRangeSlider\">\n        <div className=\"isoAlRangeNumber\">\n          <span>{currentValues.min}</span> -<span>{currentValues.max}</span>\n        </div>\n        <Rheostat\n          min={min}\n          max={max}\n          values={[currentRefinement.min, currentRefinement.max]}\n          onChange={this.onChange}\n          onValuesUpdated={this.onValuesUpdated}\n        />\n      </div>\n    ) : null;\n  }\n}\n\nconst RangeSlider = connectRange(Range);\nexport default RangeSlider;\n"]},"metadata":{},"sourceType":"module"}