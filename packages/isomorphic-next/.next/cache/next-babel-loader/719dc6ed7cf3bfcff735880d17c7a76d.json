{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(questionRenderEffectSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(quizRenderEffectSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(questionSaga);\n\n// saga.js\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport quizActions from './actions';\nimport FakeQuestion from './fakeQuestion';\nimport FakeQuiz from './fakeQuizes';\n\nvar getQuizes = function getQuizes(state) {\n  return state.quiz;\n};\n\nfunction questionRenderEffectSaga() {\n  var questons;\n  return _regeneratorRuntime.wrap(function questionRenderEffectSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          questons = FakeQuestion;\n          _context.next = 3;\n          return put(quizActions.setQuestionData(questons));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction quizRenderEffectSaga() {\n  var quizes;\n  return _regeneratorRuntime.wrap(function quizRenderEffectSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          quizes = FakeQuiz;\n          _context2.next = 3;\n          return put(quizActions.setQuizData(quizes));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function questionSaga() {\n  return _regeneratorRuntime.wrap(function questionSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(quizActions.GET_QUESTION_DATA, questionRenderEffectSaga), takeEvery(quizActions.GET_QUIZ_DATA, quizRenderEffectSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/quiz/saga.js"],"names":["questionRenderEffectSaga","quizRenderEffectSaga","questionSaga","all","takeEvery","put","select","quizActions","FakeQuestion","FakeQuiz","getQuizes","state","quiz","questons","setQuestionData","quizes","setQuizData","GET_QUESTION_DATA","GET_QUIZ_DATA"],"mappings":";;oDAQUA,wB;qDAMAC,oB;qDAMeC,Y;;AApBzB;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,MAA9B,QAA4C,oBAA5C;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,cAArB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,IAAV;AAAA,CAAvB;;AAEA,SAAUZ,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEa,UAAAA,QAAQ,GAAGL,YAAX;AAFF;AAGE,iBAAMH,GAAG,CAACE,WAAW,CAACO,eAAZ,CAA4BD,QAA5B,CAAD,CAAT;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUZ,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEc,UAAAA,MAAM,GAAGN,QAAT;AAFF;AAGE,iBAAMJ,GAAG,CAACE,WAAW,CAACS,WAAZ,CAAwBD,MAAxB,CAAD,CAAT;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,SAAUb,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,SAAS,CAACG,WAAW,CAACU,iBAAb,EAAgCjB,wBAAhC,CADD,EAERI,SAAS,CAACG,WAAW,CAACW,aAAb,EAA4BjB,oBAA5B,CAFD,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// saga.js\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport quizActions from './actions';\nimport FakeQuestion from './fakeQuestion';\nimport FakeQuiz from './fakeQuizes';\n\nconst getQuizes = state => state.quiz;\n\nfunction* questionRenderEffectSaga() {\n  let questons;\n  questons = FakeQuestion;\n  yield put(quizActions.setQuestionData(questons));\n}\n\nfunction* quizRenderEffectSaga() {\n  let quizes;\n  quizes = FakeQuiz;\n  yield put(quizActions.setQuizData(quizes));\n}\n\nexport default function* questionSaga() {\n  yield all([\n    takeEvery(quizActions.GET_QUESTION_DATA, questionRenderEffectSaga),\n    takeEvery(quizActions.GET_QUIZ_DATA, quizRenderEffectSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}