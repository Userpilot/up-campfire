{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(boardsRenderEffectSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(boardRenderEffectSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(createOrUpdateBoardEffectSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(deleteBoardEffectSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(createOrUpdateColumnEffectSaga),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(deleteColumnEffectSaga),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(moveColumnEffectSaga),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(createOrUpdateTaskEffectSaga),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(deleteTaskEffectSaga),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(moveTaskEffectSaga),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(scrumBoardSaga);\n\n// saga.js\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport scrumBoardActions from './actions';\nimport DemoData from './data';\nimport { loadState, saveState } from '@iso/lib/helpers/localStorage';\n\nvar getScrumBoards = function getScrumBoards(state) {\n  return state.scrumBoard;\n};\n\nfunction boardsRenderEffectSaga() {\n  var boards, columns, tasks, scrum_boards;\n  return _regeneratorRuntime.wrap(function boardsRenderEffectSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (localStorage.hasOwnProperty('scrum_boards')) {\n            scrum_boards = loadState('scrum_boards');\n            boards = scrum_boards.boards;\n            columns = scrum_boards.columns;\n            tasks = scrum_boards.tasks;\n          } else {\n            boards = DemoData.boards;\n            columns = DemoData.columns;\n            tasks = DemoData.tasks;\n          }\n\n          saveState('scrum_boards', {\n            boards: boards,\n            columns: columns,\n            tasks: tasks\n          });\n          _context.next = 4;\n          return put(scrumBoardActions.setBoardsData({\n            boards: boards,\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction boardRenderEffectSaga(_ref) {\n  var payload, scrum_boards, boards, columns, tasks;\n  return _regeneratorRuntime.wrap(function boardRenderEffectSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n\n          if (localStorage.hasOwnProperty('scrum_boards')) {\n            scrum_boards = loadState('scrum_boards');\n            boards = scrum_boards.boards;\n            columns = scrum_boards.columns;\n            tasks = scrum_boards.tasks;\n          } else {\n            scrum_boards = DemoData;\n            boards = DemoData.boards;\n            columns = DemoData.columns;\n            tasks = DemoData.tasks;\n          }\n\n          _context2.next = 4;\n          return put(scrumBoardActions.setBoardData({\n            boards: boards,\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction createOrUpdateBoardEffectSaga(action) {\n  var scrum_boards, boards;\n  return _regeneratorRuntime.wrap(function createOrUpdateBoardEffectSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return select(getScrumBoards);\n\n        case 2:\n          scrum_boards = _context3.sent;\n          boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, action.payload.id, action.payload));\n          scrum_boards = {\n            columns: scrum_boards.columns,\n            tasks: scrum_boards.tasks,\n            boards: boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context3.next = 8;\n          return put(scrumBoardActions.createOrUpdateBoard(boards));\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction deleteBoardEffectSaga(action) {\n  var scrum_boards, BOARDS, boards;\n  return _regeneratorRuntime.wrap(function deleteBoardEffectSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return select(getScrumBoards);\n\n        case 2:\n          scrum_boards = _context4.sent;\n          BOARDS = _objectSpread({}, scrum_boards.boards);\n          delete BOARDS[action.payload];\n          boards = BOARDS;\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context4.next = 10;\n          return put(scrumBoardActions.deleteBoard(boards));\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction createOrUpdateColumnEffectSaga(_ref2) {\n  var _ref2$payload, column, board_id, scrum_boards, columns, boards;\n\n  return _regeneratorRuntime.wrap(function createOrUpdateColumnEffectSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, column = _ref2$payload.column, board_id = _ref2$payload.board_id;\n          _context5.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context5.sent;\n          console.log(column, board_id);\n          columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, _defineProperty({}, column.id, _objectSpread(_objectSpread({}, column), {}, {\n            editing: false\n          })));\n          boards = scrum_boards.boards;\n\n          if (!column.editing) {\n            boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, board_id, _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n              column_orders: [].concat(_toConsumableArray(scrum_boards.boards[board_id].column_orders), [column.id])\n            })));\n          }\n\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            columns: columns,\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context5.next = 12;\n          return put(scrumBoardActions.createOrUpdateColumn({\n            columns: columns,\n            boards: boards\n          }));\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction deleteColumnEffectSaga(_ref3) {\n  var _ref3$payload, column_id, board_id, scrum_boards, COLUMNS, columns, boards;\n\n  return _regeneratorRuntime.wrap(function deleteColumnEffectSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, column_id = _ref3$payload.column_id, board_id = _ref3$payload.board_id;\n          _context6.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context6.sent;\n          COLUMNS = _objectSpread({}, scrum_boards.columns);\n          delete COLUMNS[column_id];\n          columns = COLUMNS;\n          boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, board_id, _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n            column_orders: scrum_boards.boards[board_id].column_orders.filter(function (order) {\n              return order !== column_id;\n            })\n          })));\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            columns: columns,\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context6.next = 12;\n          return put(scrumBoardActions.deleteColumn({\n            columns: columns,\n            boards: boards\n          }));\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction moveColumnEffectSaga(_ref4) {\n  var _ref4$payload, board_id, column_orders, scrum_boards, boards;\n\n  return _regeneratorRuntime.wrap(function moveColumnEffectSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _ref4$payload = _ref4.payload, board_id = _ref4$payload.board_id, column_orders = _ref4$payload.column_orders;\n          _context7.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context7.sent;\n          boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, _defineProperty({}, board_id, _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n            column_orders: column_orders\n          })));\n          scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n            boards: boards\n          });\n          saveState('scrum_boards', scrum_boards);\n          _context7.next = 9;\n          return put(scrumBoardActions.setMovedColumn(boards));\n\n        case 9:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction createOrUpdateTaskEffectSaga(action) {\n  var scrum_boards, tasks, columns;\n  return _regeneratorRuntime.wrap(function createOrUpdateTaskEffectSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return select(getScrumBoards);\n\n        case 2:\n          scrum_boards = _context8.sent;\n          tasks = _objectSpread(_objectSpread({}, scrum_boards.tasks), {}, _defineProperty({}, action.payload.id, _objectSpread(_objectSpread({}, action.payload), {}, {\n            editing: false\n          })));\n          columns = scrum_boards.columns;\n\n          if (!action.payload.editing) {\n            columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, _defineProperty({}, action.payload.column_id, _objectSpread(_objectSpread({}, scrum_boards.columns[action.payload.column_id]), {}, {\n              task_orders: [].concat(_toConsumableArray(scrum_boards.columns[action.payload.column_id].task_orders), [action.payload.id])\n            })));\n          }\n\n          scrum_boards = {\n            columns: columns,\n            tasks: tasks,\n            boards: scrum_boards.boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context8.next = 10;\n          return put(scrumBoardActions.createOrUpdateTask({\n            tasks: tasks,\n            columns: columns\n          }));\n\n        case 10:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction deleteTaskEffectSaga(_ref5) {\n  var _ref5$payload, task_id, column_id, scrum_boards, tasks, columns;\n\n  return _regeneratorRuntime.wrap(function deleteTaskEffectSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _ref5$payload = _ref5.payload, task_id = _ref5$payload.task_id, column_id = _ref5$payload.column_id;\n          _context9.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context9.sent;\n          tasks = Object.keys(scrum_boards.tasks).reduce(function (object, key) {\n            if (key !== task_id) {\n              object[key] = scrum_boards.tasks[key];\n            }\n\n            return object;\n          }, {});\n          columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, _defineProperty({}, column_id, _objectSpread(_objectSpread({}, scrum_boards.columns[column_id]), {}, {\n            task_orders: scrum_boards.columns[column_id].task_orders.filter(function (order) {\n              return order !== task_id;\n            })\n          })));\n          scrum_boards = {\n            columns: columns,\n            tasks: tasks,\n            boards: scrum_boards.boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context9.next = 10;\n          return put(scrumBoardActions.deleteTask({\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 10:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction moveTaskEffectSaga(_ref6) {\n  var _ref6$payload, tasks, columns, scrum_boards;\n\n  return _regeneratorRuntime.wrap(function moveTaskEffectSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _ref6$payload = _ref6.payload, tasks = _ref6$payload.tasks, columns = _ref6$payload.columns;\n          _context10.next = 3;\n          return select(getScrumBoards);\n\n        case 3:\n          scrum_boards = _context10.sent;\n          scrum_boards = {\n            columns: columns,\n            tasks: tasks,\n            boards: scrum_boards.boards\n          };\n          saveState('scrum_boards', scrum_boards);\n          _context10.next = 8;\n          return put(scrumBoardActions.setMovedTask({\n            columns: columns,\n            tasks: tasks\n          }));\n\n        case 8:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function scrumBoardSaga() {\n  return _regeneratorRuntime.wrap(function scrumBoardSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([takeEvery(scrumBoardActions.LOAD_BOARDS_DATA_SAGA, boardsRenderEffectSaga), takeEvery(scrumBoardActions.LOAD_CURRENT_BOARD_DATA_SAGA, boardRenderEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_BOARD_WATCHER, createOrUpdateBoardEffectSaga), takeEvery(scrumBoardActions.DELETE_BOARD_WATCHER, deleteBoardEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_COLUMN_WATCHER, createOrUpdateColumnEffectSaga), takeEvery(scrumBoardActions.DELETE_COLUMN_WATCHER, deleteColumnEffectSaga), takeEvery(scrumBoardActions.MOVE_COLUMN_WATCHER, moveColumnEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_TASK_WATCHER, createOrUpdateTaskEffectSaga), takeEvery(scrumBoardActions.DELETE_TASK_WATCHER, deleteTaskEffectSaga), takeEvery(scrumBoardActions.MOVE_TASK_WATCHER, moveTaskEffectSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/scrumBoard/saga.js"],"names":["boardsRenderEffectSaga","boardRenderEffectSaga","createOrUpdateBoardEffectSaga","deleteBoardEffectSaga","createOrUpdateColumnEffectSaga","deleteColumnEffectSaga","moveColumnEffectSaga","createOrUpdateTaskEffectSaga","deleteTaskEffectSaga","moveTaskEffectSaga","scrumBoardSaga","all","takeEvery","put","select","scrumBoardActions","DemoData","loadState","saveState","getScrumBoards","state","scrumBoard","localStorage","hasOwnProperty","scrum_boards","boards","columns","tasks","setBoardsData","payload","setBoardData","action","id","createOrUpdateBoard","BOARDS","deleteBoard","column","board_id","console","log","editing","column_orders","createOrUpdateColumn","column_id","COLUMNS","filter","order","deleteColumn","setMovedColumn","task_orders","createOrUpdateTask","task_id","Object","keys","reduce","object","key","deleteTask","setMovedTask","LOAD_BOARDS_DATA_SAGA","LOAD_CURRENT_BOARD_DATA_SAGA","CREATE_OR_UPDATE_BOARD_WATCHER","DELETE_BOARD_WATCHER","CREATE_OR_UPDATE_COLUMN_WATCHER","DELETE_COLUMN_WATCHER","MOVE_COLUMN_WATCHER","CREATE_OR_UPDATE_TASK_WATCHER","DELETE_TASK_WATCHER","MOVE_TASK_WATCHER"],"mappings":"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","sourcesContent":["// saga.js\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport scrumBoardActions from './actions';\nimport DemoData from './data';\nimport { loadState, saveState } from '@iso/lib/helpers/localStorage';\n\nconst getScrumBoards = state => state.scrumBoard;\n\nfunction* boardsRenderEffectSaga() {\n  let boards;\n  let columns;\n  let tasks;\n  if (localStorage.hasOwnProperty('scrum_boards')) {\n    const scrum_boards = loadState('scrum_boards');\n    boards = scrum_boards.boards;\n    columns = scrum_boards.columns;\n    tasks = scrum_boards.tasks;\n  } else {\n    boards = DemoData.boards;\n    columns = DemoData.columns;\n    tasks = DemoData.tasks;\n  }\n  saveState('scrum_boards', { boards, columns, tasks });\n  yield put(scrumBoardActions.setBoardsData({ boards, columns, tasks }));\n}\n\nfunction* boardRenderEffectSaga({ payload }) {\n  let scrum_boards;\n  let boards;\n  let columns;\n  let tasks;\n  if (localStorage.hasOwnProperty('scrum_boards')) {\n    scrum_boards = loadState('scrum_boards');\n    boards = scrum_boards.boards;\n    columns = scrum_boards.columns;\n    tasks = scrum_boards.tasks;\n  } else {\n    scrum_boards = DemoData;\n    boards = DemoData.boards;\n    columns = DemoData.columns;\n    tasks = DemoData.tasks;\n  }\n\n  yield put(\n    scrumBoardActions.setBoardData({\n      boards,\n      columns,\n      tasks,\n    })\n  );\n}\nfunction* createOrUpdateBoardEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n  const boards = {\n    ...scrum_boards.boards,\n    [action.payload.id]: action.payload,\n  };\n  scrum_boards = {\n    columns: scrum_boards.columns,\n    tasks: scrum_boards.tasks,\n    boards: boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n\n  yield put(scrumBoardActions.createOrUpdateBoard(boards));\n}\n\nfunction* deleteBoardEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n  const BOARDS = {\n    ...scrum_boards.boards,\n  };\n  delete BOARDS[action.payload];\n\n  const boards = BOARDS;\n\n  scrum_boards = {\n    ...scrum_boards,\n    boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n\n  yield put(scrumBoardActions.deleteBoard(boards));\n}\n\nfunction* createOrUpdateColumnEffectSaga({ payload: { column, board_id } }) {\n  let scrum_boards = yield select(getScrumBoards);\n  console.log(column, board_id);\n  const columns = {\n    ...scrum_boards.columns,\n    [column.id]: {\n      ...column,\n      editing: false,\n    },\n  };\n  let boards = scrum_boards.boards;\n  if (!column.editing) {\n    boards = {\n      ...scrum_boards.boards,\n      [board_id]: {\n        ...scrum_boards.boards[board_id],\n        column_orders: [\n          ...scrum_boards.boards[board_id].column_orders,\n          column.id,\n        ],\n      },\n    };\n  }\n  scrum_boards = {\n    ...scrum_boards,\n    columns,\n    boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.createOrUpdateColumn({ columns, boards }));\n}\n\nfunction* deleteColumnEffectSaga({ payload: { column_id, board_id } }) {\n  let scrum_boards = yield select(getScrumBoards);\n  const COLUMNS = {\n    ...scrum_boards.columns,\n  };\n  delete COLUMNS[column_id];\n\n  const columns = COLUMNS;\n  const boards = {\n    ...scrum_boards.boards,\n    [board_id]: {\n      ...scrum_boards.boards[board_id],\n      column_orders: scrum_boards.boards[board_id].column_orders.filter(\n        order => order !== column_id\n      ),\n    },\n  };\n\n  scrum_boards = {\n    ...scrum_boards,\n    columns,\n    boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n\n  yield put(scrumBoardActions.deleteColumn({ columns, boards }));\n}\n\nfunction* moveColumnEffectSaga({ payload: { board_id, column_orders } }) {\n  let scrum_boards = yield select(getScrumBoards);\n  const boards = {\n    ...scrum_boards.boards,\n    [board_id]: {\n      ...scrum_boards.boards[board_id],\n      column_orders: column_orders,\n    },\n  };\n  scrum_boards = {\n    ...scrum_boards,\n    boards: boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n\n  yield put(scrumBoardActions.setMovedColumn(boards));\n}\n\nfunction* createOrUpdateTaskEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n  const tasks = {\n    ...scrum_boards.tasks,\n    [action.payload.id]: { ...action.payload, editing: false },\n  };\n  let columns = scrum_boards.columns;\n  if (!action.payload.editing) {\n    columns = {\n      ...scrum_boards.columns,\n      [action.payload.column_id]: {\n        ...scrum_boards.columns[action.payload.column_id],\n        task_orders: [\n          ...scrum_boards.columns[action.payload.column_id].task_orders,\n          action.payload.id,\n        ],\n      },\n    };\n  }\n\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n\n  yield put(scrumBoardActions.createOrUpdateTask({ tasks, columns }));\n}\n\nfunction* deleteTaskEffectSaga({ payload: { task_id, column_id } }) {\n  let scrum_boards = yield select(getScrumBoards);\n  const tasks = Object.keys(scrum_boards.tasks).reduce((object, key) => {\n    if (key !== task_id) {\n      object[key] = scrum_boards.tasks[key];\n    }\n    return object;\n  }, {});\n  const columns = {\n    ...scrum_boards.columns,\n    [column_id]: {\n      ...scrum_boards.columns[column_id],\n      task_orders: scrum_boards.columns[column_id].task_orders.filter(\n        order => order !== task_id\n      ),\n    },\n  };\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.deleteTask({ columns, tasks }));\n}\n\nfunction* moveTaskEffectSaga({ payload: { tasks, columns } }) {\n  let scrum_boards = yield select(getScrumBoards);\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards,\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.setMovedTask({ columns, tasks }));\n}\n\nexport default function* scrumBoardSaga() {\n  yield all([\n    takeEvery(scrumBoardActions.LOAD_BOARDS_DATA_SAGA, boardsRenderEffectSaga),\n    takeEvery(\n      scrumBoardActions.LOAD_CURRENT_BOARD_DATA_SAGA,\n      boardRenderEffectSaga\n    ),\n    takeEvery(\n      scrumBoardActions.CREATE_OR_UPDATE_BOARD_WATCHER,\n      createOrUpdateBoardEffectSaga\n    ),\n    takeEvery(scrumBoardActions.DELETE_BOARD_WATCHER, deleteBoardEffectSaga),\n    takeEvery(\n      scrumBoardActions.CREATE_OR_UPDATE_COLUMN_WATCHER,\n      createOrUpdateColumnEffectSaga\n    ),\n    takeEvery(scrumBoardActions.DELETE_COLUMN_WATCHER, deleteColumnEffectSaga),\n    takeEvery(scrumBoardActions.MOVE_COLUMN_WATCHER, moveColumnEffectSaga),\n    takeEvery(\n      scrumBoardActions.CREATE_OR_UPDATE_TASK_WATCHER,\n      createOrUpdateTaskEffectSaga\n    ),\n    takeEvery(scrumBoardActions.DELETE_TASK_WATCHER, deleteTaskEffectSaga),\n    takeEvery(scrumBoardActions.MOVE_TASK_WATCHER, moveTaskEffectSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}