{"ast":null,"code":"import { createSelector } from 'reselect';\n\nvar allMailsSelector = function allMailsSelector(state) {\n  return state.allMails;\n};\n\nvar filterAttrSelector = function filterAttrSelector(state) {\n  return state.filterAttr;\n};\n\nvar searchStringSelector = function searchStringSelector(state) {\n  return state.searchString;\n};\n\nvar filterBucket = function filterBucket(mails, bucket) {\n  var newMails = [];\n  mails.forEach(function (mail) {\n    if (bucket === mail.bucket) {\n      newMails.push(mail);\n    }\n  });\n  return newMails;\n};\n\nvar filterTag = function filterTag(mails, tag) {\n  var newMails = [];\n  mails.forEach(function (mail) {\n    if (mail.tags && mail.tags.indexOf(tag) !== -1) {\n      newMails.push(mail);\n    }\n  });\n  return newMails;\n};\n\nvar filterMaiil = function filterMaiil(allMails, filterAttr, searchString) {\n  var newMails = filterBucket(allMails, filterAttr.bucket);\n\n  if (filterAttr.tag) {\n    newMails = filterTag(allMails, filterAttr.tag);\n  }\n\n  if (searchString) {\n    var search = searchString.toUpperCase();\n    newMails = newMails.filter(function (mail) {\n      return \"\".concat(mail.email).concat(mail.body).concat(mail.subject).toUpperCase().includes(search);\n    });\n  }\n\n  return newMails;\n};\n\nexport default createSelector(allMailsSelector, filterAttrSelector, searchStringSelector, filterMaiil);","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/mail/selector.js"],"names":["createSelector","allMailsSelector","state","allMails","filterAttrSelector","filterAttr","searchStringSelector","searchString","filterBucket","mails","bucket","newMails","forEach","mail","push","filterTag","tag","tags","indexOf","filterMaiil","search","toUpperCase","filter","email","body","subject","includes"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,QAAV;AAAA,CAA9B;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAF,KAAK;AAAA,SAAIA,KAAK,CAACG,UAAV;AAAA,CAAhC;;AACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAJ,KAAK;AAAA,SAAIA,KAAK,CAACK,YAAV;AAAA,CAAlC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC,MAAMC,QAAQ,GAAG,EAAjB;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,QAAIH,MAAM,KAAKG,IAAI,CAACH,MAApB,EAA4B;AAC1BC,MAAAA,QAAQ,CAACG,IAAT,CAAcD,IAAd;AACD;AACF,GAJD;AAKA,SAAOF,QAAP;AACD,CARD;;AASA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACN,KAAD,EAAQO,GAAR,EAAgB;AAChC,MAAML,QAAQ,GAAG,EAAjB;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,QAAIA,IAAI,CAACI,IAAL,IAAaJ,IAAI,CAACI,IAAL,CAAUC,OAAV,CAAkBF,GAAlB,MAA2B,CAAC,CAA7C,EAAgD;AAC9CL,MAAAA,QAAQ,CAACG,IAAT,CAAcD,IAAd;AACD;AACF,GAJD;AAKA,SAAOF,QAAP;AACD,CARD;;AASA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAAChB,QAAD,EAAWE,UAAX,EAAuBE,YAAvB,EAAwC;AAC1D,MAAII,QAAQ,GAAGH,YAAY,CAACL,QAAD,EAAWE,UAAU,CAACK,MAAtB,CAA3B;;AACA,MAAIL,UAAU,CAACW,GAAf,EAAoB;AAClBL,IAAAA,QAAQ,GAAGI,SAAS,CAACZ,QAAD,EAAWE,UAAU,CAACW,GAAtB,CAApB;AACD;;AACD,MAAIT,YAAJ,EAAkB;AAChB,QAAMa,MAAM,GAAGb,YAAY,CAACc,WAAb,EAAf;AACAV,IAAAA,QAAQ,GAAGA,QAAQ,CAACW,MAAT,CAAgB,UAAAT,IAAI;AAAA,aAC7B,UAAGA,IAAI,CAACU,KAAR,SAAgBV,IAAI,CAACW,IAArB,SAA4BX,IAAI,CAACY,OAAjC,EAA2CJ,WAA3C,GAAyDK,QAAzD,CAAkEN,MAAlE,CAD6B;AAAA,KAApB,CAAX;AAGD;;AACD,SAAOT,QAAP;AACD,CAZD;;AAcA,eAAeX,cAAc,CAC3BC,gBAD2B,EAE3BG,kBAF2B,EAG3BE,oBAH2B,EAI3Ba,WAJ2B,CAA7B","sourcesContent":["import { createSelector } from 'reselect';\n\nconst allMailsSelector = state => state.allMails;\nconst filterAttrSelector = state => state.filterAttr;\nconst searchStringSelector = state => state.searchString;\n\nconst filterBucket = (mails, bucket) => {\n  const newMails = [];\n  mails.forEach(mail => {\n    if (bucket === mail.bucket) {\n      newMails.push(mail);\n    }\n  });\n  return newMails;\n};\nconst filterTag = (mails, tag) => {\n  const newMails = [];\n  mails.forEach(mail => {\n    if (mail.tags && mail.tags.indexOf(tag) !== -1) {\n      newMails.push(mail);\n    }\n  });\n  return newMails;\n};\nconst filterMaiil = (allMails, filterAttr, searchString) => {\n  let newMails = filterBucket(allMails, filterAttr.bucket);\n  if (filterAttr.tag) {\n    newMails = filterTag(allMails, filterAttr.tag);\n  }\n  if (searchString) {\n    const search = searchString.toUpperCase();\n    newMails = newMails.filter(mail =>\n      `${mail.email}${mail.body}${mail.subject}`.toUpperCase().includes(search)\n    );\n  }\n  return newMails;\n};\n\nexport default createSelector(\n  allMailsSelector,\n  filterAttrSelector,\n  searchStringSelector,\n  filterMaiil\n);\n"]},"metadata":{},"sourceType":"module"}