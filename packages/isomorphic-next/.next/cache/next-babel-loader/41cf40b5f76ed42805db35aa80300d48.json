{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport actions from './actions';\nconst initState = {\n  searcText: 'react',\n  total_count: 0,\n  page: 1,\n  result: [],\n  loading: false,\n  error: false\n};\nexport default function reducer(state = initState, action) {\n  switch (action.type) {\n    case actions.GIT_SEARCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        searcText: action.payload.searcText\n      });\n\n    case actions.GIT_SUCCESS_RESULT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: false,\n        result: action.result,\n        total_count: action.total_count,\n        page: action.page\n      });\n\n    case actions.GIT_ERROR_RESULT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: false,\n        result: []\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/githubSearch/reducers.js"],"names":["actions","initState","searcText","total_count","page","result","loading","error","reducer","state","action","type","GIT_SEARCH","payload","GIT_SUCCESS_RESULT","GIT_ERROR_RESULT"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE,OADK;AAEhBC,EAAAA,WAAW,EAAE,CAFG;AAGhBC,EAAAA,IAAI,EAAE,CAHU;AAIhBC,EAAAA,MAAM,EAAE,EAJQ;AAKhBC,EAAAA,OAAO,EAAE,KALO;AAMhBC,EAAAA,KAAK,EAAE;AANS,CAAlB;AASA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGR,SAAzB,EAAoCS,MAApC,EAA4C;AACzD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,OAAO,CAACY,UAAb;AACE,6CACKH,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEJ,QAAAA,SAAS,EAAEQ,MAAM,CAACG,OAAP,CAAeX;AAH5B;;AAKF,SAAKF,OAAO,CAACc,kBAAb;AACE,6CACKL,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEF,QAAAA,MAAM,EAAEK,MAAM,CAACL,MAJjB;AAKEF,QAAAA,WAAW,EAAEO,MAAM,CAACP,WALtB;AAMEC,QAAAA,IAAI,EAAEM,MAAM,CAACN;AANf;;AAQF,SAAKJ,OAAO,CAACe,gBAAb;AACE,6CACKN,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEF,QAAAA,MAAM,EAAE;AAJV;;AAMF;AACE,aAAOI,KAAP;AAxBJ;AA0BD","sourcesContent":["import actions from './actions';\n\nconst initState = {\n  searcText: 'react',\n  total_count: 0,\n  page: 1,\n  result: [],\n  loading: false,\n  error: false,\n};\n\nexport default function reducer(state = initState, action) {\n  switch (action.type) {\n    case actions.GIT_SEARCH:\n      return {\n        ...state,\n        loading: true,\n        searcText: action.payload.searcText,\n      };\n    case actions.GIT_SUCCESS_RESULT:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        result: action.result,\n        total_count: action.total_count,\n        page: action.page,\n      };\n    case actions.GIT_ERROR_RESULT:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        result: [],\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}