{"ast":null,"code":"var _jsxFileName = \"/Users/walaa/Desktop/Isomorphic Main/isomorphic/packages/isomorphic-next/containers/Invoice/EditInvoice.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport { EditTable } from '@iso/components/Invoice/InvoiceTable';\nimport OrderStatus from '@iso/components/Invoice/OrderStatus';\nimport notification from '@iso/components/Notification';\nimport Button from '@iso/components/uielements/button';\nimport Input, { Textarea } from '@iso/components/uielements/input';\nimport DatePicker from '@iso/components/uielements/datePicker';\nimport Box from '@iso/components/utility/box';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper';\nimport InvoicePageWrapper from './SingleInvoice.styles';\nimport { stringToPosetiveInt } from '@iso/lib/helpers/utility';\nimport { orderStatusOptions } from './config';\n\nconst updateValues = invoice => {\n  const {\n    invoiceList\n  } = invoice;\n  let subTotal = 0;\n  invoiceList.forEach((item, index) => {\n    const price = item.costs * item.qty;\n    invoice.invoiceList[index].price = price;\n    invoice.invoiceList[index].key = index + 1;\n    subTotal += price;\n  });\n  invoice.subTotal = subTotal;\n  invoice.vatPrice = Math.floor(invoice.vatRate * subTotal * 0.01);\n  invoice.totalCost = invoice.vatPrice + subTotal;\n  return invoice;\n};\n\nconst checkInvoice = invoice => {\n  const emptyKeys = ['number', 'billTo', 'billToAddress', 'billFrom', 'billFromAddress', 'currency'];\n  const emptyKeysErrors = ['Invoice Number', 'Bill To', 'Bill To Address', 'Bill From', 'Bill From Address', 'Currency'];\n\n  for (let i = 0; i < emptyKeys.length; i++) {\n    if (!invoice[emptyKeys[i]]) {\n      return `Please fill in ${emptyKeysErrors[i]}`;\n    }\n  }\n\n  for (let i = 0; i < invoice.invoiceList.length; i++) {\n    if (!invoice.invoiceList[i].itemName) {\n      return `Please fill in item name of ${i + 1} item`;\n    }\n\n    if (invoice.invoiceList[i].costs === 0) {\n      return `cost of ${i + 1} item should be positive`;\n    }\n\n    if (invoice.invoiceList[i].qty === 0) {\n      return `quantity of ${i + 1} item should be positive`;\n    }\n  }\n\n  return '';\n};\n\nexport default class extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSave\", () => {\n      const {\n        editableInvoice,\n        isNewInvoice,\n        updateInvoice\n      } = this.props;\n      const error = checkInvoice(editableInvoice);\n\n      if (error) {\n        notification('error', error);\n      } else {\n        const successMessage = isNewInvoice ? 'A new Invoice added' : 'Invoice Updated';\n        notification('success', successMessage);\n        updateInvoice(editableInvoice);\n      }\n    });\n  }\n\n  render() {\n    const {\n      editableInvoice,\n      isNewInvoice,\n      redirectPath,\n      toggleView,\n      editInvoice\n    } = this.props;\n    return __jsx(LayoutWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, __jsx(InvoicePageWrapper, {\n      className: \"editView\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"PageHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, isNewInvoice ? __jsx(Link, {\n      href: redirectPath,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, \"Cancel\"))) : __jsx(Button, {\n      onClick: () => toggleView(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }, \"Cancel\")), __jsx(Button, {\n      type: \"primary\",\n      onClick: this.onSave,\n      className: \"saveBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, \"Save\"))), __jsx(\"div\", {\n      className: \"PageContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"OrderInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: \"LeftSideContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, __jsx(\"h3\", {\n      className: \"Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }, \"Invoice Info\"), __jsx(Input, {\n      placeholder: \"Number\",\n      value: editableInvoice.number,\n      onChange: event => {\n        editableInvoice.number = event.target.value;\n        editInvoice(editableInvoice);\n      },\n      className: \"LeftSideContentInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }\n    })), __jsx(\"div\", {\n      className: \"RightSideContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"RightSideStatus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      className: \"RightSideStatusSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, \"Order Status: \"), __jsx(OrderStatus, {\n      value: editableInvoice.orderStatus,\n      onChange: orderStatus => {\n        editableInvoice.orderStatus = orderStatus;\n        editInvoice(editableInvoice);\n      },\n      orderStatusOptions: orderStatusOptions,\n      className: \"RightStatusDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"RightSideDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, \"Order date:\", ' ', __jsx(DatePicker, {\n      allowClear: false,\n      value: moment(new Date(editableInvoice.orderDate)),\n      onChange: val => {\n        editableInvoice.orderDate = val.toDate().getTime();\n        editInvoice(editableInvoice);\n      },\n      format: \"MMMM Do YYYY\",\n      animateYearScrolling: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    })))), __jsx(\"div\", {\n      className: \"BillingInformation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: \"LeftSideContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, __jsx(Input, {\n      placeholder: \"Bill From\",\n      value: editableInvoice.billFrom,\n      onChange: event => {\n        editableInvoice.billFrom = event.target.value;\n        editInvoice(editableInvoice);\n      },\n      className: \"BillFormTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }), __jsx(Textarea, {\n      placeholder: \"Bill From Address\",\n      value: editableInvoice.billFromAddress,\n      rows: 5,\n      onChange: event => {\n        editableInvoice.billFromAddress = event.target.value;\n        editInvoice(editableInvoice);\n      },\n      className: \"BillFormAddress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 19\n      }\n    })), __jsx(\"div\", {\n      className: \"RightSideContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, __jsx(Input, {\n      placeholder: \"Bill To\",\n      value: editableInvoice.billTo,\n      onChange: event => {\n        editableInvoice.billTo = event.target.value;\n        editInvoice(editableInvoice);\n      },\n      className: \"BillFormTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }), __jsx(Textarea, {\n      placeholder: \"Bill To Address\",\n      value: editableInvoice.billToAddress,\n      rows: 5,\n      onChange: event => {\n        editableInvoice.billToAddress = event.target.value;\n        editInvoice(editableInvoice);\n      },\n      className: \"BillFormAddress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 19\n      }\n    }))), __jsx(\"div\", {\n      className: \"InvoiceTable editInvoiceTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 15\n      }\n    }, __jsx(EditTable, {\n      editableInvoice: editableInvoice,\n      editInvoice: editInvoice,\n      updateValues: updateValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"InvoiceTableBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      onClick: () => {\n        editableInvoice.invoiceList.push({\n          key: editableInvoice.invoiceList.length + 1,\n          itemName: '',\n          costs: 0,\n          qty: 0,\n          price: 0\n        });\n        editInvoice(editableInvoice);\n      },\n      type: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 19\n      }\n    }, \"Add Item\")), __jsx(\"div\", {\n      className: \"TotalBill\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      className: \"TotalBillTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, \"Sub-total : \"), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, `${editableInvoice.currency}${editableInvoice.subTotal}`)), __jsx(\"div\", {\n      className: \"vatRateCalc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      className: \"vatRateCalcSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }, \" Total Vat : \"), __jsx(\"div\", {\n      className: \"vatRateCalcWrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    }, __jsx(Input, {\n      value: editableInvoice.vatRate,\n      addonAfter: \"%\",\n      onChange: event => {\n        editableInvoice.vatRate = stringToPosetiveInt(event.target.value, editableInvoice.vatRate);\n        editInvoice(updateValues(editableInvoice));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 23\n      }\n    }), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 23\n      }\n    }, `${editableInvoice.currency}${editableInvoice.vatPrice}`))), __jsx(\"div\", {\n      className: \"currencySignWithTotal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      className: \"grandTotalSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, \"Grand Total \"), __jsx(\"div\", {\n      className: \"currencySignWrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }\n    }, __jsx(Input, {\n      value: editableInvoice.currency,\n      onChange: event => {\n        editableInvoice.currency = event.target.value;\n        editInvoice(editableInvoice);\n      },\n      className: \"currencySign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 23\n      }\n    }), __jsx(\"span\", {\n      className: \"currencySignSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 23\n      }\n    }, editableInvoice.totalCost))))), __jsx(\"div\", {\n      className: \"ButtonWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/packages/isomorphic-next/containers/Invoice/EditInvoice.js"],"names":["React","Component","Link","moment","EditTable","OrderStatus","notification","Button","Input","Textarea","DatePicker","Box","LayoutWrapper","InvoicePageWrapper","stringToPosetiveInt","orderStatusOptions","updateValues","invoice","invoiceList","subTotal","forEach","item","index","price","costs","qty","key","vatPrice","Math","floor","vatRate","totalCost","checkInvoice","emptyKeys","emptyKeysErrors","i","length","itemName","editableInvoice","isNewInvoice","updateInvoice","props","error","successMessage","render","redirectPath","toggleView","editInvoice","onSave","number","event","target","value","orderStatus","Date","orderDate","val","toDate","getTime","billFrom","billFromAddress","billTo","billToAddress","push","currency"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport { EditTable } from '@iso/components/Invoice/InvoiceTable';\nimport OrderStatus from '@iso/components/Invoice/OrderStatus';\nimport notification from '@iso/components/Notification';\nimport Button from '@iso/components/uielements/button';\nimport Input, { Textarea } from '@iso/components/uielements/input';\nimport DatePicker from '@iso/components/uielements/datePicker';\nimport Box from '@iso/components/utility/box';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper';\nimport InvoicePageWrapper from './SingleInvoice.styles';\nimport { stringToPosetiveInt } from '@iso/lib/helpers/utility';\nimport { orderStatusOptions } from './config';\n\nconst updateValues = invoice => {\n  const { invoiceList } = invoice;\n  let subTotal = 0;\n  invoiceList.forEach((item, index) => {\n    const price = item.costs * item.qty;\n    invoice.invoiceList[index].price = price;\n    invoice.invoiceList[index].key = index + 1;\n    subTotal += price;\n  });\n  invoice.subTotal = subTotal;\n  invoice.vatPrice = Math.floor(invoice.vatRate * subTotal * 0.01);\n  invoice.totalCost = invoice.vatPrice + subTotal;\n  return invoice;\n};\nconst checkInvoice = invoice => {\n  const emptyKeys = [\n    'number',\n    'billTo',\n    'billToAddress',\n    'billFrom',\n    'billFromAddress',\n    'currency',\n  ];\n  const emptyKeysErrors = [\n    'Invoice Number',\n    'Bill To',\n    'Bill To Address',\n    'Bill From',\n    'Bill From Address',\n    'Currency',\n  ];\n  for (let i = 0; i < emptyKeys.length; i++) {\n    if (!invoice[emptyKeys[i]]) {\n      return `Please fill in ${emptyKeysErrors[i]}`;\n    }\n  }\n  for (let i = 0; i < invoice.invoiceList.length; i++) {\n    if (!invoice.invoiceList[i].itemName) {\n      return `Please fill in item name of ${i + 1} item`;\n    }\n    if (invoice.invoiceList[i].costs === 0) {\n      return `cost of ${i + 1} item should be positive`;\n    }\n    if (invoice.invoiceList[i].qty === 0) {\n      return `quantity of ${i + 1} item should be positive`;\n    }\n  }\n  return '';\n};\n\nexport default class extends Component {\n  onSave = () => {\n    const { editableInvoice, isNewInvoice, updateInvoice } = this.props;\n    const error = checkInvoice(editableInvoice);\n    if (error) {\n      notification('error', error);\n    } else {\n      const successMessage = isNewInvoice\n        ? 'A new Invoice added'\n        : 'Invoice Updated';\n      notification('success', successMessage);\n      updateInvoice(editableInvoice);\n    }\n  };\n  render() {\n    const {\n      editableInvoice,\n      isNewInvoice,\n      redirectPath,\n      toggleView,\n      editInvoice,\n    } = this.props;\n    return (\n      <LayoutWrapper>\n        <Box>\n          <InvoicePageWrapper className=\"editView\">\n            <div className=\"PageHeader\">\n              {isNewInvoice ? (\n                <Link href={redirectPath}>\n                  <Button color=\"primary\">\n                    <span>Cancel</span>\n                  </Button>\n                </Link>\n              ) : (\n                <Button onClick={() => toggleView(false)}>\n                  <span>Cancel</span>\n                </Button>\n              )}\n\n              <Button type=\"primary\" onClick={this.onSave} className=\"saveBtn\">\n                <span>Save</span>\n              </Button>\n            </div>\n            <div className=\"PageContent\">\n              <div className=\"OrderInfo\">\n                <div className=\"LeftSideContent\">\n                  <h3 className=\"Title\">Invoice Info</h3>\n                  <Input\n                    placeholder=\"Number\"\n                    value={editableInvoice.number}\n                    onChange={event => {\n                      editableInvoice.number = event.target.value;\n                      editInvoice(editableInvoice);\n                    }}\n                    className=\"LeftSideContentInput\"\n                  />\n                </div>\n                <div className=\"RightSideContent\">\n                  <div className=\"RightSideStatus\">\n                    <span className=\"RightSideStatusSpan\">Order Status: </span>\n                    <OrderStatus\n                      value={editableInvoice.orderStatus}\n                      onChange={orderStatus => {\n                        editableInvoice.orderStatus = orderStatus;\n                        editInvoice(editableInvoice);\n                      }}\n                      orderStatusOptions={orderStatusOptions}\n                      className=\"RightStatusDropdown\"\n                    />\n                  </div>\n                  <div className=\"RightSideDate\">\n                    Order date:{' '}\n                    <DatePicker\n                      allowClear={false}\n                      value={moment(new Date(editableInvoice.orderDate))}\n                      onChange={val => {\n                        editableInvoice.orderDate = val.toDate().getTime();\n                        editInvoice(editableInvoice);\n                      }}\n                      format=\"MMMM Do YYYY\"\n                      animateYearScrolling={true}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"BillingInformation\">\n                <div className=\"LeftSideContent\">\n                  <Input\n                    placeholder=\"Bill From\"\n                    value={editableInvoice.billFrom}\n                    onChange={event => {\n                      editableInvoice.billFrom = event.target.value;\n                      editInvoice(editableInvoice);\n                    }}\n                    className=\"BillFormTitle\"\n                  />\n                  <Textarea\n                    placeholder=\"Bill From Address\"\n                    value={editableInvoice.billFromAddress}\n                    rows={5}\n                    onChange={event => {\n                      editableInvoice.billFromAddress = event.target.value;\n                      editInvoice(editableInvoice);\n                    }}\n                    className=\"BillFormAddress\"\n                  />\n                </div>\n                <div className=\"RightSideContent\">\n                  <Input\n                    placeholder=\"Bill To\"\n                    value={editableInvoice.billTo}\n                    onChange={event => {\n                      editableInvoice.billTo = event.target.value;\n                      editInvoice(editableInvoice);\n                    }}\n                    className=\"BillFormTitle\"\n                  />\n                  <Textarea\n                    placeholder=\"Bill To Address\"\n                    value={editableInvoice.billToAddress}\n                    rows={5}\n                    onChange={event => {\n                      editableInvoice.billToAddress = event.target.value;\n                      editInvoice(editableInvoice);\n                    }}\n                    className=\"BillFormAddress\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"InvoiceTable editInvoiceTable\">\n                <EditTable\n                  editableInvoice={editableInvoice}\n                  editInvoice={editInvoice}\n                  updateValues={updateValues}\n                />\n                <div className=\"InvoiceTableBtn\">\n                  <Button\n                    onClick={() => {\n                      editableInvoice.invoiceList.push({\n                        key: editableInvoice.invoiceList.length + 1,\n                        itemName: '',\n                        costs: 0,\n                        qty: 0,\n                        price: 0,\n                      });\n                      editInvoice(editableInvoice);\n                    }}\n                    type=\"primary\"\n                  >\n                    Add Item\n                  </Button>\n                </div>\n                <div className=\"TotalBill\">\n                  <p>\n                    <span className=\"TotalBillTitle\">Sub-total : </span>\n                    <span>{`${editableInvoice.currency}${editableInvoice.subTotal}`}</span>\n                  </p>\n                  <div className=\"vatRateCalc\">\n                    <span className=\"vatRateCalcSpan\"> Total Vat : </span>\n                    <div className=\"vatRateCalcWrap\">\n                      <Input\n                        value={editableInvoice.vatRate}\n                        addonAfter=\"%\"\n                        onChange={event => {\n                          editableInvoice.vatRate = stringToPosetiveInt(\n                            event.target.value,\n                            editableInvoice.vatRate\n                          );\n                          editInvoice(updateValues(editableInvoice));\n                        }}\n                      />\n\n                      <span>\n                        {`${editableInvoice.currency}${editableInvoice.vatPrice}`}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"currencySignWithTotal\">\n                    <span className=\"grandTotalSpan\">Grand Total </span>\n                    <div className=\"currencySignWrap\">\n                      <Input\n                        value={editableInvoice.currency}\n                        onChange={event => {\n                          editableInvoice.currency = event.target.value;\n                          editInvoice(editableInvoice);\n                        }}\n                        className=\"currencySign\"\n                      />\n                      <span className=\"currencySignSpan\">\n                        {editableInvoice.totalCost}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"ButtonWrapper\" />\n            </div>\n          </InvoicePageWrapper>\n        </Box>\n      </LayoutWrapper>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}