{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/containers/Tables/AntTables/configs.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport clone from 'clone';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport { DateCell, ImageCell, LinkCell, TextCell } from '@iso/components/Tables/HelperCells';\n\nvar renderCell = function renderCell(object, type, key) {\n  var value = object[key];\n\n  switch (type) {\n    case 'ImageCell':\n      return ImageCell(value);\n\n    case 'DateCell':\n      return DateCell(value);\n\n    case 'LinkCell':\n      return LinkCell(value);\n\n    default:\n      return TextCell(value);\n  }\n};\n\nvar columns = [{\n  title: __jsx(IntlMessages, {\n    id: \"antTable.title.image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }\n  }),\n  key: 'avatar',\n  width: '1%',\n  className: 'isoImageCell',\n  render: function render(object) {\n    return renderCell(object, 'ImageCell', 'avatar');\n  }\n}, {\n  title: __jsx(IntlMessages, {\n    id: \"antTable.title.firstName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  }),\n  key: 'firstName',\n  width: 100,\n  render: function render(object) {\n    return renderCell(object, 'TextCell', 'firstName');\n  }\n}, {\n  title: __jsx(IntlMessages, {\n    id: \"antTable.title.lastName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }\n  }),\n  key: 'lastName',\n  width: 100,\n  render: function render(object) {\n    return renderCell(object, 'TextCell', 'lastName');\n  }\n}, {\n  title: __jsx(IntlMessages, {\n    id: \"antTable.title.city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }\n  }),\n  key: 'city',\n  width: 200,\n  render: function render(object) {\n    return renderCell(object, 'TextCell', 'city');\n  }\n}, {\n  title: __jsx(IntlMessages, {\n    id: \"antTable.title.street\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }\n  }),\n  key: 'street',\n  width: 200,\n  render: function render(object) {\n    return renderCell(object, 'TextCell', 'street');\n  }\n}, {\n  title: __jsx(IntlMessages, {\n    id: \"antTable.title.email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  }),\n  key: 'email',\n  width: 200,\n  render: function render(object) {\n    return renderCell(object, 'LinkCell', 'email');\n  }\n}, {\n  title: __jsx(IntlMessages, {\n    id: \"antTable.title.dob\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }\n  }),\n  key: 'date',\n  width: 200,\n  render: function render(object) {\n    return renderCell(object, 'DateCell', 'date');\n  }\n}];\nvar smallColumns = [columns[1], columns[2], columns[3], columns[4]];\nvar sortColumns = [_objectSpread(_objectSpread({}, columns[1]), {}, {\n  sorter: true\n}), _objectSpread(_objectSpread({}, columns[2]), {}, {\n  sorter: true\n}), _objectSpread(_objectSpread({}, columns[3]), {}, {\n  sorter: true\n}), _objectSpread(_objectSpread({}, columns[4]), {}, {\n  sorter: true\n})];\nvar editColumns = [_objectSpread(_objectSpread({}, columns[1]), {}, {\n  width: 300\n}), _objectSpread(_objectSpread({}, columns[2]), {}, {\n  width: 300\n}), columns[3], columns[4]];\nvar groupColumns = [columns[0], {\n  title: 'Name',\n  children: [columns[1], columns[2]]\n}, {\n  title: 'Address',\n  children: [columns[3], columns[4]]\n}];\nvar tableinfos = [{\n  title: 'Simple Table',\n  value: 'simple',\n  columns: clone(smallColumns)\n}, {\n  title: 'Sortable Table',\n  value: 'sortView',\n  columns: clone(sortColumns)\n}, {\n  title: 'Search Text',\n  value: 'filterView',\n  columns: clone(smallColumns)\n}, {\n  title: 'Editable View',\n  value: 'editView',\n  columns: clone(editColumns)\n}, {\n  title: 'Grouping View',\n  value: 'groupView',\n  columns: clone(groupColumns)\n}, {\n  title: 'Customized View',\n  value: 'customizedView',\n  columns: clone(columns)\n}];\nexport { columns, tableinfos };","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/containers/Tables/AntTables/configs.js"],"names":["React","clone","IntlMessages","DateCell","ImageCell","LinkCell","TextCell","renderCell","object","type","key","value","columns","title","width","className","render","smallColumns","sortColumns","sorter","editColumns","groupColumns","children","tableinfos"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clone from 'clone';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport {\n  DateCell,\n  ImageCell,\n  LinkCell,\n  TextCell,\n} from '@iso/components/Tables/HelperCells';\n\nconst renderCell = (object, type, key) => {\n  const value = object[key];\n  switch (type) {\n    case 'ImageCell':\n      return ImageCell(value);\n    case 'DateCell':\n      return DateCell(value);\n    case 'LinkCell':\n      return LinkCell(value);\n    default:\n      return TextCell(value);\n  }\n};\n\nconst columns = [\n  {\n    title: <IntlMessages id=\"antTable.title.image\" />,\n    key: 'avatar',\n    width: '1%',\n    className: 'isoImageCell',\n    render: object => renderCell(object, 'ImageCell', 'avatar'),\n  },\n  {\n    title: <IntlMessages id=\"antTable.title.firstName\" />,\n    key: 'firstName',\n    width: 100,\n    render: object => renderCell(object, 'TextCell', 'firstName'),\n  },\n  {\n    title: <IntlMessages id=\"antTable.title.lastName\" />,\n    key: 'lastName',\n    width: 100,\n    render: object => renderCell(object, 'TextCell', 'lastName'),\n  },\n  {\n    title: <IntlMessages id=\"antTable.title.city\" />,\n    key: 'city',\n    width: 200,\n    render: object => renderCell(object, 'TextCell', 'city'),\n  },\n  {\n    title: <IntlMessages id=\"antTable.title.street\" />,\n    key: 'street',\n    width: 200,\n    render: object => renderCell(object, 'TextCell', 'street'),\n  },\n  {\n    title: <IntlMessages id=\"antTable.title.email\" />,\n    key: 'email',\n    width: 200,\n    render: object => renderCell(object, 'LinkCell', 'email'),\n  },\n  {\n    title: <IntlMessages id=\"antTable.title.dob\" />,\n    key: 'date',\n    width: 200,\n    render: object => renderCell(object, 'DateCell', 'date'),\n  },\n];\nconst smallColumns = [columns[1], columns[2], columns[3], columns[4]];\nconst sortColumns = [\n  { ...columns[1], sorter: true },\n  { ...columns[2], sorter: true },\n  { ...columns[3], sorter: true },\n  { ...columns[4], sorter: true },\n];\nconst editColumns = [\n  { ...columns[1], width: 300 },\n  { ...columns[2], width: 300 },\n  columns[3],\n  columns[4],\n];\nconst groupColumns = [\n  columns[0],\n  {\n    title: 'Name',\n    children: [columns[1], columns[2]],\n  },\n  {\n    title: 'Address',\n    children: [columns[3], columns[4]],\n  },\n];\nconst tableinfos = [\n  {\n    title: 'Simple Table',\n    value: 'simple',\n    columns: clone(smallColumns),\n  },\n  {\n    title: 'Sortable Table',\n    value: 'sortView',\n    columns: clone(sortColumns),\n  },\n  {\n    title: 'Search Text',\n    value: 'filterView',\n    columns: clone(smallColumns),\n  },\n  {\n    title: 'Editable View',\n    value: 'editView',\n    columns: clone(editColumns),\n  },\n  {\n    title: 'Grouping View',\n    value: 'groupView',\n    columns: clone(groupColumns),\n  },\n  {\n    title: 'Customized View',\n    value: 'customizedView',\n    columns: clone(columns),\n  },\n];\nexport { columns, tableinfos };\n"]},"metadata":{},"sourceType":"module"}