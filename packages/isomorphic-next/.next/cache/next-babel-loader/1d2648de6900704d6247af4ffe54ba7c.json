{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { isServer } from '@iso/lib/helpers/isServer';\nvar productDatas = [];\n\nfunction getInitData() {\n  var productQuantity = [];\n  var products = {};\n\n  if (!isServer) {\n    var cartProductQuantity = localStorage.getItem('cartProductQuantity');\n    var cartProducts = localStorage.getItem('cartProducts');\n\n    if (cartProducts && cartProductQuantity) {\n      cartProducts = JSON.parse(cartProducts);\n      JSON.parse(cartProductQuantity).forEach(function (product) {\n        var objectID = product.objectID;\n\n        if (!isNaN(product.quantity)) {\n          productQuantity.push({\n            objectID: objectID,\n            quantity: parseInt(product.quantity, 10)\n          });\n          products[objectID] = _objectSpread(_objectSpread({}, cartProducts[objectID]), {}, {\n            price: parseFloat(cartProducts[objectID].price, 10)\n          });\n        }\n      });\n    } else {\n      productDatas.forEach(function (product) {\n        productQuantity.push({\n          objectID: product.objectID,\n          quantity: 1\n        });\n        products[product.objectID] = product;\n      });\n    }\n  }\n\n  return {\n    productQuantity: productQuantity,\n    products: products\n  };\n}\n\nexport default getInitData();","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/ecommerce/config.js"],"names":["isServer","productDatas","getInitData","productQuantity","products","cartProductQuantity","localStorage","getItem","cartProducts","JSON","parse","forEach","product","objectID","isNaN","quantity","push","parseInt","price","parseFloat"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,2BAAzB;AAEA,IAAMC,YAAY,GAAG,EAArB;;AACA,SAASC,WAAT,GAAuB;AACrB,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAMC,QAAQ,GAAG,EAAjB;;AACA,MAAI,CAACJ,QAAL,EAAe;AACb,QAAMK,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,qBAArB,CAA5B;AACA,QAAIC,YAAY,GAAGF,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;;AACA,QAAIC,YAAY,IAAIH,mBAApB,EAAyC;AACvCG,MAAAA,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWF,YAAX,CAAf;AACAC,MAAAA,IAAI,CAACC,KAAL,CAAWL,mBAAX,EAAgCM,OAAhC,CAAwC,UAAAC,OAAO,EAAI;AACjD,YAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAzB;;AACA,YAAI,CAACC,KAAK,CAACF,OAAO,CAACG,QAAT,CAAV,EAA8B;AAC5BZ,UAAAA,eAAe,CAACa,IAAhB,CAAqB;AACnBH,YAAAA,QAAQ,EAARA,QADmB;AAEnBE,YAAAA,QAAQ,EAAEE,QAAQ,CAACL,OAAO,CAACG,QAAT,EAAmB,EAAnB;AAFC,WAArB;AAIAX,UAAAA,QAAQ,CAACS,QAAD,CAAR,mCACKL,YAAY,CAACK,QAAD,CADjB;AAEEK,YAAAA,KAAK,EAAEC,UAAU,CAACX,YAAY,CAACK,QAAD,CAAZ,CAAuBK,KAAxB,EAA+B,EAA/B;AAFnB;AAID;AACF,OAZD;AAaD,KAfD,MAeO;AACLjB,MAAAA,YAAY,CAACU,OAAb,CAAqB,UAAAC,OAAO,EAAI;AAC9BT,QAAAA,eAAe,CAACa,IAAhB,CAAqB;AACnBH,UAAAA,QAAQ,EAAED,OAAO,CAACC,QADC;AAEnBE,UAAAA,QAAQ,EAAE;AAFS,SAArB;AAIAX,QAAAA,QAAQ,CAACQ,OAAO,CAACC,QAAT,CAAR,GAA6BD,OAA7B;AACD,OAND;AAOD;AACF;;AACD,SAAO;AAAET,IAAAA,eAAe,EAAfA,eAAF;AAAmBC,IAAAA,QAAQ,EAARA;AAAnB,GAAP;AACD;;AAED,eAAeF,WAAW,EAA1B","sourcesContent":["import { isServer } from '@iso/lib/helpers/isServer';\n\nconst productDatas = [];\nfunction getInitData() {\n  let productQuantity = [];\n  const products = {};\n  if (!isServer) {\n    const cartProductQuantity = localStorage.getItem('cartProductQuantity');\n    let cartProducts = localStorage.getItem('cartProducts');\n    if (cartProducts && cartProductQuantity) {\n      cartProducts = JSON.parse(cartProducts);\n      JSON.parse(cartProductQuantity).forEach(product => {\n        const objectID = product.objectID;\n        if (!isNaN(product.quantity)) {\n          productQuantity.push({\n            objectID,\n            quantity: parseInt(product.quantity, 10),\n          });\n          products[objectID] = {\n            ...cartProducts[objectID],\n            price: parseFloat(cartProducts[objectID].price, 10),\n          };\n        }\n      });\n    } else {\n      productDatas.forEach(product => {\n        productQuantity.push({\n          objectID: product.objectID,\n          quantity: 1,\n        });\n        products[product.objectID] = product;\n      });\n    }\n  }\n  return { productQuantity, products };\n}\n\nexport default getInitData();\n"]},"metadata":{},"sourceType":"module"}