{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getInvoice),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(updateInvoiceSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put } from 'redux-saga/effects';\nimport { localDataName, createDemoData } from './config';\nimport actions from './actions';\nexport function getInvoice() {\n  return _regeneratorRuntime.wrap(function getInvoice$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put({\n            type: actions.UPDATE_INVOICE,\n            invoices: createDemoData()\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function updateInvoiceSaga(_ref) {\n  var invoices, invoice;\n  return _regeneratorRuntime.wrap(function updateInvoiceSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          invoices = _ref.invoices, invoice = _ref.invoice;\n          _context2.next = 3;\n          return localStorage.setItem(localDataName, JSON.stringify(invoices));\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: actions.UPDATE_INVOICE,\n            invoices: invoices,\n            invoice: invoice\n          });\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.t0 = all;\n          _context3.next = 3;\n          return takeEvery(actions.GET_INVOICE, getInvoice);\n\n        case 3:\n          _context3.t1 = _context3.sent;\n          _context3.next = 6;\n          return takeEvery(actions.UPDATE_INVOICE_SAGA, updateInvoiceSaga);\n\n        case 6:\n          _context3.t2 = _context3.sent;\n          _context3.t3 = [_context3.t1, _context3.t2];\n          _context3.next = 10;\n          return (0, _context3.t0)(_context3.t3);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/invoice/saga.js"],"names":["getInvoice","updateInvoiceSaga","rootSaga","all","takeEvery","put","localDataName","createDemoData","actions","type","UPDATE_INVOICE","invoices","invoice","localStorage","setItem","JSON","stringify","GET_INVOICE","UPDATE_INVOICE_SAGA"],"mappings":";;oDAIiBA,U;qDAMAC,iB;qDAQQC,Q;;AAlBzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,QAAoC,oBAApC;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,UAA9C;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,SAAUR,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMK,GAAG,CAAC;AACRI,YAAAA,IAAI,EAAED,OAAO,CAACE,cADN;AAERC,YAAAA,QAAQ,EAAEJ,cAAc;AAFhB,WAAD,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMP,OAAO,SAAUN,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BU,UAAAA,QAA9B,QAA8BA,QAA9B,EAAwCC,OAAxC,QAAwCA,OAAxC;AAAA;AACL,iBAAMC,YAAY,CAACC,OAAb,CAAqBR,aAArB,EAAoCS,IAAI,CAACC,SAAL,CAAeL,QAAf,CAApC,CAAN;;AADK;AAAA;AAEL,iBAAMN,GAAG,CAAC;AACRI,YAAAA,IAAI,EAAED,OAAO,CAACE,cADN;AAERC,YAAAA,QAAQ,EAARA,QAFQ;AAGRC,YAAAA,OAAO,EAAPA;AAHQ,WAAD,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQP,eAAe,SAAUV,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA,yBACPC,GADO;AAAA;AAEX,iBAAMC,SAAS,CAACI,OAAO,CAACS,WAAT,EAAsBjB,UAAtB,CAAf;;AAFW;AAAA;AAAA;AAGX,iBAAMI,SAAS,CAACI,OAAO,CAACU,mBAAT,EAA8BjB,iBAA9B,CAAf;;AAHW;AAAA;AAAA;AAAA;AACb;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put } from 'redux-saga/effects';\nimport { localDataName, createDemoData } from './config';\nimport actions from './actions';\n\nexport function* getInvoice() {\n  yield put({\n    type: actions.UPDATE_INVOICE,\n    invoices: createDemoData(),\n  });\n}\nexport function* updateInvoiceSaga({ invoices, invoice }) {\n  yield localStorage.setItem(localDataName, JSON.stringify(invoices));\n  yield put({\n    type: actions.UPDATE_INVOICE,\n    invoices,\n    invoice,\n  });\n}\nexport default function* rootSaga() {\n  yield all([\n    yield takeEvery(actions.GET_INVOICE, getInvoice),\n    yield takeEvery(actions.UPDATE_INVOICE_SAGA, updateInvoiceSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}