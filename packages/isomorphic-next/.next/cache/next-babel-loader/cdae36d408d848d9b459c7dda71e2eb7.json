{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(initChat),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(sendMessage),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addNewUser),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateChatrooms),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(updateChatroomSaga),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call, fork, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport { getDocuments, getDocumentsByQuery, addDocument } from '@iso/lib/firebase/firebase.util';\n\nvar getSelectedChatRoom = function getSelectedChatRoom(state) {\n  return state.Chat.selectedChatRoom;\n};\n\nvar reverseString = function reverseString(str) {\n  return str.split('').reverse().join('');\n};\n\nvar sortChatrooms = function sortChatrooms(optionA, optionB) {\n  return optionB.lastMessageTime - optionA.lastMessageTime;\n};\n\nvar sortMessages = function sortMessages(optionA, optionB) {\n  return optionA.messageTime - optionB.messageTime;\n};\n\nvar getCurrentUser = function getCurrentUser() {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl: 'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png'\n    }\n  };\n};\n\nvar chatroomsUserCollections;\nvar chatroomCollectionRef = db.collection('chatRooms');\nvar messagesCollectionRef = db.collection('messages');\n\nvar sendMessageBatch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var payload, selectedChatRoom, batch, revId, messageTime, chatRoomModified;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload, selectedChatRoom = _ref.selectedChatRoom;\n            batch = db.batch(); // const { chatRoom, text } = payload;\n\n            console.log(selectedChatRoom, payload, 'send');\n            revId = reverseString(selectedChatRoom.id);\n            messageTime = new Date().getTime();\n            chatRoomModified = {\n              lastMessage: payload,\n              lastMessageTime: messageTime\n            };\n            batch.update(chatroomCollectionRef.doc(selectedChatRoom.id), chatRoomModified);\n            batch.update(chatroomCollectionRef.doc(revId), chatRoomModified);\n            batch.set(messagesCollectionRef.doc(), {\n              sender: selectedChatRoom.userId,\n              text: payload,\n              messageTime: messageTime,\n              chatRoomId: selectedChatRoom.id\n            });\n            batch.commit(); // yield fork(updateChatrooms);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sendMessageBatch(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction initChat(action) {\n  var payload, users, chatRooms, messages;\n  return _regeneratorRuntime.wrap(function initChat$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // console.log(payload, 'chatinit');\n          payload = getCurrentUser();\n          _context2.next = 3;\n          return call(getDocuments, 'users');\n\n        case 3:\n          users = _context2.sent;\n          _context2.next = 6;\n          return call(getDocumentsByQuery, 'chatRooms', ['userId', '==', payload.userId]);\n\n        case 6:\n          chatRooms = _context2.sent;\n          chatRooms.sort(sortChatrooms);\n          _context2.next = 10;\n          return call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRooms[0].id]);\n\n        case 10:\n          messages = _context2.sent;\n          console.log(chatRooms, 'chatRooms');\n          messages.sort(sortMessages); // fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n\n          chatroomsUserCollections = db.collection('chatRooms').where('userId', '==', payload.userId);\n          _context2.next = 16;\n          return fork(updateChatrooms);\n\n        case 16:\n          _context2.next = 18;\n          return put({\n            type: actions.CHAT_INIT_SAGA,\n            user: payload.user,\n            userId: payload.userId,\n            users: users,\n            chatRooms: chatRooms,\n            messages: messages\n          });\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendMessage(_ref3) {\n  var payload, selectedChatRoom;\n  return _regeneratorRuntime.wrap(function sendMessage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context3.next = 3;\n          return select(getSelectedChatRoom);\n\n        case 3:\n          selectedChatRoom = _context3.sent;\n          _context3.next = 6;\n          return call(sendMessageBatch, {\n            payload: payload,\n            selectedChatRoom: selectedChatRoom\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: actions.NEW_MESSAGE_SUCCESFULL\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addNewUser(_ref4) {\n  var user, addNewUsersProp, newUserId, newUser, newChatroom, newChatRoomId, chatRoomKeyRev, newChatroomRev;\n  return _regeneratorRuntime.wrap(function addNewUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          user = _ref4.user, addNewUsersProp = _ref4.addNewUsersProp;\n          _context4.next = 3;\n          return call(addDocument, 'users', addNewUsersProp);\n\n        case 3:\n          newUserId = _context4.sent;\n          newUser = _objectSpread({\n            id: newUserId\n          }, addNewUsersProp);\n          newChatroom = {\n            reverse: false,\n            userId: user.id,\n            otherUserId: newUserId,\n            otherUserInfo: newUser,\n            lastMessage: '',\n            lastMessageTime: 0\n          };\n          _context4.next = 8;\n          return call(addDocument, 'chatRooms', newChatroom);\n\n        case 8:\n          newChatRoomId = _context4.sent;\n          chatRoomKeyRev = reverseString(newChatRoomId);\n          newChatroomRev = {\n            id: chatRoomKeyRev,\n            reverse: true,\n            userId: newUserId,\n            otherUserId: user.id,\n            otherUserInfo: user,\n            lastMessage: '',\n            lastMessageTime: 0\n          };\n          _context4.next = 13;\n          return call(addDocument, 'chatRooms', newChatroomRev);\n\n        case 13:\n          _context4.next = 15;\n          return put({\n            type: actions.ADD_NEW_USER_SAGA,\n            user: newUser,\n            chatRoom: _objectSpread({\n              id: newChatRoomId\n            }, newChatroom)\n          });\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction updateChatrooms() {\n  var successActionCreator;\n  return _regeneratorRuntime.wrap(function updateChatrooms$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          successActionCreator = function successActionCreator(data) {\n            var _data$docChanges$ = data.docChanges()[0],\n                type = _data$docChanges$.type,\n                newIndex = _data$docChanges$.newIndex;\n            var dataMoodified = type === 'modified';\n\n            if (!dataMoodified) {\n              return {\n                type: 'NO_CHANGE'\n              };\n            }\n\n            var chatRoom = data.docs[newIndex].data();\n            return {\n              type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n              payload: {\n                chatRoom: chatRoom\n              }\n            };\n          };\n\n          _context5.next = 3;\n          return call(rsf.firestore.syncCollection, chatroomsUserCollections, {\n            successActionCreator: successActionCreator\n          });\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction updateChatroomSaga(_ref5) {\n  var payload, chatRoom, selected, selectedChatRoom, messages;\n  return _regeneratorRuntime.wrap(function updateChatroomSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref5.payload;\n          chatRoom = payload.chatRoom;\n          selected = payload.selected;\n          _context6.next = 5;\n          return select(getSelectedChatRoom);\n\n        case 5:\n          selectedChatRoom = _context6.sent;\n\n          if (!(selected || chatRoom.id === selectedChatRoom.id)) {\n            _context6.next = 11;\n            break;\n          }\n\n          _context6.next = 9;\n          return call(getDocumentsByQuery, 'messages', ['chatRoomId', '==', chatRoom.id]);\n\n        case 9:\n          messages = _context6.sent;\n          selected = true;\n\n        case 11:\n          _context6.next = 13;\n          return put({\n            type: actions.CHAT_UPDATE_CHATROOM,\n            chatRoom: chatRoom,\n            messages: messages,\n            selected: selected\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([takeEvery(actions.CHAT_INIT, initChat), takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga), takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage), takeEvery(actions.ADD_NEW_USER, addNewUser)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/chat/sagas.js"],"names":["initChat","sendMessage","addNewUser","updateChatrooms","updateChatroomSaga","rootSaga","all","takeEvery","put","call","fork","select","actions","rsf","db","getDocuments","getDocumentsByQuery","addDocument","getSelectedChatRoom","state","Chat","selectedChatRoom","reverseString","str","split","reverse","join","sortChatrooms","optionA","optionB","lastMessageTime","sortMessages","messageTime","getCurrentUser","userId","user","id","dob","gender","language","mobileNo","name","profileImageUrl","chatroomsUserCollections","chatroomCollectionRef","collection","messagesCollectionRef","sendMessageBatch","payload","batch","console","log","revId","Date","getTime","chatRoomModified","lastMessage","update","doc","set","sender","text","chatRoomId","commit","action","users","chatRooms","sort","messages","where","type","CHAT_INIT_SAGA","NEW_MESSAGE_SUCCESFULL","addNewUsersProp","newUserId","newUser","newChatroom","otherUserId","otherUserInfo","newChatRoomId","chatRoomKeyRev","newChatroomRev","ADD_NEW_USER_SAGA","chatRoom","successActionCreator","data","docChanges","newIndex","dataMoodified","docs","CHAT_UPDATE_CHATROOM_SAGA","firestore","syncCollection","selected","CHAT_UPDATE_CHATROOM","CHAT_INIT","CHAT_SEND_MESSAGE","ADD_NEW_USER"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, call, fork, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { rsf, db } from '@iso/lib/firebase/firebase';\nimport {\n  getDocuments,\n  getDocumentsByQuery,\n  addDocument,\n} from '@iso/lib/firebase/firebase.util';\nconst getSelectedChatRoom = state => state.Chat.selectedChatRoom;\nconst reverseString = str =>\n  str\n    .split('')\n    .reverse()\n    .join('');\n\nconst sortChatrooms = (optionA, optionB) =>\n  optionB.lastMessageTime - optionA.lastMessageTime;\nconst sortMessages = (optionA, optionB) =>\n  optionA.messageTime - optionB.messageTime;\nconst getCurrentUser = () => {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl:\n        'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png',\n    },\n  };\n};\n\nlet chatroomsUserCollections;\nlet chatroomCollectionRef = db.collection('chatRooms');\nlet messagesCollectionRef = db.collection('messages');\nconst sendMessageBatch = async ({ payload, selectedChatRoom }) => {\n  const batch = db.batch();\n  // const { chatRoom, text } = payload;\n\n  console.log(selectedChatRoom, payload, 'send');\n  const revId = reverseString(selectedChatRoom.id);\n  const messageTime = new Date().getTime();\n  const chatRoomModified = {\n    lastMessage: payload,\n    lastMessageTime: messageTime,\n  };\n  batch.update(\n    chatroomCollectionRef.doc(selectedChatRoom.id),\n    chatRoomModified\n  );\n  batch.update(chatroomCollectionRef.doc(revId), chatRoomModified);\n  batch.set(messagesCollectionRef.doc(), {\n    sender: selectedChatRoom.userId,\n    text: payload,\n    messageTime,\n    chatRoomId: selectedChatRoom.id,\n  });\n  batch.commit();\n  // yield fork(updateChatrooms);\n};\n\nfunction* initChat(action) {\n  // console.log(payload, 'chatinit');\n\n  const payload = getCurrentUser();\n  const users = yield call(getDocuments, 'users');\n\n  const chatRooms = yield call(getDocumentsByQuery, 'chatRooms', [\n    'userId',\n    '==',\n    payload.userId,\n  ]);\n  chatRooms.sort(sortChatrooms);\n  const messages = yield call(getDocumentsByQuery, 'messages', [\n    'chatRoomId',\n    '==',\n    chatRooms[0].id,\n  ]);\n  console.log(chatRooms, 'chatRooms');\n  messages.sort(sortMessages);\n  // fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n  chatroomsUserCollections = db\n    .collection('chatRooms')\n    .where('userId', '==', payload.userId);\n  yield fork(updateChatrooms);\n  yield put({\n    type: actions.CHAT_INIT_SAGA,\n    user: payload.user,\n    userId: payload.userId,\n    users,\n    chatRooms,\n    messages,\n  });\n}\n\nfunction* sendMessage({ payload }) {\n  // fsProps.selectedChatRoom = payload.chatRoom;\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n\n  yield call(sendMessageBatch, { payload, selectedChatRoom });\n  yield put({\n    type: actions.NEW_MESSAGE_SUCCESFULL,\n  });\n  // yield fork(updateChatrooms);\n}\nfunction* addNewUser({ user, addNewUsersProp }) {\n  const newUserId = yield call(addDocument, 'users', addNewUsersProp);\n  const newUser = { id: newUserId, ...addNewUsersProp };\n  const newChatroom = {\n    reverse: false,\n    userId: user.id,\n    otherUserId: newUserId,\n    otherUserInfo: newUser,\n    lastMessage: '',\n    lastMessageTime: 0,\n  };\n  const newChatRoomId = yield call(addDocument, 'chatRooms', newChatroom);\n  const chatRoomKeyRev = reverseString(newChatRoomId);\n  const newChatroomRev = {\n    id: chatRoomKeyRev,\n    reverse: true,\n    userId: newUserId,\n    otherUserId: user.id,\n    otherUserInfo: user,\n    lastMessage: '',\n    lastMessageTime: 0,\n  };\n  yield call(addDocument, 'chatRooms', newChatroomRev);\n\n  yield put({\n    type: actions.ADD_NEW_USER_SAGA,\n    user: newUser,\n    chatRoom: { id: newChatRoomId, ...newChatroom },\n  });\n}\nfunction* updateChatrooms() {\n  const successActionCreator = data => {\n    const { type, newIndex } = data.docChanges()[0];\n    const dataMoodified = type === 'modified';\n    if (!dataMoodified) {\n      return { type: 'NO_CHANGE' };\n    }\n    const chatRoom = data.docs[newIndex].data();\n\n    return {\n      type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n      payload: { chatRoom },\n    };\n  };\n  yield call(rsf.firestore.syncCollection, chatroomsUserCollections, {\n    successActionCreator,\n  });\n}\nfunction* updateChatroomSaga({ payload }) {\n  const { chatRoom } = payload;\n  let { selected } = payload;\n\n  const selectedChatRoom = yield select(getSelectedChatRoom);\n\n  let messages;\n  if (selected || chatRoom.id === selectedChatRoom.id) {\n    messages = yield call(getDocumentsByQuery, 'messages', [\n      'chatRoomId',\n      '==',\n      chatRoom.id,\n    ]);\n    selected = true;\n  }\n\n  yield put({\n    type: actions.CHAT_UPDATE_CHATROOM,\n    chatRoom,\n    messages,\n    selected,\n  });\n}\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.CHAT_INIT, initChat),\n    takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga),\n    takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage),\n    takeEvery(actions.ADD_NEW_USER, addNewUser),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}