{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar notesAction = {\n  CHANGE_NOTE: 'CHANGE_NOTE',\n  ADD_NOTE: 'ADD_NOTE',\n  EDIT_NOTE: 'EDIT_NOTE',\n  DELETE_NOTE: 'DELETE_NOTE',\n  CHANGE_COLOR: 'CHANGE_COLOR',\n  changeNote: function changeNote(id) {\n    return function (dispatch, getState) {\n      var notes = getState().Notes.notes;\n      var seectedColor = notes[notes.findIndex(function (note) {\n        return note.id === id;\n      })].color;\n      dispatch({\n        type: notesAction.CHANGE_NOTE,\n        selectedId: id,\n        seectedColor: seectedColor\n      });\n    };\n  },\n  addNote: function addNote() {\n    return function (dispatch, getState) {\n      var newNote = {\n        id: new Date(),\n        note: 'New Note',\n        createTime: new Date(),\n        color: getState().Notes.seectedColor\n      };\n      var notes = [newNote].concat(_toConsumableArray(getState().Notes.notes));\n      dispatch({\n        type: notesAction.ADD_NOTE,\n        selectedId: newNote.id,\n        notes: notes\n      });\n    };\n  },\n  editNote: function editNote(id, newNote) {\n    return function (dispatch, getState) {\n      var oldNotes = getState().Notes.notes;\n      var notes = [];\n      oldNotes.forEach(function (note) {\n        if (note.id !== id) {\n          notes.push(note);\n        } else {\n          note.note = newNote;\n          notes.push(note);\n        }\n      });\n      dispatch({\n        type: notesAction.EDIT_NOTE,\n        notes: notes\n      });\n    };\n  },\n  deleteNote: function deleteNote(id) {\n    return function (dispatch, getState) {\n      var oldNotes = getState().Notes.notes;\n      var notes = [];\n      oldNotes.forEach(function (note) {\n        if (note.id !== id) {\n          notes.push(note);\n        }\n      });\n      var selectedId = getState().Notes.selectedId;\n\n      if (selectedId === id) {\n        if (notes.length === 0) {\n          selectedId = undefined;\n        } else {\n          selectedId = notes[0].id;\n        }\n      }\n\n      dispatch({\n        type: notesAction.DELETE_NOTE,\n        notes: notes,\n        selectedId: selectedId\n      });\n    };\n  },\n  changeColor: function changeColor(seectedColor) {\n    return function (dispatch, getState) {\n      var oldNotes = getState().Notes.notes;\n      var selectedId = getState().Notes.selectedId;\n      var notes = [];\n      oldNotes.forEach(function (note) {\n        if (note.id !== selectedId) {\n          notes.push(note);\n        } else {\n          note.color = seectedColor;\n          notes.push(note);\n        }\n      });\n      dispatch({\n        type: notesAction.CHANGE_COLOR,\n        notes: notes,\n        seectedColor: seectedColor\n      });\n    };\n  }\n};\nexport default notesAction;","map":{"version":3,"sources":["/Users/walaa/Desktop/Isomorphic Main/isomorphic/node_modules/@iso/redux/notes/actions.js"],"names":["notesAction","CHANGE_NOTE","ADD_NOTE","EDIT_NOTE","DELETE_NOTE","CHANGE_COLOR","changeNote","id","dispatch","getState","notes","Notes","seectedColor","findIndex","note","color","type","selectedId","addNote","newNote","Date","createTime","editNote","oldNotes","forEach","push","deleteNote","length","undefined","changeColor"],"mappings":"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","sourcesContent":["const notesAction = {\n  CHANGE_NOTE: 'CHANGE_NOTE',\n  ADD_NOTE: 'ADD_NOTE',\n  EDIT_NOTE: 'EDIT_NOTE',\n  DELETE_NOTE: 'DELETE_NOTE',\n  CHANGE_COLOR: 'CHANGE_COLOR',\n\n  changeNote: id => {\n    return (dispatch, getState) => {\n      const notes = getState().Notes.notes;\n      const seectedColor = notes[notes.findIndex(note => note.id === id)].color;\n      dispatch({\n        type: notesAction.CHANGE_NOTE,\n        selectedId: id,\n        seectedColor,\n      });\n    };\n  },\n  addNote: () => {\n    return (dispatch, getState) => {\n      const newNote = {\n        id: new Date(),\n        note: 'New Note',\n        createTime: new Date(),\n        color: getState().Notes.seectedColor,\n      };\n      const notes = [newNote, ...getState().Notes.notes];\n      dispatch({\n        type: notesAction.ADD_NOTE,\n        selectedId: newNote.id,\n        notes,\n      });\n    };\n  },\n  editNote: (id, newNote) => {\n    return (dispatch, getState) => {\n      const oldNotes = getState().Notes.notes;\n      const notes = [];\n      oldNotes.forEach(note => {\n        if (note.id !== id) {\n          notes.push(note);\n        } else {\n          note.note = newNote;\n          notes.push(note);\n        }\n      });\n      dispatch({\n        type: notesAction.EDIT_NOTE,\n        notes,\n      });\n    };\n  },\n  deleteNote: id => {\n    return (dispatch, getState) => {\n      const oldNotes = getState().Notes.notes;\n      const notes = [];\n      oldNotes.forEach(note => {\n        if (note.id !== id) {\n          notes.push(note);\n        }\n      });\n      let selectedId = getState().Notes.selectedId;\n      if (selectedId === id) {\n        if (notes.length === 0) {\n          selectedId = undefined;\n        } else {\n          selectedId = notes[0].id;\n        }\n      }\n      dispatch({\n        type: notesAction.DELETE_NOTE,\n        notes,\n        selectedId,\n      });\n    };\n  },\n  changeColor: seectedColor => {\n    return (dispatch, getState) => {\n      const oldNotes = getState().Notes.notes;\n      const selectedId = getState().Notes.selectedId;\n      const notes = [];\n      oldNotes.forEach(note => {\n        if (note.id !== selectedId) {\n          notes.push(note);\n        } else {\n          note.color = seectedColor;\n          notes.push(note);\n        }\n      });\n      dispatch({\n        type: notesAction.CHANGE_COLOR,\n        notes,\n        seectedColor,\n      });\n    };\n  },\n};\nexport default notesAction;\n"]},"metadata":{},"sourceType":"module"}